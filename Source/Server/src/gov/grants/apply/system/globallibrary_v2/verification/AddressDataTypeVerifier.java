//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.02.13 at 11:23:34 AM EST 
//


package gov.grants.apply.system.globallibrary_v2.verification;

public class AddressDataTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
{

    protected java.lang.Object[] values = new java.lang.Object[] {"WY: Wyoming", "WQ: Wake Island", "PR: Puerto Rico", "CA: California", "JQ: Johnston Atoll", "KS: Kansas", "PS: Trust Territory of Pacific", "MH: Marshall Islands", "CT: Connecticut", "MD: Maryland", "PW: Palau", "AE: APO/FPO Europe, Middle East, and Africa", "NM: New Mexico", "OR: Oregon", "AR: Arkansas", "VI: Virgin Islands of the U.S.", "KQ: Kingman Reef", "TN: Tennessee", "WA: Washington", "AP: APO/FPO Korea, Japan, Philippines, Other Pacific", "MS: Mississippi", "AK: Alaska", "NJ: New Jersey", "FM: Federated States of Micronesia", "KY: Kentucky", "ID: Idaho", "OH: Ohio", "MN: Minnesota", "NC: North Carolina", "NV: Nevada", "IA: Iowa", "RI: Rhode Island", "FL: Florida", "FQ: Baker Island", "MO: Missouri", "HI: Hawaii", "UT: Utah", "NE: Nebraska", "WV: West Virginia", "ME: Maine", "VT: Vermont", "BQ: Navassa Island", "IN: Indiana", "IL: Illinois", "HQ: Howard Island", "WI: Wisconsin", "DE: Delaware", "AZ: Arizona", "LQ: Palmyra Atoll", "MP: Northern Mariana Islands", "PA: Pennsylvania", "AA: APO/FPO Central and South America", "NY: New York", "AL: Alabama", "VA: Virginia", "TX: Texas", "ND: North Dakota", "MQ: Midway Islands", "OK: Oklahoma", "MA: Massachusetts", "NH: New Hampshire", "GU: Guam", "SC: South Carolina", "MT: Montana", "DC: District of Columbia", "GA: Georgia", "MI: Michigan", "SD: South Dakota", "CO: Colorado", "AS: American Samoa", "LA: Louisiana"};
    protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
    protected java.lang.Object[] values0 = new java.lang.Object[] {"ARE: UNITED ARAB EMIRATES", "NIU: NIUE", "FRO: FAROE ISLANDS", "CHL: CHILE", "NRU: NAURU", "GUY: GUYANA", "DEU: GERMANY", "BOL: BOLIVIA", "PAK: PAKISTAN", "MCO: MONACO", "TTO: TRINIDAD AND TOBAGO", "LSO: LESOTHO", "QAT: QATAR", "ABW: ARUBA", "ZWE: ZIMBABWE", "GUF: FRENCH GUIANA", "MYT: MAYOTTE", "MDG: MADAGASCAR", "ERI: ERITREA", "COG: CONGO, People\'s Republic of", "VUT: VANUATU", "TON: TONGA", "SVN: SLOVENIA", "CRI: COSTA RICA", "MLI: MALI", "CYP: CYPRUS", "BRA: BRAZIL", "TWN: TAIWAN", "GTM: GUATEMALA", "NPL: NEPAL", "TKL: TOKELAU", "LKA: SRI LANKA", "MEX: MEXICO", "SWZ: SWAZILAND", "NCL: NEW CALEDONIA", "HUN: HUNGARY", "VEN: VENEZUELA", "BEL: BELGIUM", "ALB: ALBANIA", "NZL: NEW ZEALAND", "COL: COLOMBIA", "UGA: UGANDA", "TKM: TURKMENISTAN", "JPN: JAPAN", "PNG: PAPUA NEW GUINEA", "AZE: AZERBAIJAN", "MWI: MALAWI", "VNM: VIET NAM", "SLB: SOLOMON ISLANDS", "TUN: TUNISIA", "BIH: BOSNIA AND HERZEGOWINA", "SGS: SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS", "EGY: EGYPT", "VGB: VIRGIN ISLANDS (BRITISH)", "ARM: ARMENIA", "WSM: SAMOA", "AUS: AUSTRALIA", "LVA: LATVIA", "COK: COOK ISLANDS", "BHR: BAHRAIN", "SYR: SYRIAN ARAB REPUBLIC", "JAM: JAMAICA", "DOM: DOMINICAN REPUBLIC", "TZA: TANZANIA, UNITED REPUBLIC OF", "AUT: AUSTRIA", "FXX: FRANCE, METROPOLITAN", "SHN: ST. HELENA", "BMU: BERMUDA", "REU: REUNION", "CZE: CZECH REPUBLIC", "ROU: ROMANIA", "CIV: COTE D\'IVOIRE", "SYC: SEYCHELLES", "ISR: ISRAEL", "BHS: BAHAMAS", "SWE: SWEDEN", "FLK: FALKLAND ISLANDS (MALVINAS)", "TCD: CHAD", "BFA: BURKINA FASO", "ATA: ANTARCTICA", "URY: URUGUAY", "LAO: LAO PEOPLE\'S DEMOCRATIC REPUBLIC", "BTN: BHUTAN", "ARG: ARGENTINA", "DMA: DOMINICA", "IOT: BRITISH INDIAN OCEAN TERRITORY", "KWT: KUWAIT", "HKG: HONG KONG", "NAM: NAMIBIA", "SAU: SAUDI ARABIA", "TUR: TURKEY", "BLZ: BELIZE", "SDN: SUDAN", "MOZ: MOZAMBIQUE", "CHE: SWITZERLAND", "COD: CONGO, Democratic Republic of (was Zaire)", "ETH: ETHIOPIA", "NOR: NORWAY", "ATF: FRENCH SOUTHERN TERRITORIES", "MTQ: MARTINIQUE", "KGZ: KYRGYZSTAN", "BWA: BOTSWANA", "ZMB: ZAMBIA", "LBY: LIBYAN ARAB JAMAHIRIYA", "GAB: GABON", "NFK: NORFOLK ISLAND", "CCK: COCOS (KEELING) ISLANDS", "SEN: SENEGAL", "CYM: CAYMAN ISLANDS", "CPV: CAPE VERDE", "LBR: LIBERIA", "PHL: PHILIPPINES", "LBN: LEBANON", "BLR: BELARUS", "KOR: KOREA, REPUBLIC OF", "SLE: SIERRA LEONE", "CAF: CENTRAL AFRICAN REPUBLIC", "IRL: IRELAND", "KNA: SAINT KITTS AND NEVIS", "GEO: GEORGIA", "TGO: TOGO", "KAZ: KAZAKHSTAN", "USA: UNITED STATES", "RWA: RWANDA", "HND: HONDURAS", "MKD: MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF", "FIN: FINLAND", "MRT: MAURITANIA", "PYF: FRENCH POLYNESIA", "PSE: PALESTINIAN TERRITORY, Occupied", "YUG: YUGOSLAVIA", "NGA: NIGERIA", "MSR: MONTSERRAT", "ESP: SPAIN", "GRC: GREECE", "MYS: MALAYSIA", "LCA: SAINT LUCIA", "ZAF: SOUTH AFRICA", "BRN: BRUNEI DARUSSALAM", "MLT: MALTA", "CHN: CHINA", "YEM: YEMEN", "SOM: SOMALIA", "HTI: HAITI", "MUS: MAURITIUS", "MMR: MYANMAR", "RUS: RUSSIAN FEDERATION", "UZB: UZBEKISTAN", "AFG: AFGHANISTAN", "DJI: DJIBOUTI", "HRV: CROATIA (local name: Hrvatska)", "NIC: NICARAGUA", "CAN: CANADA", "PER: PERU", "EST: ESTONIA", "GIB: GIBRALTAR", "DNK: DENMARK", "FJI: FIJI", "ATG: ANTIGUA AND BARBUDA", "GBR: UNITED KINGDOM", "SUR: SURINAME", "KIR: KIRIBATI", "IRQ: IRAQ", "AND: ANDORRA", "UKR: UKRAINE", "VCT: SAINT VINCENT AND THE GRENADINES", "ITA: ITALY", "BDI: BURUNDI", "MAC: MACAU", "PRK: KOREA, DEMOCRATIC PEOPLE\'S REPUBLIC OF", "BGD: BANGLADESH", "GNB: GUINEA-BISSAU", "BEN: BENIN", "AIA: ANGUILLA", "BGR: BULGARIA", "TCA: TURKS AND CAICOS ISLANDS", "GHA: GHANA", "ECU: ECUADOR", "NLD: NETHERLANDS", "KHM: CAMBODIA", "TUV: TUVALU", "MDV: MALDIVES", "GRL: GREENLAND", "SPM: ST. PIERRE AND MIQUELON", "COM: COMOROS", "ISL: ICELAND", "PCN: PITCAIRN", "IDN: INDONESIA", "POL: POLAND", "ESH: WESTERN SAHARA", "HMD: HEARD AND MC DONALD ISLANDS", "BVT: BOUVET ISLAND", "GLP: GUADELOUPE", "TJK: TAJIKISTAN", "SMR: SAN MARINO", "PRT: PORTUGAL", "THA: THAILAND", "STP: SAO TOME AND PRINCIPE", "LTU: LITHUANIA", "SJM: SVALBARD AND JAN MAYEN ISLANDS", "SLV: EL SALVADOR", "OMN: OMAN", "BRB: BARBADOS", "WLF: WALLIS AND FUTUNA ISLANDS", "VAT: VATICAN CITY STATE (HOLY SEE)", "CXR: CHRISTMAS ISLAND", "KEN: KENYA", "GNQ: EQUATORIAL GUINEA", "GMB: GAMBIA", "MNG: MONGOLIA", "CUB: CUBA", "SVK: SLOVAKIA (Slovak Republic)", "MDA: MOLDOVA, REPUBLIC OF", "PAN: PANAMA", "FRA: FRANCE", "DZA: ALGERIA", "TLS: EAST TIMOR", "AGO: ANGOLA", "ANT: NETHERLANDS ANTILLES", "LIE: LIECHTENSTEIN", "MAR: MOROCCO", "GIN: GUINEA", "NER: NIGER", "JOR: JORDAN", "CMR: CAMEROON", "GRD: GRENADA", "PRY: PARAGUAY", "IND: INDIA", "SGP: SINGAPORE", "UMI: UNITED STATES MINOR OUTLYING ISLANDS", "IRN: IRAN (ISLAMIC REPUBLIC OF)", "LUX: LUXEMBOURG"};
    protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master) {
        if (null == master.getStreet1()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Street1"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkStreet1(parentLocator, handler, master, master.getStreet1());
        }
        if (null!= master.getStreet2()) {
            // If left exists
            if (null == master.getStreet2()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkStreet2(parentLocator, handler, master, master.getStreet2());
            }
        }
        if (null == master.getCity()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "City"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCity(parentLocator, handler, master, master.getCity());
        }
        if (null!= master.getCounty()) {
            // If left exists
            if (null == master.getCounty()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCounty(parentLocator, handler, master, master.getCounty());
            }
        }
        // Choice
        if (!(null!= master.getProvince())) {
            // If right does not exist, left must exist
            if (null!= master.getState()) {
                // If left exists
                if (null == master.getState()) {
                    // Optional field - nothing to report
                } else {
                    // Check value
                    checkState(parentLocator, handler, master, master.getState());
                }
            }
        }
        if (false) {
            // If left does not exist, right must exist
            if (null == master.getProvince()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkProvince(parentLocator, handler, master, master.getProvince());
            }
        }
        if (true) {
            // If left exists, right must not exist
            if (null!= master.getState()) {
                // If left exists
                if (null == master.getState()) {
                    // Optional field - nothing to report
                } else {
                    // Check value
                    checkState(parentLocator, handler, master, master.getState());
                }
            }
            // todo: check that right is absent. how?
        }
        if (null!= master.getZipPostalCode()) {
            // If left exists
            if (null == master.getZipPostalCode()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkZipPostalCode(parentLocator, handler, master, master.getZipPostalCode());
            }
        }
        if (null == master.getCountry()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Country"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCountry(parentLocator, handler, master, master.getCountry());
        }
    }

    public void checkStreet2(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 55) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 55);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Street2"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Street2"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkZipPostalCode(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 30) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 30);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "ZipPostalCode"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "ZipPostalCode"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkState(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet.contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "State"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "State"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCountry(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet0 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Country"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Country"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCity(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 35) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 35);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "City"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "City"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkStreet1(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 55) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 55);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Street1"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Street1"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkProvince(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 30) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 30);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Province"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Province"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCounty(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.system.globallibrary_v2.AddressDataType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 30) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 30);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "County"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "County"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(parentLocator, handler, ((gov.grants.apply.system.globallibrary_v2.AddressDataType) object));
    }

    public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(null, handler, ((gov.grants.apply.system.globallibrary_v2.AddressDataType) object));
    }

}
