//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.02.13 at 11:23:34 AM EST 
//


package gov.grants.apply.forms.nsf_applicationchecklist_v1.verification;

public class NSFApplicationChecklistTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
{

    protected java.lang.Object[] values = new java.lang.Object[] {"Yes", "No"};
    protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
    protected java.lang.Object[] values0 = new java.lang.Object[] {"Yes", "No"};
    protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));
    protected java.lang.Object[] values1 = new java.lang.Object[] {"Yes", "No"};
    protected java.util.Set valueSet1 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values1)));
    protected java.lang.Object[] values2 = new java.lang.Object[] {"Yes", "No"};
    protected java.util.Set valueSet2 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values2)));
    protected java.lang.Object[] values3 = new java.lang.Object[] {"Yes", "No"};
    protected java.util.Set valueSet3 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values3)));
    protected java.lang.Object[] values4 = new java.lang.Object[] {"Yes", "No"};
    protected java.util.Set valueSet4 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values4)));

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master) {
        if (null == master.getFormVersion()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "FormVersion"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkFormVersion(parentLocator, handler, master, master.getFormVersion());
        }
        if (null == master.getCoverSheet()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CoverSheet"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCoverSheet(parentLocator, handler, master, master.getCoverSheet());
        }
        if (null == master.getCheckRRSite()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRSite"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCheckRRSite(parentLocator, handler, master, master.getCheckRRSite());
        }
        if (null == master.getCheckRROtherInfo()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRROtherInfo"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCheckRROtherInfo(parentLocator, handler, master, master.getCheckRROtherInfo());
        }
        if (null == master.getCheckProjectSummary()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckProjectSummary"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCheckProjectSummary(parentLocator, handler, master, master.getCheckProjectSummary());
        }
        if (null == master.getProjectNarrative()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "ProjectNarrative"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkProjectNarrative(parentLocator, handler, master, master.getProjectNarrative());
        }
        if (null == master.getCheckBiblio()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckBiblio"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCheckBiblio(parentLocator, handler, master, master.getCheckBiblio());
        }
        if (null == master.getCheckFacilities()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckFacilities"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCheckFacilities(parentLocator, handler, master, master.getCheckFacilities());
        }
        if (null == master.getEquipment()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Equipment"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkEquipment(parentLocator, handler, master, master.getEquipment());
        }
        if (null == master.getRRSrProfile()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "RRSrProfile"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkRRSrProfile(parentLocator, handler, master, master.getRRSrProfile());
        }
        if (null == master.getCheckRRPersonalData()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRPersonalData"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkCheckRRPersonalData(parentLocator, handler, master, master.getCheckRRPersonalData());
        }
        if (null == master.getRRBudget()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "RRBudget"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkRRBudget(parentLocator, handler, master, master.getRRBudget());
        }
        if (null == master.getNSFCover()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "NSFCover"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkNSFCover(parentLocator, handler, master, master.getNSFCover());
        }
    }

    public void checkCheckProjectSummary(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet.contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckProjectSummary"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckProjectSummary"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkNSFCover(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType value) {
        if (value instanceof gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType) {
            gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType realValue = ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType) value);
            {
                // Check complex value
                gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.NSFCoverTypeVerifier verifier = new gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.NSFCoverTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "NSFCover"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "NSFCover"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkFormVersion(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 30) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 30);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "FormVersion"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "FormVersion"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCheckFacilities(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet0 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckFacilities"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckFacilities"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCheckRRSite(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet1 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet1);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRSite"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRSite"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkRRBudget(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType value) {
        if (value instanceof gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType) {
            gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType realValue = ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType) value);
            {
                // Check complex value
                gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.RRBudgetTypeVerifier verifier = new gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.RRBudgetTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "RRBudget"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "RRBudget"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCheckRRPersonalData(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet2 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet2);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRPersonalData"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRPersonalData"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCoverSheet(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType value) {
        if (value instanceof gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType) {
            gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType realValue = ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType) value);
            {
                // Check complex value
                gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.CoverSheetTypeVerifier verifier = new gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.CoverSheetTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CoverSheet"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CoverSheet"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkProjectNarrative(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType value) {
        if (value instanceof gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType) {
            gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType realValue = ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType) value);
            {
                // Check complex value
                gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.ProjectNarrativeTypeVerifier verifier = new gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.ProjectNarrativeTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "ProjectNarrative"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "ProjectNarrative"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCheckBiblio(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet3 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet3);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckBiblio"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckBiblio"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkEquipment(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType value) {
        if (value instanceof gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType) {
            gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType realValue = ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType) value);
            {
                // Check complex value
                gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.EquipmentTypeVerifier verifier = new gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.EquipmentTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Equipment"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Equipment"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCheckRROtherInfo(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet4 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet4);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRROtherInfo"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRROtherInfo"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkRRSrProfile(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType master, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType value) {
        if (value instanceof gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType) {
            gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType realValue = ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType) value);
            {
                // Check complex value
                gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.RRSrProfileTypeVerifier verifier = new gov.grants.apply.forms.nsf_applicationchecklist_v1.verification.NSFApplicationChecklistTypeVerifier.RRSrProfileTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "RRSrProfile"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "RRSrProfile"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(parentLocator, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType) object));
    }

    public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(null, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType) object));
    }

    public static class CoverSheetTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
    {

        protected java.lang.Object[] values = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
        protected java.lang.Object[] values0 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));
        protected java.lang.Object[] values1 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet1 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values1)));
        protected java.lang.Object[] values2 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet2 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values2)));
        protected java.lang.Object[] values3 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet3 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values3)));

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType master) {
            if (null == master.getCheckCoverSheet()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCoverSheet"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckCoverSheet(parentLocator, handler, master, master.getCheckCoverSheet());
            }
            if (null == master.getCheckRenewal()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRenewal"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckRenewal(parentLocator, handler, master, master.getCheckRenewal());
            }
            if (null == master.getCheckFullApp()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckFullApp"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckFullApp(parentLocator, handler, master, master.getCheckFullApp());
            }
            if (null == master.getCheckTypeApp()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckTypeApp"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckTypeApp(parentLocator, handler, master, master.getCheckTypeApp());
            }
            if (null == master.getCheckAppCert()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckAppCert"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckAppCert(parentLocator, handler, master, master.getCheckAppCert());
            }
        }

        public void checkCheckCoverSheet(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet.contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCoverSheet"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCoverSheet"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckFullApp(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet0 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckFullApp"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckFullApp"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckRenewal(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet1 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet1);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRenewal"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRenewal"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckTypeApp(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet2 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet2);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckTypeApp"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckTypeApp"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckAppCert(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet3 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet3);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckAppCert"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckAppCert"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(parentLocator, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType) object));
        }

        public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(null, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.CoverSheetType) object));
        }

    }

    public static class EquipmentTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
    {

        protected java.lang.Object[] values = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
        protected java.lang.Object[] values0 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));
        protected java.lang.Object[] values1 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet1 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values1)));

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType master) {
            if (null == master.getCheckEquipment()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckEquipment"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckEquipment(parentLocator, handler, master, master.getCheckEquipment());
            }
            if (null == master.getCheckSuppDoc()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckSuppDoc"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckSuppDoc(parentLocator, handler, master, master.getCheckSuppDoc());
            }
            if (null == master.getCheckAdditionalItems()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckAdditionalItems"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckAdditionalItems(parentLocator, handler, master, master.getCheckAdditionalItems());
            }
        }

        public void checkCheckAdditionalItems(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet.contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckAdditionalItems"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckAdditionalItems"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckSuppDoc(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet0 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckSuppDoc"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckSuppDoc"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckEquipment(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet1 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet1);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckEquipment"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckEquipment"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(parentLocator, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType) object));
        }

        public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(null, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.EquipmentType) object));
        }

    }

    public static class NSFCoverTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
    {

        protected java.lang.Object[] values = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
        protected java.lang.Object[] values0 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));
        protected java.lang.Object[] values1 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet1 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values1)));
        protected java.lang.Object[] values2 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet2 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values2)));
        protected java.lang.Object[] values3 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet3 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values3)));
        protected java.lang.Object[] values4 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet4 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values4)));
        protected java.lang.Object[] values5 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet5 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values5)));

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType master) {
            if (null == master.getCheckNSFCover()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFCover"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckNSFCover(parentLocator, handler, master, master.getCheckNSFCover());
            }
            if (null == master.getCheckNSFUnit()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFUnit"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckNSFUnit(parentLocator, handler, master, master.getCheckNSFUnit());
            }
            if (null == master.getCheckNSFOtherInfo()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFOtherInfo"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckNSFOtherInfo(parentLocator, handler, master, master.getCheckNSFOtherInfo());
            }
            if (null == master.getCheckNSFSFLLL()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFSFLLL"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckNSFSFLLL(parentLocator, handler, master, master.getCheckNSFSFLLL());
            }
            if (null == master.getCheckNSFDevAuth()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFDevAuth"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckNSFDevAuth(parentLocator, handler, master, master.getCheckNSFDevAuth());
            }
            if (null == master.getCheckNSFReg()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFReg"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckNSFReg(parentLocator, handler, master, master.getCheckNSFReg());
            }
            if (null == master.getCheckDoNotInclude()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckDoNotInclude"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckDoNotInclude(parentLocator, handler, master, master.getCheckDoNotInclude());
            }
        }

        public void checkCheckDoNotInclude(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet.contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckDoNotInclude"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckDoNotInclude"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckNSFSFLLL(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet0 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFSFLLL"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFSFLLL"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckNSFDevAuth(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet1 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet1);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFDevAuth"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFDevAuth"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckNSFOtherInfo(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet2 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet2);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFOtherInfo"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFOtherInfo"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckNSFCover(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet3 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet3);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFCover"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFCover"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckNSFUnit(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet4 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet4);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFUnit"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFUnit"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckNSFReg(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet5 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet5);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFReg"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckNSFReg"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(parentLocator, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType) object));
        }

        public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(null, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.NSFCoverType) object));
        }

    }

    public static class ProjectNarrativeTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
    {

        protected java.lang.Object[] values = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
        protected java.lang.Object[] values0 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));
        protected java.lang.Object[] values1 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet1 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values1)));
        protected java.lang.Object[] values2 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet2 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values2)));
        protected java.lang.Object[] values3 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet3 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values3)));

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType master) {
            if (null == master.getCheckProjectNarrative()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckProjectNarrative"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckProjectNarrative(parentLocator, handler, master, master.getCheckProjectNarrative());
            }
            if (null == master.getCheckMeritReview()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckMeritReview"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckMeritReview(parentLocator, handler, master, master.getCheckMeritReview());
            }
            if (null == master.getCheckPriorSupport()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckPriorSupport"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckPriorSupport(parentLocator, handler, master, master.getCheckPriorSupport());
            }
            if (null == master.getCheckHRInfo()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckHRInfo"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckHRInfo(parentLocator, handler, master, master.getCheckHRInfo());
            }
            if (null == master.getCheckURL()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckURL"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckURL(parentLocator, handler, master, master.getCheckURL());
            }
        }

        public void checkCheckMeritReview(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet.contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckMeritReview"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckMeritReview"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckURL(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet0 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckURL"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckURL"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckProjectNarrative(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet1 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet1);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckProjectNarrative"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckProjectNarrative"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckHRInfo(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet2 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet2);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckHRInfo"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckHRInfo"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckPriorSupport(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet3 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet3);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckPriorSupport"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckPriorSupport"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(parentLocator, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType) object));
        }

        public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(null, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.ProjectNarrativeType) object));
        }

    }

    public static class RRBudgetTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
    {

        protected java.lang.Object[] values = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
        protected java.lang.Object[] values0 = new java.lang.Object[] {"Yes", "No", "NotApplicable"};
        protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));
        protected java.lang.Object[] values1 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet1 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values1)));

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType master) {
            if (null == master.getCheckRRBudget()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRBudget"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckRRBudget(parentLocator, handler, master, master.getCheckRRBudget());
            }
            if (null == master.getCheckRRBudgetJustification()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRBudgetJustification"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckRRBudgetJustification(parentLocator, handler, master, master.getCheckRRBudgetJustification());
            }
            if (null == master.getCheckCostSharing()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCostSharing"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckCostSharing(parentLocator, handler, master, master.getCheckCostSharing());
            }
        }

        public void checkCheckCostSharing(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet.contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCostSharing"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCostSharing"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckRRBudgetJustification(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet0 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRBudgetJustification"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRBudgetJustification"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckRRBudget(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet1 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet1);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRBudget"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRBudget"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(parentLocator, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType) object));
        }

        public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(null, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRBudgetType) object));
        }

    }

    public static class RRSrProfileTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
    {

        protected java.lang.Object[] values = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
        protected java.lang.Object[] values0 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));
        protected java.lang.Object[] values1 = new java.lang.Object[] {"Yes", "No"};
        protected java.util.Set valueSet1 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values1)));

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType master) {
            if (null == master.getCheckRRSrProfile()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRSrProfile"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckRRSrProfile(parentLocator, handler, master, master.getCheckRRSrProfile());
            }
            if (null == master.getCheckBioSketch()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckBioSketch"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckBioSketch(parentLocator, handler, master, master.getCheckBioSketch());
            }
            if (null == master.getCheckCurrentPendingSupport()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCurrentPendingSupport"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkCheckCurrentPendingSupport(parentLocator, handler, master, master.getCheckCurrentPendingSupport());
            }
        }

        public void checkCheckCurrentPendingSupport(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet.contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCurrentPendingSupport"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckCurrentPendingSupport"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckRRSrProfile(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet0 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRSrProfile"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckRRSrProfile"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCheckBioSketch(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (valueSet1 .contains(realValue)) {
                        // Value is found in the enumeration, it is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet1);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckBioSketch"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CheckBioSketch"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(parentLocator, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType) object));
        }

        public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(null, handler, ((gov.grants.apply.forms.nsf_applicationchecklist_v1.NSFApplicationChecklistType.RRSrProfileType) object));
        }

    }

}
