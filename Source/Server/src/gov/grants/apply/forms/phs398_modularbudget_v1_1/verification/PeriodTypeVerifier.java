//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.3-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.05.19 at 04:23:48 EDT 
//


package gov.grants.apply.forms.phs398_modularbudget_v1_1.verification;

public class PeriodTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
{


    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType master) {
        if (null!= master.getBudgetPeriodStartDate()) {
            // If left exists
            if (null == master.getBudgetPeriodStartDate()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkBudgetPeriodStartDate(parentLocator, handler, master, master.getBudgetPeriodStartDate());
            }
        }
        if (null!= master.getBudgetPeriodEndDate()) {
            // If left exists
            if (null == master.getBudgetPeriodEndDate()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkBudgetPeriodEndDate(parentLocator, handler, master, master.getBudgetPeriodEndDate());
            }
        }
        // No check for primitive values
        checkBudgetPeriod(parentLocator, handler, master, new java.lang.Integer(master.getBudgetPeriod()));
        if (null == master.getDirectCost()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DirectCost"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkDirectCost(parentLocator, handler, master, master.getDirectCost());
        }
        if (null!= master.getIndirectCost()) {
            // If left exists
            if (null == master.getIndirectCost()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkIndirectCost(parentLocator, handler, master, master.getIndirectCost());
            }
        }
        if (null == master.getTotalFundsRequestedDirectIndirectCosts()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "TotalFundsRequestedDirectIndirectCosts"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkTotalFundsRequestedDirectIndirectCosts(parentLocator, handler, master, master.getTotalFundsRequestedDirectIndirectCosts());
        }
    }

    public void checkIndirectCost(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType master, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType value) {
        if (value instanceof gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType) {
            gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType realValue = ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType) value);
            {
                // Check complex value
                gov.grants.apply.forms.phs398_modularbudget_v1_1.verification.PeriodTypeVerifier.IndirectCostTypeVerifier verifier = new gov.grants.apply.forms.phs398_modularbudget_v1_1.verification.PeriodTypeVerifier.IndirectCostTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCost"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCost"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkDirectCost(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType master, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType value) {
        if (value instanceof gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType) {
            gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType realValue = ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType) value);
            {
                // Check complex value
                gov.grants.apply.forms.phs398_modularbudget_v1_1.verification.PeriodTypeVerifier.DirectCostTypeVerifier verifier = new gov.grants.apply.forms.phs398_modularbudget_v1_1.verification.PeriodTypeVerifier.DirectCostTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DirectCost"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DirectCost"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkBudgetPeriodEndDate(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType master, java.util.Calendar value) {
        if (value instanceof java.util.Calendar) {
            java.util.Calendar realValue = ((java.util.Calendar) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.DateType datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetPeriodEndDate"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetPeriodEndDate"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkBudgetPeriod(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType master, java.lang.Integer value) {
        if (value instanceof java.lang.Integer) {
            java.lang.Integer realValue = ((java.lang.Integer) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((java.lang.Comparable) realValue).compareTo(new java.lang.Integer(0))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.lang.Integer(0));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.lang.Integer(5))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.lang.Integer(5));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetPeriod"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetPeriod"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkBudgetPeriodStartDate(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType master, java.util.Calendar value) {
        if (value instanceof java.util.Calendar) {
            java.util.Calendar realValue = ((java.util.Calendar) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.DateType datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetPeriodStartDate"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetPeriodStartDate"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkTotalFundsRequestedDirectIndirectCosts(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "TotalFundsRequestedDirectIndirectCosts"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "TotalFundsRequestedDirectIndirectCosts"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(parentLocator, handler, ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType) object));
    }

    public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(null, handler, ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType) object));
    }

    public static class DirectCostTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
    {


        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType master) {
            if (null == master.getDirectCostLessConsortiumFandA()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DirectCostLessConsortiumFandA"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkDirectCostLessConsortiumFandA(parentLocator, handler, master, master.getDirectCostLessConsortiumFandA());
            }
            if (null!= master.getConsortiumFandA()) {
                // If left exists
                if (null == master.getConsortiumFandA()) {
                    // Optional field - nothing to report
                } else {
                    // Check value
                    checkConsortiumFandA(parentLocator, handler, master, master.getConsortiumFandA());
                }
            }
            if (null == master.getTotalFundsRequestedDirectCosts()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "TotalFundsRequestedDirectCosts"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check value
                checkTotalFundsRequestedDirectCosts(parentLocator, handler, master, master.getTotalFundsRequestedDirectCosts());
            }
        }

        public void checkConsortiumFandA(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType master, java.math.BigDecimal value) {
            if (value instanceof java.math.BigDecimal) {
                java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    // todo: Check lexical constraints. How???
                    // todo: Check lexical constraints. How???
                    if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                        // Range is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                    }
                    if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999999999999.99"))<= 0) {
                        // Range is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999999999999.99"));
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "ConsortiumFandA"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "ConsortiumFandA"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkTotalFundsRequestedDirectCosts(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType master, java.math.BigDecimal value) {
            if (value instanceof java.math.BigDecimal) {
                java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    // todo: Check lexical constraints. How???
                    // todo: Check lexical constraints. How???
                    if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                        // Range is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                    }
                    if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                        // Range is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "TotalFundsRequestedDirectCosts"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "TotalFundsRequestedDirectCosts"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkDirectCostLessConsortiumFandA(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType master, java.math.BigDecimal value) {
            if (value instanceof java.math.BigDecimal) {
                java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    // todo: Check lexical constraints. How???
                    // todo: Check lexical constraints. How???
                    if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                        // Range is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                    }
                    if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999999999999.99"))<= 0) {
                        // Range is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999999999999.99"));
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DirectCostLessConsortiumFandA"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DirectCostLessConsortiumFandA"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(parentLocator, handler, ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType) object));
        }

        public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(null, handler, ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.DirectCostType) object));
        }

    }

    public static class IndirectCostTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
    {


        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType master) {
            if (null == master.getIndirectCostItems()) {
                // Report missing object
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostItems"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
            } else {
                // Check count
                if (master.getIndirectCostItems().size()< 0) {
                    // Report minimum of occurences violated
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostItems"), new de.fzi.dbs.verification.event.structure.TooFewElementsProblem(master.getIndirectCostItems().size(), 0)));
                }
                if (master.getIndirectCostItems().size()> 4) {
                    // Report maximum of occurences violated
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostItems"), new de.fzi.dbs.verification.event.structure.TooManyElementsProblem(master.getIndirectCostItems().size(), 4)));
                }
                // Check value
                checkIndirectCostItems(parentLocator, handler, master, master.getIndirectCostItems());
            }
            if (null!= master.getCognizantFederalAgency()) {
                // If left exists
                if (null == master.getCognizantFederalAgency()) {
                    // Optional field - nothing to report
                } else {
                    // Check value
                    checkCognizantFederalAgency(parentLocator, handler, master, master.getCognizantFederalAgency());
                }
            }
            if (null!= master.getIndirectCostAgreementDate()) {
                // If left exists
                if (null == master.getIndirectCostAgreementDate()) {
                    // Optional field - nothing to report
                } else {
                    // Check value
                    checkIndirectCostAgreementDate(parentLocator, handler, master, master.getIndirectCostAgreementDate());
                }
            }
            if (null!= master.getTotalFundsRequestedIndirectCost()) {
                // If left exists
                if (null == master.getTotalFundsRequestedIndirectCost()) {
                    // Optional field - nothing to report
                } else {
                    // Check value
                    checkTotalFundsRequestedIndirectCost(parentLocator, handler, master, master.getTotalFundsRequestedIndirectCost());
                }
            }
        }

        public void checkTotalFundsRequestedIndirectCost(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType master, java.math.BigDecimal value) {
            if (value instanceof java.math.BigDecimal) {
                java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    // todo: Check lexical constraints. How???
                    // todo: Check lexical constraints. How???
                    if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                        // Range is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                    }
                    if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                        // Range is valid
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "TotalFundsRequestedIndirectCost"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "TotalFundsRequestedIndirectCost"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkCognizantFederalAgency(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType master, java.lang.String value) {
            if (value instanceof java.lang.String) {
                java.lang.String realValue = ((java.lang.String) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (((null == realValue)? 0 :realValue.length())>= 0) {
                        // Value length is correct
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 0);
                    }
                    if (((null == realValue)? 0 :realValue.length())<= 180) {
                        // Value length is correct
                    } else {
                        problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 180);
                    }
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CognizantFederalAgency"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CognizantFederalAgency"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkIndirectCostItems(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType master, java.util.List values) {
            for (int index = 0; (index<values.size()); index ++) {
                java.lang.Object item = values.get(index);
                checkIndirectCostItems(parentLocator, handler, master, index, item);
            }
        }

        public void checkIndirectCostItems(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType master, int index, java.lang.Object value) {
            if (value instanceof gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType) {
                gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType realValue = ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType) value);
                {
                    // Check complex value
                    gov.grants.apply.forms.phs398_modularbudget_v1_1.verification.PeriodTypeVerifier.IndirectCostTypeVerifier.IndirectCostItemsTypeVerifier verifier = new gov.grants.apply.forms.phs398_modularbudget_v1_1.verification.PeriodTypeVerifier.IndirectCostTypeVerifier.IndirectCostItemsTypeVerifier();
                    verifier.check(new de.fzi.dbs.verification.event.EntryLocator(parentLocator, master, "IndirectCostItems", index), handler, realValue);
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.EntryLocator(parentLocator, master, "IndirectCostItems", index), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void checkIndirectCostAgreementDate(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType master, java.util.Calendar value) {
            if (value instanceof java.util.Calendar) {
                java.util.Calendar realValue = ((java.util.Calendar) value);
                // Check primitive value
                {
                    // Perform the check
                    // Checking class com.sun.msv.datatype.xsd.DateType datatype
                    de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                    if (null!= problem) {
                        // Handle event
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostAgreementDate"), problem));
                    }
                }
            } else {
                if (null == value) {
                } else {
                    // Report wrong class
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostAgreementDate"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                }
            }
        }

        public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(parentLocator, handler, ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType) object));
        }

        public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
            check(null, handler, ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType) object));
        }

        public static class IndirectCostItemsTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
        {


            public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType master) {
                if (null!= master.getIndirectCostTypeDescription()) {
                    // If left exists
                    if (null == master.getIndirectCostTypeDescription()) {
                        // Optional field - nothing to report
                    } else {
                        // Check value
                        checkIndirectCostTypeDescription(parentLocator, handler, master, master.getIndirectCostTypeDescription());
                    }
                }
                if (null!= master.getIndirectCostRate()) {
                    // If left exists
                    if (null == master.getIndirectCostRate()) {
                        // Optional field - nothing to report
                    } else {
                        // Check value
                        checkIndirectCostRate(parentLocator, handler, master, master.getIndirectCostRate());
                    }
                }
                if (null!= master.getIndirectCostBase()) {
                    // If left exists
                    if (null == master.getIndirectCostBase()) {
                        // Optional field - nothing to report
                    } else {
                        // Check value
                        checkIndirectCostBase(parentLocator, handler, master, master.getIndirectCostBase());
                    }
                }
                if (null!= master.getIndirectCostFundsRequested()) {
                    // If left exists
                    if (null == master.getIndirectCostFundsRequested()) {
                        // Optional field - nothing to report
                    } else {
                        // Check value
                        checkIndirectCostFundsRequested(parentLocator, handler, master, master.getIndirectCostFundsRequested());
                    }
                }
            }

            public void checkIndirectCostTypeDescription(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType master, java.lang.String value) {
                if (value instanceof java.lang.String) {
                    java.lang.String realValue = ((java.lang.String) value);
                    // Check primitive value
                    {
                        // Perform the check
                        // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                        de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                        if (((null == realValue)? 0 :realValue.length())>= 0) {
                            // Value length is correct
                        } else {
                            problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 0);
                        }
                        if (((null == realValue)? 0 :realValue.length())<= 64) {
                            // Value length is correct
                        } else {
                            problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 64);
                        }
                        if (null!= problem) {
                            // Handle event
                            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostTypeDescription"), problem));
                        }
                    }
                } else {
                    if (null == value) {
                    } else {
                        // Report wrong class
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostTypeDescription"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                    }
                }
            }

            public void checkIndirectCostRate(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType master, java.math.BigDecimal value) {
                if (value instanceof java.math.BigDecimal) {
                    java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
                    // Check primitive value
                    {
                        // Perform the check
                        // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                        de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                        // todo: Check lexical constraints. How???
                        // todo: Check lexical constraints. How???
                        if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                            // Range is valid
                        } else {
                            problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                        }
                        if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999.99"))<= 0) {
                            // Range is valid
                        } else {
                            problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999.99"));
                        }
                        if (null!= problem) {
                            // Handle event
                            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostRate"), problem));
                        }
                    }
                } else {
                    if (null == value) {
                    } else {
                        // Report wrong class
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostRate"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                    }
                }
            }

            public void checkIndirectCostBase(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType master, java.math.BigDecimal value) {
                if (value instanceof java.math.BigDecimal) {
                    java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
                    // Check primitive value
                    {
                        // Perform the check
                        // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                        de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                        // todo: Check lexical constraints. How???
                        // todo: Check lexical constraints. How???
                        if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                            // Range is valid
                        } else {
                            problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                        }
                        if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999999999999.99"))<= 0) {
                            // Range is valid
                        } else {
                            problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999999999999.99"));
                        }
                        if (null!= problem) {
                            // Handle event
                            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostBase"), problem));
                        }
                    }
                } else {
                    if (null == value) {
                    } else {
                        // Report wrong class
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostBase"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                    }
                }
            }

            public void checkIndirectCostFundsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType master, java.math.BigDecimal value) {
                if (value instanceof java.math.BigDecimal) {
                    java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
                    // Check primitive value
                    {
                        // Perform the check
                        // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                        de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                        // todo: Check lexical constraints. How???
                        // todo: Check lexical constraints. How???
                        if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                            // Range is valid
                        } else {
                            problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                        }
                        if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999999999999.99"))<= 0) {
                            // Range is valid
                        } else {
                            problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999999999999.99"));
                        }
                        if (null!= problem) {
                            // Handle event
                            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostFundsRequested"), problem));
                        }
                    }
                } else {
                    if (null == value) {
                    } else {
                        // Report wrong class
                        handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "IndirectCostFundsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
                    }
                }
            }

            public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
                check(parentLocator, handler, ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType) object));
            }

            public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
                check(null, handler, ((gov.grants.apply.forms.phs398_modularbudget_v1_1.PeriodType.IndirectCostType.IndirectCostItemsType) object));
            }

        }

    }

}
