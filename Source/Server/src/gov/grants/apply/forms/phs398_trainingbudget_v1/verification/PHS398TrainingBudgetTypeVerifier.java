//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.3-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.11.04 at 04:16:35 EST 
//


package gov.grants.apply.forms.phs398_trainingbudget_v1.verification;

public class PHS398TrainingBudgetTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
{

    protected java.lang.Object[] values = new java.lang.Object[] {"Project", "Subaward/Consortium"};
    protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master) {
        if (null == master.getFormVersion()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "FormVersion"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkFormVersion(parentLocator, handler, master, master.getFormVersion());
        }
        if (null == master.getDUNSNumber()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DUNSNumber"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkDUNSNumber(parentLocator, handler, master, master.getDUNSNumber());
        }
        if (null == master.getBudgetType()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetType"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkBudgetType(parentLocator, handler, master, master.getBudgetType());
        }
        if (null!= master.getOrganizationName()) {
            // If left exists
            if (null == master.getOrganizationName()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkOrganizationName(parentLocator, handler, master, master.getOrganizationName());
            }
        }
        if (null == master.getBudgetYear()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetYear"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check count
            if (master.getBudgetYear().size()< 0) {
                // Report minimum of occurences violated
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetYear"), new de.fzi.dbs.verification.event.structure.TooFewElementsProblem(master.getBudgetYear().size(), 0)));
            }
            if (master.getBudgetYear().size()> 5) {
                // Report maximum of occurences violated
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetYear"), new de.fzi.dbs.verification.event.structure.TooManyElementsProblem(master.getBudgetYear().size(), 5)));
            }
            // Check value
            checkBudgetYear(parentLocator, handler, master, master.getBudgetYear());
        }
        if (null!= master.getBudgetJustification()) {
            // If left exists
            if (null == master.getBudgetJustification()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkBudgetJustification(parentLocator, handler, master, master.getBudgetJustification());
            }
        }
        if (null!= master.getCumulativeUndergraduateStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativeUndergraduateStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeUndergraduateStipendsRequested(parentLocator, handler, master, master.getCumulativeUndergraduateStipendsRequested());
            }
        }
        if (null!= master.getCumulativeUndergraduateTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativeUndergraduateTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeUndergraduateTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativeUndergraduateTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativePredocSingleDegreeStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativePredocSingleDegreeStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePredocSingleDegreeStipendsRequested(parentLocator, handler, master, master.getCumulativePredocSingleDegreeStipendsRequested());
            }
        }
        if (null!= master.getCumulativePredocSingleDegreeTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativePredocSingleDegreeTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePredocSingleDegreeTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativePredocSingleDegreeTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativePredocDualDegreeStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativePredocDualDegreeStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePredocDualDegreeStipendsRequested(parentLocator, handler, master, master.getCumulativePredocDualDegreeStipendsRequested());
            }
        }
        if (null!= master.getCumulativePredocDualDegreeTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativePredocDualDegreeTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePredocDualDegreeTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativePredocDualDegreeTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativePredocTotalStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativePredocTotalStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePredocTotalStipendsRequested(parentLocator, handler, master, master.getCumulativePredocTotalStipendsRequested());
            }
        }
        if (null!= master.getCumulativePredocTotalTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativePredocTotalTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePredocTotalTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativePredocTotalTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativePostdocNonDegreeStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativePostdocNonDegreeStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePostdocNonDegreeStipendsRequested(parentLocator, handler, master, master.getCumulativePostdocNonDegreeStipendsRequested());
            }
        }
        if (null!= master.getCumulativePostdocNonDegreeTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativePostdocNonDegreeTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePostdocNonDegreeTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativePostdocNonDegreeTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativePostdocDegreeStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativePostdocDegreeStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePostdocDegreeStipendsRequested(parentLocator, handler, master, master.getCumulativePostdocDegreeStipendsRequested());
            }
        }
        if (null!= master.getCumulativePostdocDegreeTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativePostdocDegreeTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePostdocDegreeTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativePostdocDegreeTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativePostdocTotalStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativePostdocTotalStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePostdocTotalStipendsRequested(parentLocator, handler, master, master.getCumulativePostdocTotalStipendsRequested());
            }
        }
        if (null!= master.getCumulativePostdocTotalTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativePostdocTotalTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativePostdocTotalTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativePostdocTotalTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativeOtherStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativeOtherStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeOtherStipendsRequested(parentLocator, handler, master, master.getCumulativeOtherStipendsRequested());
            }
        }
        if (null!= master.getCumulativeOtherTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativeOtherTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeOtherTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativeOtherTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativeTotalStipendsRequested()) {
            // If left exists
            if (null == master.getCumulativeTotalStipendsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTotalStipendsRequested(parentLocator, handler, master, master.getCumulativeTotalStipendsRequested());
            }
        }
        if (null!= master.getCumulativeTuitionAndFeesRequested()) {
            // If left exists
            if (null == master.getCumulativeTuitionAndFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTuitionAndFeesRequested(parentLocator, handler, master, master.getCumulativeTuitionAndFeesRequested());
            }
        }
        if (null!= master.getCumulativeTotalStipendsAndTuitionFeesRequested()) {
            // If left exists
            if (null == master.getCumulativeTotalStipendsAndTuitionFeesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTotalStipendsAndTuitionFeesRequested(parentLocator, handler, master, master.getCumulativeTotalStipendsAndTuitionFeesRequested());
            }
        }
        if (null!= master.getCumulativeTraineeTravelRequested()) {
            // If left exists
            if (null == master.getCumulativeTraineeTravelRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTraineeTravelRequested(parentLocator, handler, master, master.getCumulativeTraineeTravelRequested());
            }
        }
        if (null!= master.getCumulativeTrainingRelatedExpensesRequested()) {
            // If left exists
            if (null == master.getCumulativeTrainingRelatedExpensesRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTrainingRelatedExpensesRequested(parentLocator, handler, master, master.getCumulativeTrainingRelatedExpensesRequested());
            }
        }
        if (null!= master.getCumulativeResearchDirectCostsRequested()) {
            // If left exists
            if (null == master.getCumulativeResearchDirectCostsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeResearchDirectCostsRequested(parentLocator, handler, master, master.getCumulativeResearchDirectCostsRequested());
            }
        }
        if (null!= master.getCumulativeConsortiumTrainingCostsRequested()) {
            // If left exists
            if (null == master.getCumulativeConsortiumTrainingCostsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeConsortiumTrainingCostsRequested(parentLocator, handler, master, master.getCumulativeConsortiumTrainingCostsRequested());
            }
        }
        if (null!= master.getCumulativeTotalOtherDirectCostsRequested()) {
            // If left exists
            if (null == master.getCumulativeTotalOtherDirectCostsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTotalOtherDirectCostsRequested(parentLocator, handler, master, master.getCumulativeTotalOtherDirectCostsRequested());
            }
        }
        if (null!= master.getCumulativeTotalDirectCostsRequested()) {
            // If left exists
            if (null == master.getCumulativeTotalDirectCostsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTotalDirectCostsRequested(parentLocator, handler, master, master.getCumulativeTotalDirectCostsRequested());
            }
        }
        if (null!= master.getCumulativeTotalIndirectCostsRequested()) {
            // If left exists
            if (null == master.getCumulativeTotalIndirectCostsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTotalIndirectCostsRequested(parentLocator, handler, master, master.getCumulativeTotalIndirectCostsRequested());
            }
        }
        if (null!= master.getCumulativeTotalDirectAndIndirectCostsRequested()) {
            // If left exists
            if (null == master.getCumulativeTotalDirectAndIndirectCostsRequested()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCumulativeTotalDirectAndIndirectCostsRequested(parentLocator, handler, master, master.getCumulativeTotalDirectAndIndirectCostsRequested());
            }
        }
    }

    public void checkCumulativeTotalDirectCostsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalDirectCostsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalDirectCostsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeTotalOtherDirectCostsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalOtherDirectCostsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalOtherDirectCostsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePredocDualDegreeStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocDualDegreeStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocDualDegreeStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePredocTotalTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocTotalTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocTotalTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkFormVersion(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 30) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 30);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "FormVersion"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "FormVersion"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeConsortiumTrainingCostsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeConsortiumTrainingCostsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeConsortiumTrainingCostsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePredocSingleDegreeTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocSingleDegreeTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocSingleDegreeTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePredocSingleDegreeStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocSingleDegreeStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocSingleDegreeStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeOtherTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeOtherTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeOtherTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePostdocNonDegreeTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocNonDegreeTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocNonDegreeTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeTraineeTravelRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTraineeTravelRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTraineeTravelRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeTotalIndirectCostsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalIndirectCostsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalIndirectCostsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkBudgetJustification(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, gov.grants.apply.system.attachments_v1.AttachedFileDataType value) {
        if (value instanceof gov.grants.apply.system.attachments_v1.AttachedFileDataType) {
            gov.grants.apply.system.attachments_v1.AttachedFileDataType realValue = ((gov.grants.apply.system.attachments_v1.AttachedFileDataType) value);
            {
                // Check complex value
                gov.grants.apply.system.attachments_v1.verification.AttachedFileDataTypeVerifier verifier = new gov.grants.apply.system.attachments_v1.verification.AttachedFileDataTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetJustification"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetJustification"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkBudgetType(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet.contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetType"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "BudgetType"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeTrainingRelatedExpensesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTrainingRelatedExpensesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTrainingRelatedExpensesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePostdocTotalTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocTotalTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocTotalTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePostdocTotalStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocTotalStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocTotalStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeTotalStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePostdocNonDegreeStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocNonDegreeStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocNonDegreeStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePredocTotalStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocTotalStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocTotalStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeResearchDirectCostsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeResearchDirectCostsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeResearchDirectCostsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkBudgetYear(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.util.List values) {
        for (int index = 0; (index<values.size()); index ++) {
            java.lang.Object item = values.get(index);
            checkBudgetYear(parentLocator, handler, master, index, item);
        }
    }

    public void checkBudgetYear(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, int index, java.lang.Object value) {
        if (value instanceof gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetYearDataType) {
            gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetYearDataType realValue = ((gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetYearDataType) value);
            {
                // Check complex value
                gov.grants.apply.forms.phs398_trainingbudget_v1.verification.PHS398TrainingBudgetYearDataTypeVerifier verifier = new gov.grants.apply.forms.phs398_trainingbudget_v1.verification.PHS398TrainingBudgetYearDataTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.EntryLocator(parentLocator, master, "BudgetYear", index), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.EntryLocator(parentLocator, master, "BudgetYear", index), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePredocDualDegreeTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocDualDegreeTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePredocDualDegreeTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeUndergraduateStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeUndergraduateStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeUndergraduateStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeUndergraduateTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeUndergraduateTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeUndergraduateTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePostdocDegreeTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocDegreeTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocDegreeTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeTotalStipendsAndTuitionFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalStipendsAndTuitionFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalStipendsAndTuitionFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkDUNSNumber(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 9) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 9);
                }
                if (((null == realValue)? 0 :realValue.length())<= 13) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 13);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DUNSNumber"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DUNSNumber"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeTotalDirectAndIndirectCostsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalDirectAndIndirectCostsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTotalDirectAndIndirectCostsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeTuitionAndFeesRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTuitionAndFeesRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeTuitionAndFeesRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativePostdocDegreeStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocDegreeStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativePostdocDegreeStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCumulativeOtherStipendsRequested(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.math.BigDecimal value) {
        if (value instanceof java.math.BigDecimal) {
            java.math.BigDecimal realValue = ((java.math.BigDecimal) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxInclusiveFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                // todo: Check lexical constraints. How???
                // todo: Check lexical constraints. How???
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("0"))>= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.LessProblem(realValue, new java.math.BigDecimal("0"));
                }
                if (((java.lang.Comparable) realValue).compareTo(new java.math.BigDecimal("9999999999999.99"))<= 0) {
                    // Range is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.GreaterProblem(realValue, new java.math.BigDecimal("9999999999999.99"));
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeOtherStipendsRequested"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "CumulativeOtherStipendsRequested"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkOrganizationName(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.MaxLengthFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (((null == realValue)? 0 :realValue.length())>= 1) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooShortProblem(realValue, ((null == realValue)? 0 :realValue.length()), 1);
                }
                if (((null == realValue)? 0 :realValue.length())<= 60) {
                    // Value length is correct
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.TooLongProblem(realValue, ((null == realValue)? 0 :realValue.length()), 60);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "OrganizationName"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "OrganizationName"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(parentLocator, handler, ((gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType) object));
    }

    public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(null, handler, ((gov.grants.apply.forms.phs398_trainingbudget_v1.PHS398TrainingBudgetType) object));
    }

}
