//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.02.13 at 11:23:34 AM EST 
//


package gov.grants.apply.forms.rr_personaldata_v1.verification;

public class DirectorTypeVerifier implements de.fzi.dbs.verification.ObjectVerifier
{

    protected java.lang.Object[] values = new java.lang.Object[] {"Do Not Wish to Provide", "Black or African American", "White", "Native Hawaiian or Other Pacific Islander", "Asian", "American Indian or Alaska Native"};
    protected java.util.Set valueSet = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values)));
    protected java.lang.Object[] values0 = new java.lang.Object[] {"Do Not Wish to Provide", "Male", "Female"};
    protected java.util.Set valueSet0 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values0)));
    protected java.lang.Object[] values1 = new java.lang.Object[] {"Do Not Wish to Provide", "None", "Mobility/Orthopedic Impairment", "Visual", "Hearing", "Other"};
    protected java.util.Set valueSet1 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values1)));
    protected java.lang.Object[] values2 = new java.lang.Object[] {"Do Not Wish to Provide", "US Citizen", "Other non-US Citizen", "Permanent Resident"};
    protected java.util.Set valueSet2 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values2)));
    protected java.lang.Object[] values3 = new java.lang.Object[] {"Not Hispanic or Latino", "Do Not Wish To Provide", "Hispanic or Latino"};
    protected java.util.Set valueSet3 = java.util.Collections.unmodifiableSet(new java.util.HashSet(java.util.Arrays.asList(values3)));

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master) {
        if (null == master.getName()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Name"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check value
            checkName(parentLocator, handler, master, master.getName());
        }
        if (null!= master.getDateOfBirth()) {
            // If left exists
            if (null == master.getDateOfBirth()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkDateOfBirth(parentLocator, handler, master, master.getDateOfBirth());
            }
        }
        if (null!= master.getSocialSecurityNumber()) {
            // If left exists
            if (null == master.getSocialSecurityNumber()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkSocialSecurityNumber(parentLocator, handler, master, master.getSocialSecurityNumber());
            }
        }
        if (null!= master.getGender()) {
            // If left exists
            if (null == master.getGender()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkGender(parentLocator, handler, master, master.getGender());
            }
        }
        if (null == master.getRace()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Race"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check count
            if (master.getRace().size()< 0) {
                // Report minimum of occurences violated
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Race"), new de.fzi.dbs.verification.event.structure.TooFewElementsProblem(master.getRace().size(), 0)));
            }
            if (master.getRace().size()> 5) {
                // Report maximum of occurences violated
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Race"), new de.fzi.dbs.verification.event.structure.TooManyElementsProblem(master.getRace().size(), 5)));
            }
            // Check value
            checkRace(parentLocator, handler, master, master.getRace());
        }
        if (null!= master.getEthnicity()) {
            // If left exists
            if (null == master.getEthnicity()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkEthnicity(parentLocator, handler, master, master.getEthnicity());
            }
        }
        if (null == master.getDisabilityStatus()) {
            // Report missing object
            handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DisabilityStatus"), new de.fzi.dbs.verification.event.structure.EmptyFieldProblem()));
        } else {
            // Check count
            if (master.getDisabilityStatus().size()< 0) {
                // Report minimum of occurences violated
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DisabilityStatus"), new de.fzi.dbs.verification.event.structure.TooFewElementsProblem(master.getDisabilityStatus().size(), 0)));
            }
            if (master.getDisabilityStatus().size()> 4) {
                // Report maximum of occurences violated
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DisabilityStatus"), new de.fzi.dbs.verification.event.structure.TooManyElementsProblem(master.getDisabilityStatus().size(), 4)));
            }
            // Check value
            checkDisabilityStatus(parentLocator, handler, master, master.getDisabilityStatus());
        }
        if (null!= master.getCitizenship()) {
            // If left exists
            if (null == master.getCitizenship()) {
                // Optional field - nothing to report
            } else {
                // Check value
                checkCitizenship(parentLocator, handler, master, master.getCitizenship());
            }
        }
    }

    public void checkRace(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, java.util.List values) {
        for (int index = 0; (index<values.size()); index ++) {
            java.lang.Object item = values.get(index);
            checkRace(parentLocator, handler, master, index, item);
        }
    }

    public void checkRace(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, int index, java.lang.Object value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet.contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.EntryLocator(parentLocator, master, "Race", index), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.EntryLocator(parentLocator, master, "Race", index), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkDateOfBirth(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, java.util.Calendar value) {
        if (value instanceof java.util.Calendar) {
            java.util.Calendar realValue = ((java.util.Calendar) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.DateType datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DateOfBirth"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "DateOfBirth"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkGender(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet0 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet0);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Gender"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Gender"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkDisabilityStatus(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, java.util.List values) {
        for (int index = 0; (index<values.size()); index ++) {
            java.lang.Object item = values.get(index);
            checkDisabilityStatus(parentLocator, handler, master, index, item);
        }
    }

    public void checkDisabilityStatus(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, int index, java.lang.Object value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet1 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet1);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.EntryLocator(parentLocator, master, "DisabilityStatus", index), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.EntryLocator(parentLocator, master, "DisabilityStatus", index), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkCitizenship(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet2 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet2);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Citizenship"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Citizenship"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkEthnicity(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.EnumerationFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (valueSet3 .contains(realValue)) {
                    // Value is found in the enumeration, it is valid
                } else {
                    problem = new de.fzi.dbs.verification.event.datatype.EnumerationProblem(realValue, valueSet3);
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Ethnicity"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Ethnicity"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkName(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, gov.grants.apply.system.globallibrary_v1.HumanNameDataType value) {
        if (value instanceof gov.grants.apply.system.globallibrary_v1.HumanNameDataType) {
            gov.grants.apply.system.globallibrary_v1.HumanNameDataType realValue = ((gov.grants.apply.system.globallibrary_v1.HumanNameDataType) value);
            {
                // Check complex value
                gov.grants.apply.system.globallibrary_v1.verification.HumanNameDataTypeVerifier verifier = new gov.grants.apply.system.globallibrary_v1.verification.HumanNameDataTypeVerifier();
                verifier.check(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Name"), handler, realValue);
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "Name"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void checkSocialSecurityNumber(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, gov.grants.apply.forms.rr_personaldata_v1.DirectorType master, java.lang.String value) {
        if (value instanceof java.lang.String) {
            java.lang.String realValue = ((java.lang.String) value);
            // Check primitive value
            {
                // Perform the check
                // Checking class com.sun.msv.datatype.xsd.PatternFacet datatype
                de.fzi.dbs.verification.event.datatype.ValueProblem problem = null;
                if (!new com.sun.msv.datatype.xsd.regex.RegularExpression("[0-9]{3}\\-[0-9]{2}\\-[0-9]{4}", "X").matches(realValue.toString())) {
                    problem = new de.fzi.dbs.verification.event.datatype.RegularExpressionProblem(realValue, "[0-9]{3}\\-[0-9]{2}\\-[0-9]{4}");
                }
                if (null!= problem) {
                    // Handle event
                    handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "SocialSecurityNumber"), problem));
                }
            }
        } else {
            if (null == value) {
            } else {
                // Report wrong class
                handler.handleEvent(new de.fzi.dbs.verification.event.VerificationEvent(new de.fzi.dbs.verification.event.VerificationEventLocator(parentLocator, master, "SocialSecurityNumber"), new de.fzi.dbs.verification.event.structure.NonExpectedClassProblem(value.getClass())));
            }
        }
    }

    public void check(de.fzi.dbs.verification.event.AbstractVerificationEventLocator parentLocator, javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(parentLocator, handler, ((gov.grants.apply.forms.rr_personaldata_v1.DirectorType) object));
    }

    public void check(javax.xml.bind.ValidationEventHandler handler, java.lang.Object object) {
        check(null, handler, ((gov.grants.apply.forms.rr_personaldata_v1.DirectorType) object));
    }

}
