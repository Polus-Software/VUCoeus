//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.12.13 at 02:14:23 EST 
//


package edu.mit.coeus.utils.xml.bean.award.impl;

public class AmountInfoTypeImpl implements edu.mit.coeus.utils.xml.bean.award.AmountInfoType, com.sun.xml.bind.JAXBObject, edu.mit.coeus.utils.xml.bean.award.impl.runtime.UnmarshallableObject, edu.mit.coeus.utils.xml.bean.award.impl.runtime.XMLSerializable, edu.mit.coeus.utils.xml.bean.award.impl.runtime.ValidatableObject
{

    protected java.util.Calendar _FinalExpirationDate;
    protected java.lang.String _EntryType;
    protected java.math.BigDecimal _AnticipatedTotalAmt;
    protected java.math.BigDecimal _ObligatedChangeIndirect;
    protected java.math.BigDecimal _AnticipatedDistributableAmt;
    protected java.util.Calendar _ObligationExpirationDate;
    protected java.util.Calendar _TransactionDate;
    protected java.math.BigDecimal _ObligatedChangeDirect;
    protected java.lang.String _TransactionId;
    protected java.lang.String _FinalExpDateModified;
    protected java.math.BigDecimal _AnticipatedChange;
    protected boolean has_ChildGrantTotal;
    protected double _ChildGrantTotal;
    protected boolean has_TotalDistributableAmount;
    protected double _TotalDistributableAmount;
    protected boolean has_SequenceNumber;
    protected int _SequenceNumber;
    protected java.math.BigDecimal _ObligatedTotalDirect;
    protected java.lang.String _AccountNumber;
    protected java.util.Calendar _TotalStartDate;
    protected java.util.Calendar _TotalEndDate;
    protected java.math.BigDecimal _ObligatedChange;
    protected java.math.BigDecimal _AmtObligatedToDate;
    protected java.lang.String _AnticipatedDistributableAmtModified;
    protected java.lang.String _CurrentFundEffectiveDateModified;
    protected boolean has_AmountSequenceNumber;
    protected int _AmountSequenceNumber;
    protected boolean has_EOMProcess;
    protected boolean _EOMProcess;
    protected boolean has_TreeLevel;
    protected int _TreeLevel;
    protected java.lang.String _EnableAwdAntOblDirectIndirectCost;
    protected java.math.BigDecimal _ObligatedTotalIndirect;
    protected boolean has_RemainingAnticipatedAmt;
    protected double _RemainingAnticipatedAmt;
    protected java.util.Calendar _CurrentFundEffectiveDate;
    protected java.lang.String _AmtObligatedToDateModified;
    protected java.lang.String _ObligatedDistributableAmtModified;
    protected java.math.BigDecimal _AnticipatedChangeIndirect;
    protected boolean has_TotalObligatedAmount;
    protected double _TotalObligatedAmount;
    protected java.lang.String _ObligationExpDateModified;
    protected java.lang.String _AwardNumber;
    protected java.math.BigDecimal _AnticipatedTotalIndirect;
    protected java.math.BigDecimal _AnticipatedTotalDirect;
    protected java.lang.String _AnticipatedTotalAmtModified;
    protected java.math.BigDecimal _AnticipatedChangeDirect;
    protected java.math.BigDecimal _ObligatedDistributableAmt;
    public final static java.lang.Class version = (edu.mit.coeus.utils.xml.bean.award.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (edu.mit.coeus.utils.xml.bean.award.AmountInfoType.class);
    }

    public java.util.Calendar getFinalExpirationDate() {
        return _FinalExpirationDate;
    }

    public void setFinalExpirationDate(java.util.Calendar value) {
        _FinalExpirationDate = value;
    }

    public java.lang.String getEntryType() {
        return _EntryType;
    }

    public void setEntryType(java.lang.String value) {
        _EntryType = value;
    }

    public java.math.BigDecimal getAnticipatedTotalAmt() {
        return _AnticipatedTotalAmt;
    }

    public void setAnticipatedTotalAmt(java.math.BigDecimal value) {
        _AnticipatedTotalAmt = value;
    }

    public java.math.BigDecimal getObligatedChangeIndirect() {
        return _ObligatedChangeIndirect;
    }

    public void setObligatedChangeIndirect(java.math.BigDecimal value) {
        _ObligatedChangeIndirect = value;
    }

    public java.math.BigDecimal getAnticipatedDistributableAmt() {
        return _AnticipatedDistributableAmt;
    }

    public void setAnticipatedDistributableAmt(java.math.BigDecimal value) {
        _AnticipatedDistributableAmt = value;
    }

    public java.util.Calendar getObligationExpirationDate() {
        return _ObligationExpirationDate;
    }

    public void setObligationExpirationDate(java.util.Calendar value) {
        _ObligationExpirationDate = value;
    }

    public java.util.Calendar getTransactionDate() {
        return _TransactionDate;
    }

    public void setTransactionDate(java.util.Calendar value) {
        _TransactionDate = value;
    }

    public java.math.BigDecimal getObligatedChangeDirect() {
        return _ObligatedChangeDirect;
    }

    public void setObligatedChangeDirect(java.math.BigDecimal value) {
        _ObligatedChangeDirect = value;
    }

    public java.lang.String getTransactionId() {
        return _TransactionId;
    }

    public void setTransactionId(java.lang.String value) {
        _TransactionId = value;
    }

    public java.lang.String getFinalExpDateModified() {
        return _FinalExpDateModified;
    }

    public void setFinalExpDateModified(java.lang.String value) {
        _FinalExpDateModified = value;
    }

    public java.math.BigDecimal getAnticipatedChange() {
        return _AnticipatedChange;
    }

    public void setAnticipatedChange(java.math.BigDecimal value) {
        _AnticipatedChange = value;
    }

    public double getChildGrantTotal() {
        return _ChildGrantTotal;
    }

    public void setChildGrantTotal(double value) {
        _ChildGrantTotal = value;
        has_ChildGrantTotal = true;
    }

    public double getTotalDistributableAmount() {
        return _TotalDistributableAmount;
    }

    public void setTotalDistributableAmount(double value) {
        _TotalDistributableAmount = value;
        has_TotalDistributableAmount = true;
    }

    public int getSequenceNumber() {
        return _SequenceNumber;
    }

    public void setSequenceNumber(int value) {
        _SequenceNumber = value;
        has_SequenceNumber = true;
    }

    public java.math.BigDecimal getObligatedTotalDirect() {
        return _ObligatedTotalDirect;
    }

    public void setObligatedTotalDirect(java.math.BigDecimal value) {
        _ObligatedTotalDirect = value;
    }

    public java.lang.String getAccountNumber() {
        return _AccountNumber;
    }

    public void setAccountNumber(java.lang.String value) {
        _AccountNumber = value;
    }

    public java.util.Calendar getTotalStartDate() {
        return _TotalStartDate;
    }

    public void setTotalStartDate(java.util.Calendar value) {
        _TotalStartDate = value;
    }

    public java.util.Calendar getTotalEndDate() {
        return _TotalEndDate;
    }

    public void setTotalEndDate(java.util.Calendar value) {
        _TotalEndDate = value;
    }

    public java.math.BigDecimal getObligatedChange() {
        return _ObligatedChange;
    }

    public void setObligatedChange(java.math.BigDecimal value) {
        _ObligatedChange = value;
    }

    public java.math.BigDecimal getAmtObligatedToDate() {
        return _AmtObligatedToDate;
    }

    public void setAmtObligatedToDate(java.math.BigDecimal value) {
        _AmtObligatedToDate = value;
    }

    public java.lang.String getAnticipatedDistributableAmtModified() {
        return _AnticipatedDistributableAmtModified;
    }

    public void setAnticipatedDistributableAmtModified(java.lang.String value) {
        _AnticipatedDistributableAmtModified = value;
    }

    public java.lang.String getCurrentFundEffectiveDateModified() {
        return _CurrentFundEffectiveDateModified;
    }

    public void setCurrentFundEffectiveDateModified(java.lang.String value) {
        _CurrentFundEffectiveDateModified = value;
    }

    public int getAmountSequenceNumber() {
        return _AmountSequenceNumber;
    }

    public void setAmountSequenceNumber(int value) {
        _AmountSequenceNumber = value;
        has_AmountSequenceNumber = true;
    }

    public boolean isEOMProcess() {
        return _EOMProcess;
    }

    public void setEOMProcess(boolean value) {
        _EOMProcess = value;
        has_EOMProcess = true;
    }

    public int getTreeLevel() {
        return _TreeLevel;
    }

    public void setTreeLevel(int value) {
        _TreeLevel = value;
        has_TreeLevel = true;
    }

    public java.lang.String getEnableAwdAntOblDirectIndirectCost() {
        return _EnableAwdAntOblDirectIndirectCost;
    }

    public void setEnableAwdAntOblDirectIndirectCost(java.lang.String value) {
        _EnableAwdAntOblDirectIndirectCost = value;
    }

    public java.math.BigDecimal getObligatedTotalIndirect() {
        return _ObligatedTotalIndirect;
    }

    public void setObligatedTotalIndirect(java.math.BigDecimal value) {
        _ObligatedTotalIndirect = value;
    }

    public double getRemainingAnticipatedAmt() {
        return _RemainingAnticipatedAmt;
    }

    public void setRemainingAnticipatedAmt(double value) {
        _RemainingAnticipatedAmt = value;
        has_RemainingAnticipatedAmt = true;
    }

    public java.util.Calendar getCurrentFundEffectiveDate() {
        return _CurrentFundEffectiveDate;
    }

    public void setCurrentFundEffectiveDate(java.util.Calendar value) {
        _CurrentFundEffectiveDate = value;
    }

    public java.lang.String getAmtObligatedToDateModified() {
        return _AmtObligatedToDateModified;
    }

    public void setAmtObligatedToDateModified(java.lang.String value) {
        _AmtObligatedToDateModified = value;
    }

    public java.lang.String getObligatedDistributableAmtModified() {
        return _ObligatedDistributableAmtModified;
    }

    public void setObligatedDistributableAmtModified(java.lang.String value) {
        _ObligatedDistributableAmtModified = value;
    }

    public java.math.BigDecimal getAnticipatedChangeIndirect() {
        return _AnticipatedChangeIndirect;
    }

    public void setAnticipatedChangeIndirect(java.math.BigDecimal value) {
        _AnticipatedChangeIndirect = value;
    }

    public double getTotalObligatedAmount() {
        return _TotalObligatedAmount;
    }

    public void setTotalObligatedAmount(double value) {
        _TotalObligatedAmount = value;
        has_TotalObligatedAmount = true;
    }

    public java.lang.String getObligationExpDateModified() {
        return _ObligationExpDateModified;
    }

    public void setObligationExpDateModified(java.lang.String value) {
        _ObligationExpDateModified = value;
    }

    public java.lang.String getAwardNumber() {
        return _AwardNumber;
    }

    public void setAwardNumber(java.lang.String value) {
        _AwardNumber = value;
    }

    public java.math.BigDecimal getAnticipatedTotalIndirect() {
        return _AnticipatedTotalIndirect;
    }

    public void setAnticipatedTotalIndirect(java.math.BigDecimal value) {
        _AnticipatedTotalIndirect = value;
    }

    public java.math.BigDecimal getAnticipatedTotalDirect() {
        return _AnticipatedTotalDirect;
    }

    public void setAnticipatedTotalDirect(java.math.BigDecimal value) {
        _AnticipatedTotalDirect = value;
    }

    public java.lang.String getAnticipatedTotalAmtModified() {
        return _AnticipatedTotalAmtModified;
    }

    public void setAnticipatedTotalAmtModified(java.lang.String value) {
        _AnticipatedTotalAmtModified = value;
    }

    public java.math.BigDecimal getAnticipatedChangeDirect() {
        return _AnticipatedChangeDirect;
    }

    public void setAnticipatedChangeDirect(java.math.BigDecimal value) {
        _AnticipatedChangeDirect = value;
    }

    public java.math.BigDecimal getObligatedDistributableAmt() {
        return _ObligatedDistributableAmt;
    }

    public void setObligatedDistributableAmt(java.math.BigDecimal value) {
        _ObligatedDistributableAmt = value;
    }

    public edu.mit.coeus.utils.xml.bean.award.impl.runtime.UnmarshallingEventHandler createUnmarshaller(edu.mit.coeus.utils.xml.bean.award.impl.runtime.UnmarshallingContext context) {
        return new edu.mit.coeus.utils.xml.bean.award.impl.AmountInfoTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(edu.mit.coeus.utils.xml.bean.award.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (_AwardNumber!= null) {
            context.startElement("", "AwardNumber");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _AwardNumber), "AwardNumber");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_SequenceNumber) {
            context.startElement("", "SequenceNumber");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _SequenceNumber)), "SequenceNumber");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_AmountSequenceNumber) {
            context.startElement("", "AmountSequenceNumber");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _AmountSequenceNumber)), "AmountSequenceNumber");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedTotalAmtModified!= null) {
            context.startElement("", "AnticipatedTotalAmtModified");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _AnticipatedTotalAmtModified), "AnticipatedTotalAmtModified");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedTotalAmt!= null) {
            context.startElement("", "AnticipatedTotalAmt");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _AnticipatedTotalAmt)), "AnticipatedTotalAmt");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedDistributableAmtModified!= null) {
            context.startElement("", "AnticipatedDistributableAmtModified");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _AnticipatedDistributableAmtModified), "AnticipatedDistributableAmtModified");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedDistributableAmt!= null) {
            context.startElement("", "AnticipatedDistributableAmt");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _AnticipatedDistributableAmt)), "AnticipatedDistributableAmt");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_FinalExpirationDate!= null) {
            context.startElement("", "FinalExpirationDate");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDate(((java.util.Calendar) _FinalExpirationDate)), "FinalExpirationDate");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_FinalExpDateModified!= null) {
            context.startElement("", "FinalExpDateModified");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _FinalExpDateModified), "FinalExpDateModified");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_CurrentFundEffectiveDate!= null) {
            context.startElement("", "CurrentFundEffectiveDate");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDate(((java.util.Calendar) _CurrentFundEffectiveDate)), "CurrentFundEffectiveDate");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_CurrentFundEffectiveDateModified!= null) {
            context.startElement("", "CurrentFundEffectiveDateModified");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _CurrentFundEffectiveDateModified), "CurrentFundEffectiveDateModified");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AmtObligatedToDate!= null) {
            context.startElement("", "AmtObligatedToDate");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _AmtObligatedToDate)), "AmtObligatedToDate");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AmtObligatedToDateModified!= null) {
            context.startElement("", "AmtObligatedToDateModified");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _AmtObligatedToDateModified), "AmtObligatedToDateModified");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligatedDistributableAmtModified!= null) {
            context.startElement("", "ObligatedDistributableAmtModified");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ObligatedDistributableAmtModified), "ObligatedDistributableAmtModified");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligatedDistributableAmt!= null) {
            context.startElement("", "ObligatedDistributableAmt");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _ObligatedDistributableAmt)), "ObligatedDistributableAmt");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligationExpirationDate!= null) {
            context.startElement("", "ObligationExpirationDate");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDate(((java.util.Calendar) _ObligationExpirationDate)), "ObligationExpirationDate");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligationExpDateModified!= null) {
            context.startElement("", "ObligationExpDateModified");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ObligationExpDateModified), "ObligationExpDateModified");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_TransactionId!= null) {
            context.startElement("", "TransactionId");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _TransactionId), "TransactionId");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_TransactionDate!= null) {
            context.startElement("", "TransactionDate");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDate(((java.util.Calendar) _TransactionDate)), "TransactionDate");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedChange!= null) {
            context.startElement("", "AnticipatedChange");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _AnticipatedChange)), "AnticipatedChange");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligatedChange!= null) {
            context.startElement("", "ObligatedChange");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _ObligatedChange)), "ObligatedChange");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_EntryType!= null) {
            context.startElement("", "EntryType");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _EntryType), "EntryType");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_EOMProcess) {
            context.startElement("", "EOMProcess");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _EOMProcess)), "EOMProcess");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AccountNumber!= null) {
            context.startElement("", "AccountNumber");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _AccountNumber), "AccountNumber");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_TreeLevel) {
            context.startElement("", "TreeLevel");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _TreeLevel)), "TreeLevel");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_TotalStartDate!= null) {
            context.startElement("", "TotalStartDate");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDate(((java.util.Calendar) _TotalStartDate)), "TotalStartDate");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_TotalEndDate!= null) {
            context.startElement("", "TotalEndDate");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDate(((java.util.Calendar) _TotalEndDate)), "TotalEndDate");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_TotalObligatedAmount) {
            context.startElement("", "TotalObligatedAmount");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDouble(((double) _TotalObligatedAmount)), "TotalObligatedAmount");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_TotalDistributableAmount) {
            context.startElement("", "TotalDistributableAmount");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDouble(((double) _TotalDistributableAmount)), "TotalDistributableAmount");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_ChildGrantTotal) {
            context.startElement("", "ChildGrantTotal");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDouble(((double) _ChildGrantTotal)), "ChildGrantTotal");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_RemainingAnticipatedAmt) {
            context.startElement("", "RemainingAnticipatedAmt");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDouble(((double) _RemainingAnticipatedAmt)), "RemainingAnticipatedAmt");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligatedChangeDirect!= null) {
            context.startElement("", "ObligatedChangeDirect");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _ObligatedChangeDirect)), "ObligatedChangeDirect");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligatedChangeIndirect!= null) {
            context.startElement("", "ObligatedChangeIndirect");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _ObligatedChangeIndirect)), "ObligatedChangeIndirect");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligatedTotalDirect!= null) {
            context.startElement("", "ObligatedTotalDirect");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _ObligatedTotalDirect)), "ObligatedTotalDirect");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ObligatedTotalIndirect!= null) {
            context.startElement("", "ObligatedTotalIndirect");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _ObligatedTotalIndirect)), "ObligatedTotalIndirect");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedChangeDirect!= null) {
            context.startElement("", "AnticipatedChangeDirect");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _AnticipatedChangeDirect)), "AnticipatedChangeDirect");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedChangeIndirect!= null) {
            context.startElement("", "AnticipatedChangeIndirect");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _AnticipatedChangeIndirect)), "AnticipatedChangeIndirect");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedTotalDirect!= null) {
            context.startElement("", "AnticipatedTotalDirect");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _AnticipatedTotalDirect)), "AnticipatedTotalDirect");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AnticipatedTotalIndirect!= null) {
            context.startElement("", "AnticipatedTotalIndirect");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDecimal(((java.math.BigDecimal) _AnticipatedTotalIndirect)), "AnticipatedTotalIndirect");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_EnableAwdAntOblDirectIndirectCost!= null) {
            context.startElement("", "EnableAwdAntOblDirectIndirectCost");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _EnableAwdAntOblDirectIndirectCost), "EnableAwdAntOblDirectIndirectCost");
            } catch (java.lang.Exception e) {
                edu.mit.coeus.utils.xml.bean.award.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
    }

    public void serializeAttributes(edu.mit.coeus.utils.xml.bean.award.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public void serializeURIs(edu.mit.coeus.utils.xml.bean.award.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (edu.mit.coeus.utils.xml.bean.award.AmountInfoType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
+"\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
+"\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001e"
+"com.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclared"
+"AttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r"
+"\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p\u0000sq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar.DataExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq"
+"\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003q\u0000~\u00003psr\u0000#c"
+"om.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysVali"
+"dxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr"
+"\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.su"
+"n.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit"
+"\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000=L\u0000\nwhiteSpacet\u0000.Lcom/sun"
+"/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org"
+"/2001/XMLSchemat\u0000\u0006stringsr\u00005com.sun.msv.datatype.xsd.WhiteSp"
+"aceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd"
+".WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Ex"
+"pression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv"
+".util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000=L\u0000\fnamespaceURIq"
+"\u0000~\u0000=xpq\u0000~\u0000Aq\u0000~\u0000@sq\u0000~\u0000,ppsr\u0000 com.sun.msv.grammar.AttributeExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000/xq\u0000~\u0000\u0003q\u0000~\u00003psq\u0000~\u00005pps"
+"r\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000:q\u0000~\u0000@t"
+"\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Coll"
+"apse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Cq\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0000Oq\u0000~\u0000@sr\u0000#com.sun.msv.gr"
+"ammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000=L\u0000\fnamespac"
+"eURIq\u0000~\u0000=xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004ty"
+"pet\u0000)http://www.w3.org/2001/XMLSchema-instancesr\u00000com.sun.ms"
+"v.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000"
+"2\u0001psq\u0000~\u0000St\u0000\u000bAwardNumbert\u0000\u0000q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000pp"
+"sq\u0000~\u00005q\u0000~\u00003psr\u0000 com.sun.msv.datatype.xsd.IntType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
+"r\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0001L\u0000\n"
+"baseFacetst\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;xq\u0000~\u0000:"
+"q\u0000~\u0000@t\u0000\u0003intq\u0000~\u0000Qsr\u0000*com.sun.msv.datatype.xsd.MaxInclusiveFac"
+"et\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.RangeFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0001L\u0000\nlimitValuet\u0000\u0012Ljava/lang/Object;xr\u00009com.sun.msv.datatyp"
+"e.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun"
+".msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixe"
+"dZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypeq\u0000~\u0000dL\u0000\fconcreteTypet\u0000\'Lcom"
+"/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000=xq\u0000~\u0000<pp"
+"q\u0000~\u0000Q\u0000\u0001sr\u0000*com.sun.msv.datatype.xsd.MinInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xq\u0000~\u0000hppq\u0000~\u0000Q\u0000\u0000sr\u0000!com.sun.msv.datatype.xsd.LongType\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000cq\u0000~\u0000@t\u0000\u0004longq\u0000~\u0000Qsq\u0000~\u0000gppq\u0000~\u0000Q\u0000\u0001sq\u0000~\u0000nppq\u0000~\u0000Q\u0000\u0000"
+"sr\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000cq\u0000~"
+"\u0000@t\u0000\u0007integerq\u0000~\u0000Qsr\u0000,com.sun.msv.datatype.xsd.FractionDigits"
+"Facet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.xsd.DataTyp"
+"eWithLexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0000kppq\u0000~\u0000Q\u0001\u0000sr\u0000#com"
+".sun.msv.datatype.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000:q\u0000~\u0000@t\u0000\u0007dec"
+"imalq\u0000~\u0000Qq\u0000~\u0000|t\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000vt\u0000\fminInclusivesr\u0000\u000ej"
+"ava.lang.Long;\u008b\u00e4\u0090\u00cc\u008f#\u00df\u0002\u0000\u0001J\u0000\u0005valuexr\u0000\u0010java.lang.Number\u0086\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b"
+"\u0002\u0000\u0000xp\u0080\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000vt\u0000\fmaxInclusivesq\u0000~\u0000\u0080\u007f\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ffq\u0000~\u0000qq\u0000~\u0000\u007fsr\u0000"
+"\u0011java.lang.Integer\u0012\u00e2\u00a0\u00a4\u00f7\u0081\u00878\u0002\u0000\u0001I\u0000\u0005valuexq\u0000~\u0000\u0081\u0080\u0000\u0000\u0000q\u0000~\u0000qq\u0000~\u0000\u0083sq\u0000"
+"~\u0000\u0085\u007f\u00ff\u00ff\u00ffq\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0000fq\u0000~\u0000@sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000"
+"~\u0000Ysq\u0000~\u0000St\u0000\u000eSequenceNumberq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000"
+"~\u0000\u0000ppq\u0000~\u0000asq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0014Amount"
+"SequenceNumberq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u00008sq"
+"\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u001bAnticipatedTotalAm"
+"tModifiedq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u00005ppq\u0000~\u0000"
+"|q\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0000}q\u0000~\u0000@sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000"
+"~\u0000St\u0000\u0013AnticipatedTotalAmtq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~"
+"\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000#Anticip"
+"atedDistributableAmtModifiedq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000s"
+"q\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u001bAnti"
+"cipatedDistributableAmtq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000"
+"ppsq\u0000~\u00005ppsr\u0000!com.sun.msv.datatype.xsd.DateType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr"
+"\u0000)com.sun.msv.datatype.xsd.DateTimeBaseType\u0014W\u001a@3\u00a5\u00b4\u00e5\u0002\u0000\u0000xq\u0000~\u0000:"
+"q\u0000~\u0000@t\u0000\u0004dateq\u0000~\u0000Qq\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0000\u00b9q\u0000~\u0000@sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000"
+"~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0013FinalExpirationDateq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,pps"
+"q\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Y"
+"sq\u0000~\u0000St\u0000\u0014FinalExpDateModifiedq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000"
+"sq\u0000~\u0000\u0000ppq\u0000~\u0000\u00b5sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0018Cur"
+"rentFundEffectiveDateq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000pp"
+"q\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000 CurrentFund"
+"EffectiveDateModifiedq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000pp"
+"q\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0012AmtObligate"
+"dToDateq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,pps"
+"q\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u001aAmtObligatedToDateModifie"
+"dq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq"
+"\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000!ObligatedDistributableAmtModifi"
+"edq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000J"
+"q\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0019ObligatedDistributableAmtq\u0000~\u0000]"
+"q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u00b5sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq"
+"\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0018ObligationExpirationDateq\u0000~\u0000]q\u0000~\u0000Ysq\u0000"
+"~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000"
+"Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0019ObligationExpDateModifiedq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq"
+"\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ys"
+"q\u0000~\u0000St\u0000\rTransactionIdq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000pp"
+"q\u0000~\u0000\u00b5sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u000fTransaction"
+"Dateq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~"
+"\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0011AnticipatedChangeq\u0000~\u0000]q\u0000~\u0000Ys"
+"q\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000"
+"~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u000fObligatedChangeq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u0000"
+"3p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\t"
+"EntryTypeq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u00005ppsr\u0000$"
+"com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000:q\u0000~\u0000@t\u0000"
+"\u0007booleanq\u0000~\u0000Qq\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0001\'q\u0000~\u0000@sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq"
+"\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\nEOMProcessq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000s"
+"q\u0000~\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\rAcco"
+"untNumberq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000asq\u0000~\u0000,p"
+"psq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\tTreeLevelq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~"
+"\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u00b5sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000U"
+"q\u0000~\u0000Ysq\u0000~\u0000St\u0000\u000eTotalStartDateq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000s"
+"q\u0000~\u0000\u0000ppq\u0000~\u0000\u00b5sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\fTota"
+"lEndDateq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u00005ppsr\u0000#c"
+"om.sun.msv.datatype.xsd.DoubleType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv"
+".datatype.xsd.FloatingNumberType\u00fc\u00e3\u00b6\u0087\u008c\u00a8|\u00e0\u0002\u0000\u0000xq\u0000~\u0000:q\u0000~\u0000@t\u0000\u0006dou"
+"bleq\u0000~\u0000Qq\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0001Pq\u0000~\u0000@sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq"
+"\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0014TotalObligatedAmountq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~"
+"\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0001Lsq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000"
+"\u0018TotalDistributableAmountq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~"
+"\u0000\u0000ppq\u0000~\u0001Lsq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u000fChildGr"
+"antTotalq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0001Lsq\u0000~\u0000,pp"
+"sq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0017RemainingAnticipatedAmtq"
+"\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~"
+"\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0015ObligatedChangeDirectq\u0000~\u0000]q\u0000~\u0000Ysq"
+"\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~"
+"\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0017ObligatedChangeIndirectq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000"
+"~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq"
+"\u0000~\u0000St\u0000\u0014ObligatedTotalDirectq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq"
+"\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0016Oblig"
+"atedTotalIndirectq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000"
+"\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0017AnticipatedChan"
+"geDirectq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,pp"
+"sq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0019AnticipatedChangeIndirec"
+"tq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq"
+"\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0016AnticipatedTotalDirectq\u0000~\u0000]q\u0000~\u0000"
+"Ysq\u0000~\u0000,ppsq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u009esq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000L"
+"q\u0000~\u0000Uq\u0000~\u0000Ysq\u0000~\u0000St\u0000\u0018AnticipatedTotalIndirectq\u0000~\u0000]q\u0000~\u0000Ysq\u0000~\u0000,p"
+"psq\u0000~\u0000.q\u0000~\u00003p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u00008sq\u0000~\u0000,ppsq\u0000~\u0000Jq\u0000~\u00003pq\u0000~\u0000Lq\u0000~\u0000Uq\u0000~"
+"\u0000Ysq\u0000~\u0000St\u0000!EnableAwdAntOblDirectIndirectCostq\u0000~\u0000]q\u0000~\u0000Ysr\u0000\"co"
+"m.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lco"
+"m/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.ms"
+"v.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstr"
+"eamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp"
+"\u0000\u0000\u0000\u009f\u0001pq\u0000~\u0000\u0014q\u0000~\u0000\u001cq\u0000~\u0000\"q\u0000~\u00016q\u0000~\u0000`q\u0000~\u0000\u008fq\u0000~\u0000\bq\u0000~\u0001!q\u0000~\u0001/q\u0000~\u0001\u001cq\u0000~\u0001"
+"\u0000q\u0000~\u0000\u00f9q\u0000~\u00004q\u0000~\u0000\u0096q\u0000~\u0000\u00a6q\u0000~\u0000\u00c1q\u0000~\u0000\u00cfq\u0000~\u0000\u00ddq\u0000~\u0000\u00e4q\u0000~\u0001\u00a5q\u0000~\u0000\u0013q\u0000~\u0000\u0019q\u0000~\u0001"
+"Bq\u0000~\u0001;q\u0000~\u0001\u0005q\u0000~\u0000\u00f0q\u0000~\u0000\u00b2q\u0000~\u0000\u00c6q\u0000~\u0000\fq\u0000~\u0000\u001fq\u0000~\u0001Yq\u0000~\u0001Rq\u0000~\u0001Eq\u0000~\u0001>q\u0000~\u0001"
+"7q\u0000~\u00010q\u0000~\u0001)q\u0000~\u0001\u001dq\u0000~\u0001\u0016q\u0000~\u0001\u000fq\u0000~\u0001\bq\u0000~\u0001\u0001q\u0000~\u0000\u00faq\u0000~\u0000)q\u0000~\u0000\u00f3q\u0000~\u0000Iq\u0000~\u0000"
+"\u0089q\u0000~\u0000\u0090q\u0000~\u0000\u0097q\u0000~\u0000\u00a0q\u0000~\u0000\u00a7q\u0000~\u0000\u00aeq\u0000~\u0000\u001eq\u0000~\u0000\u00bbq\u0000~\u0000\u00c2q\u0000~\u0000\u00c9q\u0000~\u0000\u00d0q\u0000~\u0000\u00d7q\u0000~\u0000"
+"\u00deq\u0000~\u0000\u00e5q\u0000~\u0000\u00ecq\u0000~\u0000\u0012q\u0000~\u0001`q\u0000~\u0001gq\u0000~\u0001nq\u0000~\u0001uq\u0000~\u0001|q\u0000~\u0001\u0083q\u0000~\u0001\u008aq\u0000~\u0001\u0091q\u0000~\u0001"
+"\u0098q\u0000~\u0001\u009fq\u0000~\u0001\u00a6q\u0000~\u0001\u0015q\u0000~\u0001\u000eq\u0000~\u0000\u009dq\u0000~\u0000\u00adq\u0000~\u0000\u00d6q\u0000~\u0000\u00ebq\u0000~\u0001mq\u0000~\u0001tq\u0000~\u0000\u0011q\u0000~\u0001"
+"{q\u0000~\u0001\u0082q\u0000~\u0001\u0089q\u0000~\u0001\u0090q\u0000~\u0001\u0097q\u0000~\u0001\u009eq\u0000~\u0000\u0006q\u0000~\u0000+q\u0000~\u0000\u001dq\u0000~\u0000\u0015q\u0000~\u0000\u0016q\u0000~\u0001-q\u0000~\u0001"
+"\u001aq\u0000~\u0000\u00feq\u0000~\u0000\u00f7q\u0000~\u0000-q\u0000~\u0000\u0094q\u0000~\u0000\u00a4q\u0000~\u0000\u00bfq\u0000~\u0000\u00cdq\u0000~\u0000\u00dbq\u0000~\u0000\u00e2q\u0000~\u0001\u00a3q\u0000~\u0000\u0007q\u0000~\u0001"
+"Vq\u0000~\u0001Iq\u0000~\u0001]q\u0000~\u0001dq\u0000~\u0000!q\u0000~\u0000\u000fq\u0000~\u0000\nq\u0000~\u0000&q\u0000~\u0000\u0018q\u0000~\u0000\rq\u0000~\u0000\'q\u0000~\u0001\u0013q\u0000~\u0001"
+"\fq\u0000~\u0000\u00e9q\u0000~\u0000\u009bq\u0000~\u0000\u00abq\u0000~\u0000\u00d4q\u0000~\u0000\u0017q\u0000~\u0000(q\u0000~\u0001kq\u0000~\u0001rq\u0000~\u0001yq\u0000~\u0001\u0080q\u0000~\u0001#q\u0000~\u0001"
+"\u0087q\u0000~\u0001\u008eq\u0000~\u0001\u0095q\u0000~\u0001\u009cq\u0000~\u0000\u0010q\u0000~\u0001Xq\u0000~\u0001Kq\u0000~\u0001_q\u0000~\u0001fq\u0000~\u0000 q\u0000~\u0000\u001bq\u0000~\u0000\u000bq\u0000~\u0000"
+"#q\u0000~\u0000%q\u0000~\u0000$q\u0000~\u0000\u001aq\u0000~\u0000\u000eq\u0000~\u0001Dq\u0000~\u0001=q\u0000~\u00014q\u0000~\u0000^q\u0000~\u0000\u008dq\u0000~\u0001\u0007q\u0000~\u0000\u00f2q\u0000~\u0000"
+"\u00b4q\u0000~\u0000\u00c8q\u0000~\u0000\tq\u0000~\u0000\u0005q\u0000~\u0000*x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends edu.mit.coeus.utils.xml.bean.award.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(edu.mit.coeus.utils.xml.bean.award.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------------------------------------------------------------------------------------------------------------------");
        }

        protected Unmarshaller(edu.mit.coeus.utils.xml.bean.award.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return edu.mit.coeus.utils.xml.bean.award.impl.AmountInfoTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  81 :
                        if (("TotalObligatedAmount" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 82;
                            return ;
                        }
                        state = 84;
                        continue outer;
                    case  105 :
                        if (("AnticipatedChangeDirect" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 106;
                            return ;
                        }
                        state = 108;
                        continue outer;
                    case  54 :
                        if (("TransactionDate" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 55;
                            return ;
                        }
                        state = 57;
                        continue outer;
                    case  99 :
                        if (("ObligatedTotalDirect" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 100;
                            return ;
                        }
                        state = 102;
                        continue outer;
                    case  75 :
                        if (("TotalStartDate" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 76;
                            return ;
                        }
                        state = 78;
                        continue outer;
                    case  42 :
                        if (("ObligatedDistributableAmt" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 43;
                            return ;
                        }
                        state = 45;
                        continue outer;
                    case  3 :
                        if (("SequenceNumber" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  39 :
                        if (("ObligatedDistributableAmtModified" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 40;
                            return ;
                        }
                        state = 42;
                        continue outer;
                    case  15 :
                        if (("AnticipatedDistributableAmtModified" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  57 :
                        if (("AnticipatedChange" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 58;
                            return ;
                        }
                        state = 60;
                        continue outer;
                    case  90 :
                        if (("RemainingAnticipatedAmt" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 91;
                            return ;
                        }
                        state = 93;
                        continue outer;
                    case  48 :
                        if (("ObligationExpDateModified" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 49;
                            return ;
                        }
                        state = 51;
                        continue outer;
                    case  36 :
                        if (("AmtObligatedToDateModified" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 37;
                            return ;
                        }
                        state = 39;
                        continue outer;
                    case  117 :
                        if (("EnableAwdAntOblDirectIndirectCost" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 118;
                            return ;
                        }
                        state = 120;
                        continue outer;
                    case  33 :
                        if (("AmtObligatedToDate" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 34;
                            return ;
                        }
                        state = 36;
                        continue outer;
                    case  12 :
                        if (("AnticipatedTotalAmt" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  60 :
                        if (("ObligatedChange" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 61;
                            return ;
                        }
                        state = 63;
                        continue outer;
                    case  30 :
                        if (("CurrentFundEffectiveDateModified" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 31;
                            return ;
                        }
                        state = 33;
                        continue outer;
                    case  51 :
                        if (("TransactionId" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 52;
                            return ;
                        }
                        state = 54;
                        continue outer;
                    case  111 :
                        if (("AnticipatedTotalDirect" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 112;
                            return ;
                        }
                        state = 114;
                        continue outer;
                    case  66 :
                        if (("EOMProcess" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 67;
                            return ;
                        }
                        state = 69;
                        continue outer;
                    case  45 :
                        if (("ObligationExpirationDate" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 46;
                            return ;
                        }
                        state = 48;
                        continue outer;
                    case  0 :
                        if (("AwardNumber" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  78 :
                        if (("TotalEndDate" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 79;
                            return ;
                        }
                        state = 81;
                        continue outer;
                    case  102 :
                        if (("ObligatedTotalIndirect" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 103;
                            return ;
                        }
                        state = 105;
                        continue outer;
                    case  27 :
                        if (("CurrentFundEffectiveDate" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  87 :
                        if (("ChildGrantTotal" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 88;
                            return ;
                        }
                        state = 90;
                        continue outer;
                    case  114 :
                        if (("AnticipatedTotalIndirect" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 115;
                            return ;
                        }
                        state = 117;
                        continue outer;
                    case  18 :
                        if (("AnticipatedDistributableAmt" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  63 :
                        if (("EntryType" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 64;
                            return ;
                        }
                        state = 66;
                        continue outer;
                    case  84 :
                        if (("TotalDistributableAmount" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 85;
                            return ;
                        }
                        state = 87;
                        continue outer;
                    case  96 :
                        if (("ObligatedChangeIndirect" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 97;
                            return ;
                        }
                        state = 99;
                        continue outer;
                    case  9 :
                        if (("AnticipatedTotalAmtModified" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  21 :
                        if (("FinalExpirationDate" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  120 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  93 :
                        if (("ObligatedChangeDirect" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 94;
                            return ;
                        }
                        state = 96;
                        continue outer;
                    case  24 :
                        if (("FinalExpDateModified" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  72 :
                        if (("TreeLevel" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 73;
                            return ;
                        }
                        state = 75;
                        continue outer;
                    case  6 :
                        if (("AmountSequenceNumber" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  108 :
                        if (("AnticipatedChangeIndirect" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 109;
                            return ;
                        }
                        state = 111;
                        continue outer;
                    case  69 :
                        if (("AccountNumber" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 70;
                            return ;
                        }
                        state = 72;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  81 :
                        state = 84;
                        continue outer;
                    case  17 :
                        if (("AnticipatedDistributableAmtModified" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 18;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("AmountSequenceNumber" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  105 :
                        state = 108;
                        continue outer;
                    case  65 :
                        if (("EntryType" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 66;
                            return ;
                        }
                        break;
                    case  54 :
                        state = 57;
                        continue outer;
                    case  101 :
                        if (("ObligatedTotalDirect" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 102;
                            return ;
                        }
                        break;
                    case  99 :
                        state = 102;
                        continue outer;
                    case  44 :
                        if (("ObligatedDistributableAmt" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 45;
                            return ;
                        }
                        break;
                    case  32 :
                        if (("CurrentFundEffectiveDateModified" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 33;
                            return ;
                        }
                        break;
                    case  59 :
                        if (("AnticipatedChange" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 60;
                            return ;
                        }
                        break;
                    case  75 :
                        state = 78;
                        continue outer;
                    case  113 :
                        if (("AnticipatedTotalDirect" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 114;
                            return ;
                        }
                        break;
                    case  42 :
                        state = 45;
                        continue outer;
                    case  89 :
                        if (("ChildGrantTotal" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 90;
                            return ;
                        }
                        break;
                    case  26 :
                        if (("FinalExpDateModified" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 27;
                            return ;
                        }
                        break;
                    case  92 :
                        if (("RemainingAnticipatedAmt" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 93;
                            return ;
                        }
                        break;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  116 :
                        if (("AnticipatedTotalIndirect" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 117;
                            return ;
                        }
                        break;
                    case  39 :
                        state = 42;
                        continue outer;
                    case  110 :
                        if (("AnticipatedChangeIndirect" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 111;
                            return ;
                        }
                        break;
                    case  86 :
                        if (("TotalDistributableAmount" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 87;
                            return ;
                        }
                        break;
                    case  107 :
                        if (("AnticipatedChangeDirect" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 108;
                            return ;
                        }
                        break;
                    case  20 :
                        if (("AnticipatedDistributableAmt" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  57 :
                        state = 60;
                        continue outer;
                    case  41 :
                        if (("ObligatedDistributableAmtModified" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 42;
                            return ;
                        }
                        break;
                    case  53 :
                        if (("TransactionId" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 54;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("SequenceNumber" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  90 :
                        state = 93;
                        continue outer;
                    case  29 :
                        if (("CurrentFundEffectiveDate" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 30;
                            return ;
                        }
                        break;
                    case  48 :
                        state = 51;
                        continue outer;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  117 :
                        state = 120;
                        continue outer;
                    case  33 :
                        state = 36;
                        continue outer;
                    case  119 :
                        if (("EnableAwdAntOblDirectIndirectCost" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 120;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("AnticipatedTotalAmtModified" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  60 :
                        state = 63;
                        continue outer;
                    case  62 :
                        if (("ObligatedChange" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 63;
                            return ;
                        }
                        break;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  95 :
                        if (("ObligatedChangeDirect" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 96;
                            return ;
                        }
                        break;
                    case  51 :
                        state = 54;
                        continue outer;
                    case  77 :
                        if (("TotalStartDate" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 78;
                            return ;
                        }
                        break;
                    case  111 :
                        state = 114;
                        continue outer;
                    case  66 :
                        state = 69;
                        continue outer;
                    case  45 :
                        state = 48;
                        continue outer;
                    case  56 :
                        if (("TransactionDate" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 57;
                            return ;
                        }
                        break;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  68 :
                        if (("EOMProcess" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 69;
                            return ;
                        }
                        break;
                    case  78 :
                        state = 81;
                        continue outer;
                    case  102 :
                        state = 105;
                        continue outer;
                    case  98 :
                        if (("ObligatedChangeIndirect" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 99;
                            return ;
                        }
                        break;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  38 :
                        if (("AmtObligatedToDateModified" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 39;
                            return ;
                        }
                        break;
                    case  87 :
                        state = 90;
                        continue outer;
                    case  14 :
                        if (("AnticipatedTotalAmt" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 15;
                            return ;
                        }
                        break;
                    case  114 :
                        state = 117;
                        continue outer;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  63 :
                        state = 66;
                        continue outer;
                    case  74 :
                        if (("TreeLevel" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 75;
                            return ;
                        }
                        break;
                    case  84 :
                        state = 87;
                        continue outer;
                    case  96 :
                        state = 99;
                        continue outer;
                    case  23 :
                        if (("FinalExpirationDate" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 24;
                            return ;
                        }
                        break;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  71 :
                        if (("AccountNumber" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 72;
                            return ;
                        }
                        break;
                    case  104 :
                        if (("ObligatedTotalIndirect" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 105;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("AwardNumber" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  35 :
                        if (("AmtObligatedToDate" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 36;
                            return ;
                        }
                        break;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  120 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  83 :
                        if (("TotalObligatedAmount" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 84;
                            return ;
                        }
                        break;
                    case  80 :
                        if (("TotalEndDate" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 81;
                            return ;
                        }
                        break;
                    case  93 :
                        state = 96;
                        continue outer;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  47 :
                        if (("ObligationExpirationDate" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 48;
                            return ;
                        }
                        break;
                    case  72 :
                        state = 75;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  50 :
                        if (("ObligationExpDateModified" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 51;
                            return ;
                        }
                        break;
                    case  108 :
                        state = 111;
                        continue outer;
                    case  69 :
                        state = 72;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  81 :
                        state = 84;
                        continue outer;
                    case  105 :
                        state = 108;
                        continue outer;
                    case  54 :
                        state = 57;
                        continue outer;
                    case  99 :
                        state = 102;
                        continue outer;
                    case  75 :
                        state = 78;
                        continue outer;
                    case  42 :
                        state = 45;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  39 :
                        state = 42;
                        continue outer;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  57 :
                        state = 60;
                        continue outer;
                    case  90 :
                        state = 93;
                        continue outer;
                    case  48 :
                        state = 51;
                        continue outer;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  117 :
                        state = 120;
                        continue outer;
                    case  33 :
                        state = 36;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  60 :
                        state = 63;
                        continue outer;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  51 :
                        state = 54;
                        continue outer;
                    case  111 :
                        state = 114;
                        continue outer;
                    case  66 :
                        state = 69;
                        continue outer;
                    case  45 :
                        state = 48;
                        continue outer;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  78 :
                        state = 81;
                        continue outer;
                    case  102 :
                        state = 105;
                        continue outer;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  87 :
                        state = 90;
                        continue outer;
                    case  114 :
                        state = 117;
                        continue outer;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  63 :
                        state = 66;
                        continue outer;
                    case  84 :
                        state = 87;
                        continue outer;
                    case  96 :
                        state = 99;
                        continue outer;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  120 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  93 :
                        state = 96;
                        continue outer;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  72 :
                        state = 75;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  108 :
                        state = 111;
                        continue outer;
                    case  69 :
                        state = 72;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  81 :
                        state = 84;
                        continue outer;
                    case  105 :
                        state = 108;
                        continue outer;
                    case  54 :
                        state = 57;
                        continue outer;
                    case  99 :
                        state = 102;
                        continue outer;
                    case  75 :
                        state = 78;
                        continue outer;
                    case  42 :
                        state = 45;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  39 :
                        state = 42;
                        continue outer;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  57 :
                        state = 60;
                        continue outer;
                    case  90 :
                        state = 93;
                        continue outer;
                    case  48 :
                        state = 51;
                        continue outer;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  117 :
                        state = 120;
                        continue outer;
                    case  33 :
                        state = 36;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  60 :
                        state = 63;
                        continue outer;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  51 :
                        state = 54;
                        continue outer;
                    case  111 :
                        state = 114;
                        continue outer;
                    case  66 :
                        state = 69;
                        continue outer;
                    case  45 :
                        state = 48;
                        continue outer;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  78 :
                        state = 81;
                        continue outer;
                    case  102 :
                        state = 105;
                        continue outer;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  87 :
                        state = 90;
                        continue outer;
                    case  114 :
                        state = 117;
                        continue outer;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  63 :
                        state = 66;
                        continue outer;
                    case  84 :
                        state = 87;
                        continue outer;
                    case  96 :
                        state = 99;
                        continue outer;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  120 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  93 :
                        state = 96;
                        continue outer;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  72 :
                        state = 75;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  108 :
                        state = 111;
                        continue outer;
                    case  69 :
                        state = 72;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  81 :
                            state = 84;
                            continue outer;
                        case  64 :
                            eatText1(value);
                            state = 65;
                            return ;
                        case  105 :
                            state = 108;
                            continue outer;
                        case  54 :
                            state = 57;
                            continue outer;
                        case  76 :
                            eatText2(value);
                            state = 77;
                            return ;
                        case  43 :
                            eatText3(value);
                            state = 44;
                            return ;
                        case  99 :
                            state = 102;
                            continue outer;
                        case  79 :
                            eatText4(value);
                            state = 80;
                            return ;
                        case  75 :
                            state = 78;
                            continue outer;
                        case  42 :
                            state = 45;
                            continue outer;
                        case  1 :
                            eatText5(value);
                            state = 2;
                            return ;
                        case  49 :
                            eatText6(value);
                            state = 50;
                            return ;
                        case  25 :
                            eatText7(value);
                            state = 26;
                            return ;
                        case  4 :
                            eatText8(value);
                            state = 5;
                            return ;
                        case  67 :
                            eatText9(value);
                            state = 68;
                            return ;
                        case  3 :
                            state = 6;
                            continue outer;
                        case  55 :
                            eatText10(value);
                            state = 56;
                            return ;
                        case  115 :
                            eatText11(value);
                            state = 116;
                            return ;
                        case  39 :
                            state = 42;
                            continue outer;
                        case  22 :
                            eatText12(value);
                            state = 23;
                            return ;
                        case  70 :
                            eatText13(value);
                            state = 71;
                            return ;
                        case  73 :
                            eatText14(value);
                            state = 74;
                            return ;
                        case  19 :
                            eatText15(value);
                            state = 20;
                            return ;
                        case  40 :
                            eatText16(value);
                            state = 41;
                            return ;
                        case  15 :
                            state = 18;
                            continue outer;
                        case  57 :
                            state = 60;
                            continue outer;
                        case  13 :
                            eatText17(value);
                            state = 14;
                            return ;
                        case  28 :
                            eatText18(value);
                            state = 29;
                            return ;
                        case  90 :
                            state = 93;
                            continue outer;
                        case  48 :
                            state = 51;
                            continue outer;
                        case  91 :
                            eatText19(value);
                            state = 92;
                            return ;
                        case  36 :
                            state = 39;
                            continue outer;
                        case  117 :
                            state = 120;
                            continue outer;
                        case  33 :
                            state = 36;
                            continue outer;
                        case  31 :
                            eatText20(value);
                            state = 32;
                            return ;
                        case  12 :
                            state = 15;
                            continue outer;
                        case  60 :
                            state = 63;
                            continue outer;
                        case  30 :
                            state = 33;
                            continue outer;
                        case  51 :
                            state = 54;
                            continue outer;
                        case  103 :
                            eatText21(value);
                            state = 104;
                            return ;
                        case  82 :
                            eatText22(value);
                            state = 83;
                            return ;
                        case  111 :
                            state = 114;
                            continue outer;
                        case  66 :
                            state = 69;
                            continue outer;
                        case  45 :
                            state = 48;
                            continue outer;
                        case  0 :
                            state = 3;
                            continue outer;
                        case  7 :
                            eatText23(value);
                            state = 8;
                            return ;
                        case  78 :
                            state = 81;
                            continue outer;
                        case  102 :
                            state = 105;
                            continue outer;
                        case  27 :
                            state = 30;
                            continue outer;
                        case  106 :
                            eatText24(value);
                            state = 107;
                            return ;
                        case  87 :
                            state = 90;
                            continue outer;
                        case  85 :
                            eatText25(value);
                            state = 86;
                            return ;
                        case  114 :
                            state = 117;
                            continue outer;
                        case  16 :
                            eatText26(value);
                            state = 17;
                            return ;
                        case  112 :
                            eatText27(value);
                            state = 113;
                            return ;
                        case  52 :
                            eatText28(value);
                            state = 53;
                            return ;
                        case  100 :
                            eatText29(value);
                            state = 101;
                            return ;
                        case  18 :
                            state = 21;
                            continue outer;
                        case  63 :
                            state = 66;
                            continue outer;
                        case  10 :
                            eatText30(value);
                            state = 11;
                            return ;
                        case  34 :
                            eatText31(value);
                            state = 35;
                            return ;
                        case  84 :
                            state = 87;
                            continue outer;
                        case  96 :
                            state = 99;
                            continue outer;
                        case  46 :
                            eatText32(value);
                            state = 47;
                            return ;
                        case  94 :
                            eatText33(value);
                            state = 95;
                            return ;
                        case  9 :
                            state = 12;
                            continue outer;
                        case  21 :
                            state = 24;
                            continue outer;
                        case  120 :
                            revertToParentFromText(value);
                            return ;
                        case  93 :
                            state = 96;
                            continue outer;
                        case  24 :
                            state = 27;
                            continue outer;
                        case  58 :
                            eatText34(value);
                            state = 59;
                            return ;
                        case  72 :
                            state = 75;
                            continue outer;
                        case  6 :
                            state = 9;
                            continue outer;
                        case  37 :
                            eatText35(value);
                            state = 38;
                            return ;
                        case  118 :
                            eatText36(value);
                            state = 119;
                            return ;
                        case  108 :
                            state = 111;
                            continue outer;
                        case  61 :
                            eatText37(value);
                            state = 62;
                            return ;
                        case  88 :
                            eatText38(value);
                            state = 89;
                            return ;
                        case  109 :
                            eatText39(value);
                            state = 110;
                            return ;
                        case  97 :
                            eatText40(value);
                            state = 98;
                            return ;
                        case  69 :
                            state = 72;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _EntryType = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _TotalStartDate = javax.xml.bind.DatatypeConverter.parseDate(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligatedDistributableAmt = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _TotalEndDate = javax.xml.bind.DatatypeConverter.parseDate(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AwardNumber = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligationExpDateModified = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _FinalExpDateModified = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _SequenceNumber = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_SequenceNumber = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _EOMProcess = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_EOMProcess = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _TransactionDate = javax.xml.bind.DatatypeConverter.parseDate(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText11(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedTotalIndirect = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText12(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _FinalExpirationDate = javax.xml.bind.DatatypeConverter.parseDate(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText13(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AccountNumber = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText14(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _TreeLevel = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_TreeLevel = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText15(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedDistributableAmt = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText16(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligatedDistributableAmtModified = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText17(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedTotalAmt = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText18(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _CurrentFundEffectiveDate = javax.xml.bind.DatatypeConverter.parseDate(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText19(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _RemainingAnticipatedAmt = javax.xml.bind.DatatypeConverter.parseDouble(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_RemainingAnticipatedAmt = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText20(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _CurrentFundEffectiveDateModified = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText21(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligatedTotalIndirect = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText22(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _TotalObligatedAmount = javax.xml.bind.DatatypeConverter.parseDouble(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_TotalObligatedAmount = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText23(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AmountSequenceNumber = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_AmountSequenceNumber = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText24(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedChangeDirect = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText25(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _TotalDistributableAmount = javax.xml.bind.DatatypeConverter.parseDouble(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_TotalDistributableAmount = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText26(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedDistributableAmtModified = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText27(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedTotalDirect = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText28(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _TransactionId = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText29(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligatedTotalDirect = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText30(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedTotalAmtModified = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText31(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AmtObligatedToDate = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText32(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligationExpirationDate = javax.xml.bind.DatatypeConverter.parseDate(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText33(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligatedChangeDirect = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText34(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedChange = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText35(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AmtObligatedToDateModified = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText36(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _EnableAwdAntOblDirectIndirectCost = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText37(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligatedChange = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText38(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ChildGrantTotal = javax.xml.bind.DatatypeConverter.parseDouble(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_ChildGrantTotal = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText39(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AnticipatedChangeIndirect = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText40(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ObligatedChangeIndirect = javax.xml.bind.DatatypeConverter.parseDecimal(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
