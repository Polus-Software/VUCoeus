<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:altova="http://www.altova.com" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="clitype fn iso4217 ix java link xbrldi xbrli xlink xs xsi altova">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-149022816" margin-left="0.79in" margin-right="0.79in" page-height="8.50in" page-width="11in">
				<fo:region-body margin-top="0.60in" margin-bottom="0.60in" column-count="1" column-gap="0.50in"/>
			</fo:simple-page-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-149022816" initial-page-number="auto" format="1">
				<fo:flow flow-name="xsl-region-body">
					<fo:block>
						<xsl:for-each select="$XML">
							<fo:block>
								<fo:leader leader-pattern="space"/>
							</fo:block>
							<xsl:for-each select="AwardRootNode">
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table table-layout="fixed" width="100%" border-spacing="0">
									<fo:table-column column-width="0.330in"/>
									<fo:table-column column-width="1.500in"/>
									<fo:table-column column-width="5.140in"/>
									<fo:table-column column-width="0.720in"/>
									<fo:table-column column-width="0.070in"/>
									<fo:table-column column-width="1.010in"/>
									<xsl:variable name="altova:CurrContextGrid_08E26070" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.28in">
												<fo:table-cell number-rows-spanned="5" font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:block-container width="0.250000in" height="1.300000in" overflow="hidden">
															<fo:block-container absolute-position="absolute" top="0.147917in" left="0.158333in" width="15pt" height="1.062500in">
																<fo:block>
																	<fo:instream-foreign-object>
																		<svg:svg width="15pt" height="1.062500in">
																			<svg:line x1="0.031250in" y1="0.031250in" x2="0.031250in" y2="1.031250in" stroke-width="2.250000pt" stroke="black" stroke-linecap="round"/>
																		</svg:svg>
																	</fo:instream-foreign-object>
																</fo:block>
															</fo:block-container>
														</fo:block-container>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="5" font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>MIT Account Number:</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-family="Arial" font-size="large" padding="0" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="MITAccountNumber">
															<xsl:variable name="value-of-template_043E4E38">
																<xsl:apply-templates/>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="contains(string($value-of-template_043E4E38),'&#x200B;')">
																	<fo:block font-family="Arial" font-size="small">
																		<xsl:copy-of select="$value-of-template_043E4E38"/>
																	</fo:block>
																</xsl:when>
																<xsl:otherwise>
																	<fo:inline font-family="Arial" font-size="small">
																		<xsl:copy-of select="$value-of-template_043E4E38"/>
																	</fo:inline>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="right">
														<fo:inline font-weight="bold">
															<xsl:text>Page:</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="right"/>
												</fo:table-cell>
												<fo:table-cell font-family="Arial" font-size="smaller" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:page-number font-family="Arial" font-size="small"/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>PI:</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-family="Arial" font-size="large" padding="0" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="AwardPI">
															<xsl:variable name="value-of-template_043E6258">
																<xsl:apply-templates/>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="contains(string($value-of-template_043E6258),'&#x200B;')">
																	<fo:block font-family="Arial" font-size="small">
																		<xsl:copy-of select="$value-of-template_043E6258"/>
																	</fo:block>
																</xsl:when>
																<xsl:otherwise>
																	<fo:inline font-family="Arial" font-size="small">
																		<xsl:copy-of select="$value-of-template_043E6258"/>
																	</fo:inline>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="right">
														<fo:inline font-weight="bold">
															<xsl:text>Date:</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="right"/>
												</fo:table-cell>
												<fo:table-cell font-family="Arial" font-size="smaller" padding="0" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="AwardDate">
															<fo:inline font-family="Arial" font-size="small">
																<xsl:value-of select="format-number(number(substring(string(string(.)), 6, 2)), '00')"/>
																<xsl:text> / </xsl:text>
																<xsl:value-of select="format-number(number(substring(string(string(.)), 9, 2)), '00')"/>
																<xsl:text> / </xsl:text>
																<xsl:value-of select="format-number(number(substring(string(string(string(.))), 1, 4)), '0000')"/>
															</fo:inline>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell number-columns-spanned="5" font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="2" leader-length="100%"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.30in">
												<fo:table-cell number-columns-spanned="5" font-family="Arial" font-size="small" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-family="Arial" font-size="large" font-weight="bold">
															<xsl:text>&lt;SCHOOL_NAME&gt;</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table table-layout="fixed" width="100%" border-spacing="0">
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_07987330" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-family="Arial" font-size="medium" font-weight="bold">
															<xsl:text>Award Hierarchy</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<xsl:if test="AwardItems">
									<fo:table table-layout="fixed" width="100%" border-spacing="0">
										<fo:table-column column-width="proportional-column-width(1)"/>
										<fo:table-column column-width="0.600in"/>
										<fo:table-column column-width="1.250in"/>
										<fo:table-column column-width="0.750in"/>
										<fo:table-column column-width="1.350in"/>
										<fo:table-column column-width="0.700in"/>
										<fo:table-column column-width="0.100in"/>
										<fo:table-column column-width="0.650in"/>
										<fo:table-column column-width="0.050in"/>
										<fo:table-column column-width="0.130in"/>
										<fo:table-column column-width="0.770in"/>
										<fo:table-column column-width="1.160in"/>
										<xsl:variable name="altova:CurrContextGrid_08E43BE0" select="."/>
										<fo:table-header start-indent="0pt">
											<fo:table-row>
												<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Award No. : Account No</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-weight="bold">
															<xsl:text>Status</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Account Type</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-weight="bold">
															<xsl:text>Sponsor Code</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-weight="bold">
															<xsl:text>PI</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-weight="bold">
															<xsl:text>Lead Unit</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-weight="bold">
															<xsl:text>Total Obligated</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="2" font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-weight="bold">
															<xsl:text>Total Anticipated</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
													<fo:block text-align="center">
														<fo:inline font-weight="bold">
															<xsl:text>Final Expiration Date</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</fo:table-header>
										<fo:table-body start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<xsl:for-each select="AwardItems">
													<fo:table-row>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="left">
																<xsl:for-each select="AwardHierarchy">
																	<fo:inline>
																		<xsl:text>&#160;</xsl:text>
																	</fo:inline>
																</xsl:for-each>
																<xsl:for-each select="AwardHierarchy">
																	<fo:inline>
																		<xsl:text>&#160;</xsl:text>
																	</fo:inline>
																</xsl:for-each>
																<xsl:for-each select="AwardNumber">
																	<xsl:variable name="value-of-template_043E57D8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_043E57D8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_043E57D8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_043E57D8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
																<fo:inline>
																	<xsl:text> : </xsl:text>
																</fo:inline>
																<xsl:for-each select="AccountNumber">
																	<xsl:variable name="value-of-template_043E58B8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_043E58B8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_043E58B8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_043E58B8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="center">
																<xsl:for-each select="Status">
																	<xsl:variable name="value-of-template_043E5998">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_043E5998),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_043E5998"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_043E5998"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="left">
																<xsl:for-each select="AccountType">
																	<xsl:variable name="value-of-template_043E5A78">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_043E5A78),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_043E5A78"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_043E5A78"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="center">
																<xsl:for-each select="SponsorCode">
																	<xsl:variable name="value-of-template_043E5B58">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_043E5B58),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_043E5B58"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_043E5B58"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="center">
																<xsl:for-each select="PI">
																	<xsl:variable name="value-of-template_043E5C38">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_043E5C38),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_043E5C38"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_043E5C38"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="center">
																<xsl:for-each select="LeadUnit">
																	<xsl:variable name="value-of-template_043E5D18">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_043E5D18),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_043E5D18"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_043E5D18"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="right">
																<fo:inline>
																	<xsl:text>$</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="right">
																<xsl:for-each select="TotalObligated">
																	<fo:inline>
																		<xsl:value-of select="format-number(number(string(.)), '###,##0.00')"/>
																	</fo:inline>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="left"/>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="right">
																<fo:inline>
																	<xsl:text>$</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="right">
																<xsl:for-each select="TotalAnticipated">
																	<fo:inline>
																		<xsl:value-of select="format-number(number(string(.)), '###,##0.00')"/>
																	</fo:inline>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell font="9" font-family="Calibri" font-size="x-small" padding="0" display-align="center">
															<fo:block text-align="center">
																<xsl:for-each select="FinalExpirationDate">
																	<fo:inline>
																		<xsl:value-of select="format-number(number(substring(string(string(.)), 9, 2)), '00')"/>
																		<xsl:text> </xsl:text>
																		<xsl:call-template name="DateToMonthName">
																			<xsl:with-param name="sDate" select="string(string(.))"/>
																			<xsl:with-param name="sFormat" select="'short'"/>
																		</xsl:call-template>
																		<xsl:text> </xsl:text>
																		<xsl:value-of select="format-number(number(substring(string(string(string(.))), 1, 4)), '0000')"/>
																	</fo:inline>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:for-each>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows)">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-body>
									</fo:table>
								</xsl:if>
							</xsl:for-each>
							<fo:block/>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="DateToMonthName">
		<xsl:param name="sDate"/>
		<xsl:param name="sFormat"/>
		<xsl:choose>
			<xsl:when test="$sFormat = 'long'">
				<xsl:call-template name="DateToMonthNameLong">
					<xsl:with-param name="sDate" select="$sDate"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="DateToMonthNameShort">
					<xsl:with-param name="sDate" select="$sDate"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DateToMonthNameLong">
		<xsl:param name="sDate"/>
		<xsl:variable name="nMonth">
			<xsl:call-template name="DateToMonthNum">
				<xsl:with-param name="sDate" select="$sDate"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$nMonth = 1">January</xsl:when>
			<xsl:when test="$nMonth = 2">February</xsl:when>
			<xsl:when test="$nMonth = 3">March</xsl:when>
			<xsl:when test="$nMonth = 4">April</xsl:when>
			<xsl:when test="$nMonth = 5">May</xsl:when>
			<xsl:when test="$nMonth = 6">June</xsl:when>
			<xsl:when test="$nMonth = 7">July</xsl:when>
			<xsl:when test="$nMonth = 8">August</xsl:when>
			<xsl:when test="$nMonth = 9">September</xsl:when>
			<xsl:when test="$nMonth = 10">October</xsl:when>
			<xsl:when test="$nMonth = 11">November</xsl:when>
			<xsl:otherwise>December</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DateToMonthNum">
		<xsl:param name="sDate"/>
		<xsl:choose>
			<xsl:when test="starts-with($sDate, '--')">
				<xsl:value-of select="number(substring($sDate, 3, 2))"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number(substring($sDate, 6, 2))"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DateToMonthNameShort">
		<xsl:param name="sDate"/>
		<xsl:variable name="nMonth">
			<xsl:call-template name="DateToMonthNum">
				<xsl:with-param name="sDate" select="$sDate"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$nMonth = 1">Jan</xsl:when>
			<xsl:when test="$nMonth = 2">Feb</xsl:when>
			<xsl:when test="$nMonth = 3">Mar</xsl:when>
			<xsl:when test="$nMonth = 4">Apr</xsl:when>
			<xsl:when test="$nMonth = 5">May</xsl:when>
			<xsl:when test="$nMonth = 6">Jun</xsl:when>
			<xsl:when test="$nMonth = 7">Jul</xsl:when>
			<xsl:when test="$nMonth = 8">Aug</xsl:when>
			<xsl:when test="$nMonth = 9">Sep</xsl:when>
			<xsl:when test="$nMonth = 10">Oct</xsl:when>
			<xsl:when test="$nMonth = 11">Nov</xsl:when>
			<xsl:otherwise>Dec</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
