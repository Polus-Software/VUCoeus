/*
 * @(#)QuestionnaireAnswersForm.java September 29, 2006, 12:37 PM
 *
 * Copyright (c) Massachusetts Institute of Technology
 * 77 Massachusetts Avenue, Cambridge, MA 02139-4307
 * All rights reserved.
 */

/* PMD check performed, and commented unused imports and variables on 03-OCT-2007
 * by Noorul
 */
/*
 * QuestionnaireAnswersForm.java
 *
 * Created on September 29, 2006, 12:37 PM
 */

package edu.mit.coeus.questionnaire.gui;

import edu.mit.coeus.gui.CoeusAppletMDIForm;
//import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.gui.CoeusInternalFrame;
import edu.mit.coeus.gui.menu.CoeusMenu;
import edu.mit.coeus.gui.menu.CoeusMenuItem;
import edu.mit.coeus.gui.toolbar.CoeusToolBarButton;
import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.utils.CoeusTabbedPane;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.event.InternalFrameEvent;

/**
 *
 * @author  tarique
 */
public class QuestionnaireAnswersBaseForm extends CoeusInternalFrame {
    
    /** Creates new form QuestionnaireAnswersForm */
    public CoeusAppletMDIForm mdiForm;
    public CoeusTabbedPane tbdPnQuesAnswer;
    public  CoeusMenuItem inboxMenuItem,closeMenuItem, saveMenuItem,
    changePasswordMenuItem,preferencesMenuItem, 
    /*Added for Case#3682 - Enhancements related to Delegations - Start*/
    delegationsMenuItem,
    /*Added for Case#3682 - Enhancements related to Delegations - End*/
    exitMenuItem,currentLocksMenuItem;
    public CoeusToolBarButton btnSave,btnClose;
    private final String SEPERATOR="seperator";
    private CoeusMenu questionnaireRuleData = null;
    //Code added for coeus4.3 Questionnaire enhancement case#2946
    private CoeusMenu mnuEdit;
    public  CoeusMenuItem startOverMenuItem, modifyMenuItem, printMenuItem;
    public CoeusToolBarButton btnModify,btnStartOver,btnPrint;
    public JPanel pnlQuestionnaire;
    public QuestionnaireAnswersBaseForm(String title,CoeusAppletMDIForm mdiForm) {
        super(title, mdiForm);
        this.mdiForm = mdiForm;
        tbdPnQuesAnswer = new CoeusTabbedPane();
        //Code added for coeus4.3 Questionnaire enhancement case#2946
        //For Questionnaire Question Answer window
        pnlQuestionnaire = new JPanel();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        initComponents();
        setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        
    }
    public void createQuestionnaireFileMenu(){
        
        inboxMenuItem = new CoeusMenuItem("Inbox", null, true, true);
        inboxMenuItem.setMnemonic('I');
        
        closeMenuItem = new CoeusMenuItem("Close", null, true, true);
        closeMenuItem.setMnemonic('C');
        
        saveMenuItem = new CoeusMenuItem("Save", null, true, true);
        saveMenuItem.setMnemonic('S');
        changePasswordMenuItem = new CoeusMenuItem("Change Password", null, true, true);
        changePasswordMenuItem.setMnemonic('p');
        
        currentLocksMenuItem = new CoeusMenuItem("Current Locks",null,true,true);
        currentLocksMenuItem.setMnemonic('L');
        
        //Added for Case#3682 - Enhancements related to Delegations - Start 
        delegationsMenuItem = new CoeusMenuItem("Delegations...", null, true, true);
        delegationsMenuItem.setMnemonic('D');
        //Added for Case#3682 - Enhancements related to Delegations - End
        
        preferencesMenuItem = new CoeusMenuItem("Preferences...", null, true, true);
        preferencesMenuItem.setMnemonic('f');
        
        exitMenuItem = new CoeusMenuItem("Exit", null, true, true);
        exitMenuItem.setMnemonic('x');
        
        //Code added for coeus4.3 Questionnaire enhancement case#2946 - starts
        printMenuItem = new CoeusMenuItem("Print", null, true, true);
        printMenuItem.setMnemonic('r');      
        //Code added for coeus4.3 Questionnaire enhancement case#2946 - ends
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        createQuestionnaireFileMenu();
        createQuestionnaireEditMenu();
        createQuestionnaireAnswerToolBar();
        //Code commented and added for coeus4.3 Questionnaire enhancement case#2946 - starts
        //For Questionnaire Question Answer window
//        getContentPane().add(tbdPnQuesAnswer);
        java.awt.GridBagConstraints gridBagConstraints;
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pnlQuestionnaire.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pnlQuestionnaire, gridBagConstraints);
        pnlQuestionnaire.setLayout(new java.awt.GridBagLayout());
        //Code commented and added for coeus4.3 Questionnaire enhancement case#2946 - ends
    }

    public void saveActiveSheet() {
    }    
    
    public void saveAsActiveSheet() {
    }   
    /**
     * This method is used to add custom tool bar and menu bar to the application
     *  when the internal frame is activated.
     * @param e  InternalFrameEvent which delegates the event. */
    public void internalFrameActivated(InternalFrameEvent e) {
        super.internalFrameActivated( e );
        loadMenus();
    }
    // Activate the internalFrame based on the actionevent. when it is
    //deActivated unLoad the menus
    public void internalFrameDeactivated(InternalFrameEvent e) {
        unloadMenus();
        super.internalFrameDeactivated(e);
    }
    
    // UnLoad the menus from MDIForm
    private void unloadMenus() {
        mdiForm.getCoeusMenuBar().remove(getQuestionnaireFileMenu());
        mdiForm.getCoeusMenuBar().add(mdiForm.getFileMenu(),0);
        //Code added for coeus4.3 Questionnaire enhancement case#2946
        //for edit menu
        mdiForm.getCoeusMenuBar().remove(getQuestionnaireEditMenu());      
    }
    
    private void loadMenus(){
        mdiForm.getCoeusMenuBar().remove(0);
        mdiForm.getCoeusMenuBar().add(getQuestionnaireFileMenu(), 0);
        //Code added for coeus4.3 Questionnaire enhancement case#2946
        //for edit menu
        mdiForm.getCoeusMenuBar().add(getQuestionnaireEditMenu(), 1);        
    }
    
    
    
    public CoeusMenu getQuestionnaireFileMenu() {
        Vector fileChildren = new Vector();
        fileChildren.add(inboxMenuItem);
        fileChildren.add(SEPERATOR);
        //Code added for coeus4.3 Questionnaire enhancement case#2946
        //For adding print menu item
        fileChildren.add(printMenuItem);
        fileChildren.add(SEPERATOR);        
        fileChildren.add(closeMenuItem);
        fileChildren.add(SEPERATOR);
        fileChildren.add(saveMenuItem);
        fileChildren.add(SEPERATOR);
        fileChildren.add(changePasswordMenuItem);
        //Case 2110 Start
        fileChildren.add(SEPERATOR);
        fileChildren.add(currentLocksMenuItem);
        fileChildren.add(SEPERATOR);
        //Case 2110 End
        //Added for Case#3682 - Enhancements related to Delegations - Start 
        fileChildren.add(delegationsMenuItem);
        fileChildren.add(SEPERATOR);
        //Added for Case#3682 - Enhancements related to Delegations - End
        fileChildren.add(preferencesMenuItem);
        fileChildren.add(exitMenuItem);
        if(questionnaireRuleData == null){
            questionnaireRuleData= new CoeusMenu("File", null, fileChildren, true, true);
            questionnaireRuleData.setMnemonic('F');
        }
        
        return questionnaireRuleData;
    }
    public void createQuestionnaireAnswerToolBar() {
        btnClose = new CoeusToolBarButton(new ImageIcon(
        getClass().getClassLoader().getResource(CoeusGuiConstants.CLOSE_ICON)),
        null,"Close");
        
        btnSave = new CoeusToolBarButton(new ImageIcon(
        getClass().getClassLoader().getResource(CoeusGuiConstants.SAVE_ICON)),
        null,"Save");
        
        //Code added for coeus4.3 Questionnaire enhancement case#2946 - starts
        //Toolbar buttons created
        btnModify = new CoeusToolBarButton(new ImageIcon(
        getClass().getClassLoader().getResource(CoeusGuiConstants.EDIT_ICON)),
        null,"Modify Questionnaire");
        
        btnStartOver = new CoeusToolBarButton(new ImageIcon(
        getClass().getClassLoader().getResource(CoeusGuiConstants.RESET_ICON)),
        null,"Start Over Questionnaire");
        
        btnPrint = new CoeusToolBarButton(new ImageIcon(
        getClass().getClassLoader().getResource(CoeusGuiConstants.PRINT_ICON)),
        null,"Print Questionnaire");
        //Code added for coeus4.3 Questionnaire enhancement case#2946 - ends
    }
    
    public JToolBar getToolBar(){
        JToolBar toolBar = new JToolBar();
        //Code added for coeus4.3 Questionnaire enhancement case#2946 - starts
        //Toolbar buttons added
        toolBar.add(btnModify);
        toolBar.add(btnStartOver);
        toolBar.add(btnPrint);
        //Code added for coeus4.3 Questionnaire enhancement case#2946 - ends
        toolBar.add(btnSave);
        toolBar.addSeparator();
        toolBar.add(btnClose);
        return toolBar;
    }
    public void setMenus() {
        setFrameToolBar(getToolBar());
        this.setFrameIcon(mdiForm.getCoeusIcon());
    }
    
    /**
     * Code added for coeus4.3 Questionnaire enhancement case#2946
     * Creating the Edit menu details
     */
    private void createQuestionnaireEditMenu(){
        startOverMenuItem = new CoeusMenuItem("Start Over", null, true, true);
        startOverMenuItem.setMnemonic('R');
        modifyMenuItem = new CoeusMenuItem("Modify", null, true, true);
        modifyMenuItem.setMnemonic('M');
    }
    
    /**
     * Code added for coeus4.3 Questionnaire enhancement case#2946
     * Building childs for the Edit menu
     * @return CoeusMenu
     */
    public CoeusMenu getQuestionnaireEditMenu() {
        Vector editChildren = new Vector();
        editChildren.add(modifyMenuItem);
        editChildren.add(SEPERATOR);
        editChildren.add(startOverMenuItem);
        if(mnuEdit == null){
            mnuEdit= new CoeusMenu("Edit", null, editChildren, true, true);
            mnuEdit.setMnemonic('E');
        }
        return mnuEdit;
    }    
 
}
