/** Copyright (c) Massachusetts Institute of Technology
 * 77 Massachusetts Avenue, Cambridge, MA 02139-4307
 * All rights reserved.
 */

package edu.mit.coeus.award.gui;

import edu.mit.coeus.award.AwardConstants;
import edu.mit.coeus.award.AwardLabelConstants;
import edu.mit.coeus.gui.CoeusDlgWindow;
import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.gui.CoeusMessageResources;
import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.utils.KeyConstants;
import edu.mit.coeus.utils.Utils;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.AbstractAction;
import javax.swing.JCheckBox;

/*
 * AwardDetailSyncForm.java
 *
 * Created on May 05, 2009, 12:14 PM
 * @author keerthyjayaraj
 */
public class AwardDetailSyncForm extends javax.swing.JPanel implements ActionListener {
    
    private CoeusDlgWindow dlgSyncDetails;
    private HashMap hmFieldMap = null;
    private HashMap hmCheckBoxMap = new HashMap();
    private CoeusMessageResources coeusMessageResources;
    private static final String LBL_SYNC_PANEL_BORDER = "awardSyncDetails.3055";
    /** Creates new form AwardDetailSyncForm */
    public AwardDetailSyncForm(HashMap hmFieldMap) {
        this.hmFieldMap = hmFieldMap;
        coeusMessageResources = CoeusMessageResources.getInstance();
        initComponents();
        registerComponents();
        
    }
    
    /**
     * Is used to register the form components
     */
    private void registerComponents() {
        
        GridLayout pnlLayout = new GridLayout(hmFieldMap.size(),1);
        pnlFields.setLayout(pnlLayout);
        Iterator iter = hmFieldMap.keySet().iterator();
        JCheckBox chkSelectOptions = null;
        String key,value;
        while (iter.hasNext()){
            key = iter.next().toString();
            value = getDisplayValue(key);
            chkSelectOptions = new JCheckBox(value,true);
            hmCheckBoxMap.put(key,chkSelectOptions);
            pnlFields.add(chkSelectOptions);
        }
        
        btnCancel.addActionListener(this);
        btnOK.addActionListener(this);
    }
    
    
    private String getDisplayValue(String key){
        
        StringBuffer retValue = new StringBuffer();
        retValue.append("<html>");
        retValue.append(AwardConstants.awardFields.get(key));
        Object value     = hmFieldMap.get(key);
        if(value != null  && !CoeusGuiConstants.EMPTY_STRING.equals(value)){
            retValue.append(" [ <b>");
            retValue.append(value);
            retValue.append("</b> ] ");
        }
        retValue.append("</html>");
        return retValue.toString();
    }
    
    /**
     * Is used to display the form
     */
    public HashMap display() {
        
        dlgSyncDetails = new CoeusDlgWindow(CoeusGuiConstants.getMDIForm(), true);
        dlgSyncDetails.setTitle(AwardLabelConstants.SYNC);
        dlgSyncDetails.getContentPane().add(this);
        dlgSyncDetails.setSize(420, 280);
        dlgSyncDetails.setResizable(false);
        dlgSyncDetails.setLocation(CoeusDlgWindow.CENTER);
        
        dlgSyncDetails.addEscapeKeyListener(new AbstractAction("escPressed"){
            public void actionPerformed(ActionEvent ae){
                performCancelAction();
                return;
            }
        });
        
        dlgSyncDetails.addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent we){
                performCancelAction();
            }
        });
        
        dlgSyncDetails.addComponentListener(
                new ComponentAdapter(){
            public void componentShown(ComponentEvent e){
                btnOK.requestFocusInWindow();
            }
        });
        dlgSyncDetails.setVisible(true);
        return hmFieldMap;
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnGrpSyncMode = new javax.swing.ButtonGroup();
        pnlFields = new javax.swing.JPanel();
        btnOK = new edu.mit.coeus.utils.CoeusButton();
        btnCancel = new edu.mit.coeus.utils.CoeusButton();
        pnlAwardTypes = new javax.swing.JPanel();
        rbtnActive = new javax.swing.JRadioButton();
        rbtnAll = new javax.swing.JRadioButton();
        chkCS = new javax.swing.JCheckBox();
        chkFabE = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        pnlFields.setLayout(null);

        pnlFields.setBorder(javax.swing.BorderFactory.createTitledBorder(null, coeusMessageResources.parseLabelKey(LBL_SYNC_PANEL_BORDER), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, CoeusFontFactory.getLabelFont()));
        pnlFields.setMaximumSize(new java.awt.Dimension(320, 80));
        pnlFields.setMinimumSize(new java.awt.Dimension(320, 80));
        pnlFields.setPreferredSize(new java.awt.Dimension(320, 80));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(pnlFields, gridBagConstraints);

        btnOK.setMnemonic('O');
        btnOK.setText("OK");
        btnOK.setMinimumSize(new java.awt.Dimension(75, 23));
        btnOK.setPreferredSize(new java.awt.Dimension(75, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 3, 5);
        add(btnOK, gridBagConstraints);

        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.setMinimumSize(new java.awt.Dimension(75, 23));
        btnCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        add(btnCancel, gridBagConstraints);

        pnlAwardTypes.setLayout(new java.awt.GridLayout(4, 1, 2, 5));

        pnlAwardTypes.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), coeusMessageResources.parseLabelKey("awardSyncDetails.3051"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, CoeusFontFactory.getLabelFont()));
        pnlAwardTypes.setMaximumSize(new java.awt.Dimension(320, 125));
        pnlAwardTypes.setMinimumSize(new java.awt.Dimension(320, 125));
        pnlAwardTypes.setPreferredSize(new java.awt.Dimension(320, 125));
        btnGrpSyncMode.add(rbtnActive);
        rbtnActive.setFont(CoeusFontFactory.getNormalFont());
        rbtnActive.setSelected(true);
        rbtnActive.setText(coeusMessageResources.parseLabelKey("awardSyncDetails.3053"));
        rbtnActive.setIconTextGap(8);
        pnlAwardTypes.add(rbtnActive);

        btnGrpSyncMode.add(rbtnAll);
        rbtnAll.setFont(CoeusFontFactory.getNormalFont());
        rbtnAll.setText(coeusMessageResources.parseLabelKey("awardSyncDetails.3052"));
        rbtnAll.setIconTextGap(8);
        pnlAwardTypes.add(rbtnAll);
	
	chkFabE.setFont(CoeusFontFactory.getNormalFont());
        chkFabE.setText(coeusMessageResources.parseLabelKey("awardSyncDetails.3056"));
        chkFabE.setIconTextGap(8);
        chkFabE.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pnlAwardTypes.add(chkFabE);

        chkCS.setFont(CoeusFontFactory.getNormalFont());
        chkCS.setText(coeusMessageResources.parseLabelKey("awardSyncDetails.3057"));
        chkCS.setIconTextGap(8);
        chkCS.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pnlAwardTypes.add(chkCS);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(pnlAwardTypes, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    /**
     * Is used to do the necessary action whenever a specific action is performed
     * @param ActionEvent
     */
    public void actionPerformed(ActionEvent ae) {
        Object source =ae.getSource();
        try {
            dlgSyncDetails.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (source.equals(btnCancel)) {
                performCancelAction();
            }else if (source.equals(btnOK)){
                performOKAction();
                dlgSyncDetails.setVisible(false);
            }
        } finally {
            dlgSyncDetails.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    
    private void performOKAction(){
        
        Iterator iter = hmCheckBoxMap.keySet().iterator();
        JCheckBox chkSelectOptions = null;
        Object key = null;
        while (iter.hasNext()){
            key = iter.next();
            chkSelectOptions = (JCheckBox)hmCheckBoxMap.get(key);
            if(!chkSelectOptions.isSelected()){
                hmFieldMap.remove(key);
            }
        }
    }
    
    private void performCancelAction(){
        hmFieldMap.clear();
        dlgSyncDetails.setVisible(false);
    }
    
    public String getSelectedSyncTarget(){
        String syncTarget = null;
        if(rbtnActive.isSelected()){
            syncTarget = AwardConstants.SYNC_ACTIVE_CHILDREN;
        }else if(rbtnAll.isSelected()){
            syncTarget = AwardConstants.SYNC_ALL_CHILDREN;;
        }
        return syncTarget;
    }
    
    public String isIncludeFABE(){
        return (chkFabE.isSelected())?"Y":"N";
    }
    
    public String isIncludeCS(){
        return (chkCS.isSelected())?"Y":"N";
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public edu.mit.coeus.utils.CoeusButton btnCancel;
    public javax.swing.ButtonGroup btnGrpSyncMode;
    public edu.mit.coeus.utils.CoeusButton btnOK;
    public javax.swing.JCheckBox chkCS;
    public javax.swing.JCheckBox chkFabE;
    public javax.swing.JPanel pnlAwardTypes;
    public javax.swing.JPanel pnlFields;
    public javax.swing.JRadioButton rbtnActive;
    public javax.swing.JRadioButton rbtnAll;
    // End of variables declaration//GEN-END:variables
    
}
