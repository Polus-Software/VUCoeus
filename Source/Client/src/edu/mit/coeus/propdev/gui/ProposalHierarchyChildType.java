/*
 * ProposalHierarchyBudgetType.java
 * Copyright (c) Massachusetts Institute of Technology
 * 77 Massachusetts Avenue, Cambridge, MA 02139-4307
 * All rights reserved.
 */
 

package edu.mit.coeus.propdev.gui;

import edu.mit.coeus.brokers.RequesterBean;
import edu.mit.coeus.brokers.ResponderBean;
import edu.mit.coeus.exception.CoeusException;
import edu.mit.coeus.gui.CoeusAppletMDIForm;
import edu.mit.coeus.gui.CoeusDlgWindow;
import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.gui.CoeusMessageResources;
import edu.mit.coeus.propdev.bean.ProposalHierarchyChildTypeBean;
import edu.mit.coeus.utils.AppletServletCommunicator;
import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.utils.CoeusOptionPane;
import edu.mit.coeus.utils.CoeusVector;
import edu.mit.coeus.utils.ComboBoxBean;
import edu.mit.coeus.utils.LimitedPlainDocument;
import edu.mit.coeus.utils.ScreenFocusTraversalPolicy;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import javax.swing.AbstractAction;

/**
 * Class which sub budget and sub project type
 * @author tarique
 */
public class ProposalHierarchyChildType extends javax.swing.JComponent 
                implements ActionListener{
    /** Dialog Window instance */                
    private CoeusDlgWindow dlgPropHieBudType;
    /** Main MDI Form instance */
    private CoeusAppletMDIForm mdiForm= CoeusGuiConstants.getMDIForm();
    /** Title of the dialog window */
    private static final String TITLE = "Select Proposal Hierarchy Child Type";
    /** Width of the dialog window */
    private static final int WIDTH = 320;
    /** Height of the dialog window */
    private static final int HEIGHT = 208;
    /** boolean value to check ok button is pressed or not */
    private boolean okPressed = false;
    /** char for getting proposal hierarchy type */    
    private static final char GET_PROP_HIER_CHILD_TYPE = 'M';
    /** String for connecting servlet */    
    private static final String HIERARCHY_SERVLET = "/ProposalHierarchyServlet";
    /** Empty String */    
    private static final String EMPTY_STRING = "";
    /** Vector has the proposal hierarchy child type */    
    private CoeusVector cvTypeData;
    /** Integer value which has selected type code */
    public int childTypeCode = 1;
    /** Boolean value for checking code table entry*/
    private boolean noCodeTableEntry = false;
    /** Message If no code table exists */
    private static final String NO_CODE_TABLE_ENTRY = "propHierarchy_exceptionCode.1016";
    /** Class for accesing messages from resource file */
    private CoeusMessageResources coeusMessageResources;
    /**
     * Creates new form ProposalHierarchyBudgetType
     * @throws CoeusException if this form generate any exception
     */
    public ProposalHierarchyChildType() throws CoeusException{
        coeusMessageResources = CoeusMessageResources.getInstance();
        initComponents();
        registerComponents();
        postInitComponents();
        getChildTypeCode();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        btnGrpPropHierBudgetType = new javax.swing.ButtonGroup();
        pnlHierarchyType = new javax.swing.JPanel();
        cmbHierarchyType = new edu.mit.coeus.utils.CoeusComboBox();
        scrPnComments = new javax.swing.JScrollPane();
        txtArComments = new javax.swing.JTextArea();
        btnOk = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        pnlHierarchyType.setLayout(new java.awt.GridBagLayout());

        cmbHierarchyType.setMinimumSize(new java.awt.Dimension(175, 19));
        cmbHierarchyType.setPreferredSize(new java.awt.Dimension(175, 19));
        cmbHierarchyType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyTypeItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 3);
        pnlHierarchyType.add(cmbHierarchyType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 5, 5);
        add(pnlHierarchyType, gridBagConstraints);

        scrPnComments.setBorder(new javax.swing.border.TitledBorder(null, "Description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, CoeusFontFactory.getLabelFont()));
        scrPnComments.setMinimumSize(new java.awt.Dimension(310, 120));
        scrPnComments.setPreferredSize(new java.awt.Dimension(310, 120));
        txtArComments.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        txtArComments.setDocument(new LimitedPlainDocument(1000));
        txtArComments.setEditable(false);
        txtArComments.setFont(CoeusFontFactory.getNormalFont());
        txtArComments.setLineWrap(true);
        txtArComments.setWrapStyleWord(true);
        scrPnComments.setViewportView(txtArComments);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 0);
        add(scrPnComments, gridBagConstraints);

        btnOk.setFont(CoeusFontFactory.getLabelFont());
        btnOk.setMnemonic('O');
        btnOk.setText("OK");
        btnOk.setMaximumSize(new java.awt.Dimension(79, 20));
        btnOk.setMinimumSize(new java.awt.Dimension(79, 20));
        btnOk.setPreferredSize(new java.awt.Dimension(79, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(btnOk, gridBagConstraints);

        btnClose.setFont(CoeusFontFactory.getLabelFont());
        btnClose.setMnemonic('C');
        btnClose.setText("Close");
        btnClose.setMargin(new java.awt.Insets(4, 10, 4, 10));
        btnClose.setMaximumSize(new java.awt.Dimension(79, 20));
        btnClose.setMinimumSize(new java.awt.Dimension(79, 20));
        btnClose.setPreferredSize(new java.awt.Dimension(79, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 5, 3);
        add(btnClose, gridBagConstraints);

    }//GEN-END:initComponents

    /**
     *
     * @param evt
     */    
    private void cmbHierarchyTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyTypeItemStateChanged
        if(cvTypeData!=null&&cvTypeData.size() > 0){
            String selItem = cmbHierarchyType.getSelectedItem().toString();
            for(int index = 0; index < cvTypeData.size(); index++){
                ProposalHierarchyChildTypeBean proposalHierarchyChildTypeBean
                        = (ProposalHierarchyChildTypeBean)cvTypeData.get(index);
                if(selItem!=null&&!selItem.equals(EMPTY_STRING)){
                    String desc = proposalHierarchyChildTypeBean.getDescription();
                    if(desc.equals(selItem)){
                        txtArComments.setText(proposalHierarchyChildTypeBean.getComments());
                    }
                }
            }
        }
    }//GEN-LAST:event_cmbHierarchyTypeItemStateChanged
    /** method to register components */
    private void registerComponents(){
        btnOk.addActionListener(this);
        btnClose.addActionListener(this);
        java.awt.Component[] components = {btnOk,btnClose,cmbHierarchyType};
        ScreenFocusTraversalPolicy traversePolicy = new ScreenFocusTraversalPolicy( components );
        setFocusTraversalPolicy(traversePolicy);
        setFocusCycleRoot(true);
    }
    /**
     *method to clean up register listener 
     */
    public void cleanUp() {
        btnOk.removeActionListener(this);
        btnClose.removeActionListener(this);
        childTypeCode = 0;
    }
    /**
     * Method to initialize the dialog
     */
    private void postInitComponents() {
        dlgPropHieBudType = new CoeusDlgWindow(mdiForm);
        dlgPropHieBudType.getContentPane().add(this);
        dlgPropHieBudType.setTitle(TITLE);
        dlgPropHieBudType.setFont(CoeusFontFactory.getLabelFont());
        dlgPropHieBudType.setModal(true);
        dlgPropHieBudType.setResizable(false);
        dlgPropHieBudType.setSize(WIDTH,HEIGHT);
        dlgPropHieBudType.setLocation(CoeusDlgWindow.CENTER);
        
        dlgPropHieBudType.addEscapeKeyListener(
        new AbstractAction("escPressed"){
            public void actionPerformed(ActionEvent ae){
                try{
                    performCloseAction();
                }catch(CoeusException ce){
                    ce.printStackTrace();
                    CoeusOptionPane.showErrorDialog(ce.getMessage());
                    return;
                }
            }
        });
        dlgPropHieBudType.setDefaultCloseOperation(CoeusDlgWindow.DO_NOTHING_ON_CLOSE);
        dlgPropHieBudType.addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent we){
                try{
                    performCloseAction();
                }catch(CoeusException ce){
                    ce.printStackTrace();
                    CoeusOptionPane.showErrorDialog(ce.getMessage());
                    return;
                }
            }
        });
        dlgPropHieBudType.addComponentListener(
        new ComponentAdapter(){
            public void componentShown(ComponentEvent e){
                setWindowFocus();
            }
        });
    }
    /** Method to set Window Focus on opening the form */
    private void setWindowFocus(){
        btnOk.requestFocusInWindow();
    }
    /**
     * Method to display form
     */    
    public int display(){
        if(noCodeTableEntry){
            setOkPressed(false);
            return childTypeCode;
        }
        dlgPropHieBudType.show();
        if(isOkPressed()){
            if(cvTypeData!=null&&cvTypeData.size() > 0){
                String selItem = cmbHierarchyType.getSelectedItem().toString();
                for(int index = 0; index < cvTypeData.size(); index++){
                    ProposalHierarchyChildTypeBean proposalHierarchyChildTypeBean
                    = (ProposalHierarchyChildTypeBean)cvTypeData.get(index);
                    if(selItem!=null&&!selItem.equals(EMPTY_STRING)){
                        String desc = proposalHierarchyChildTypeBean.getDescription();
                        if(desc.equals(selItem)){
                            childTypeCode = proposalHierarchyChildTypeBean.getProposalHierarchyChildCode();
                            return childTypeCode;
                        }
                    }
                }
            }
        }
        return childTypeCode;
    }
    /** Method which perform Ok action on OK Button
     *@throws CoeusException if any exception generate
     */
    private void performOkAction() throws CoeusException{
        setOkPressed(true);
        dlgPropHieBudType.dispose();
        
    }
    /** Method which perform Close action on Close Button
     *@throws CoeusException if any exception generate
     */
    private void performCloseAction() throws CoeusException{
        dlgPropHieBudType.dispose();
    }
    /**
     * Method which perform action on buttons
     * @param e Event for action perfomed
     */
    public void actionPerformed(java.awt.event.ActionEvent e) {
        try{
            Object actionSource = e.getSource();
            if(actionSource == btnOk){
                performOkAction();
            }else if(actionSource == btnClose){
                performCloseAction();
            }
        }catch(CoeusException ce){
            ce.printStackTrace();
            CoeusOptionPane.showErrorDialog(ce.getMessage());
        }
    }
    /**
     *
     * @throws Exception
     * @return
     */
    private HashMap getPropHierChildType() throws Exception{
        String connectTo = CoeusGuiConstants.CONNECTION_URL + HIERARCHY_SERVLET;
        RequesterBean request = new RequesterBean();
        HashMap hmTypeData = null;
        request.setFunctionType(GET_PROP_HIER_CHILD_TYPE);
        AppletServletCommunicator comm = new AppletServletCommunicator(
        connectTo, request);
        comm.send();
        ResponderBean response = comm.getResponse();
        
        if (response.isSuccessfulResponse()){
            hmTypeData = (HashMap)response.getDataObject();
        }else{
            throw new Exception(response.getMessage());
        }
        return hmTypeData;
    }
    /**
     * Method to get proposal hierarchy data and put into combo box
     */
    private void getChildTypeCode(){
        HashMap hmtypeCode = null;
        try{
            hmtypeCode = getPropHierChildType();
            if(hmtypeCode!=null){
                cvTypeData
                = (CoeusVector)hmtypeCode.get(ProposalHierarchyChildTypeBean.class);
                if(cvTypeData!=null&&cvTypeData.size() > 0){
                    for(int index = 0; index < cvTypeData.size(); index++){
                        ProposalHierarchyChildTypeBean proposalHierarchyChildTypeBean
                        = (ProposalHierarchyChildTypeBean)cvTypeData.get(index);
                        cmbHierarchyType.addItem(new ComboBoxBean("",
                        proposalHierarchyChildTypeBean.getDescription()));
                    }
                }else{
                    CoeusOptionPane.showInfoDialog(coeusMessageResources.parseMessageKey(NO_CODE_TABLE_ENTRY));
                    noCodeTableEntry = true;
                    return;
                }
             }
        }catch(Exception ex){
            ex.printStackTrace();
            CoeusOptionPane.showErrorDialog(ex.getMessage());
        }
        
    }
    /**
     * Getter for property okPressed.
     * @return Value of property okPressed.
     */
    public boolean isOkPressed() {
        return okPressed;
    }
    
    /**
     * Setter for property okPressed.
     * @param okPressed New value of property okPressed.
     */
    public void setOkPressed(boolean okPressed) {
        this.okPressed = okPressed;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnClose;
    public javax.swing.ButtonGroup btnGrpPropHierBudgetType;
    public javax.swing.JButton btnOk;
    public edu.mit.coeus.utils.CoeusComboBox cmbHierarchyType;
    public javax.swing.JPanel pnlHierarchyType;
    public javax.swing.JScrollPane scrPnComments;
    public javax.swing.JTextArea txtArComments;
    // End of variables declaration//GEN-END:variables
    
}
