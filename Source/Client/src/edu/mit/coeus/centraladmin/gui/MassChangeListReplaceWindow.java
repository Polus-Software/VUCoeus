/*
 * JPanel.java
 *
 * Created on January 25, 2005, 4:03 PM
 */

package edu.mit.coeus.centraladmin.gui;

import edu.mit.coeus.brokers.RequesterBean;
import edu.mit.coeus.brokers.ResponderBean;
import edu.mit.coeus.centraladmin.bean.MassChangeDataBean;
import edu.mit.coeus.gui.CoeusAppletMDIForm;
import edu.mit.coeus.gui.CoeusDlgWindow;
import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.centraladmin.bean.ModuleBean;
import edu.mit.coeus.centraladmin.bean.PersonTypeBean;
import edu.mit.coeus.exception.CoeusException;
import edu.mit.coeus.gui.CoeusMessageResources;
import edu.mit.coeus.utils.AppletServletCommunicator;
import edu.mit.coeus.utils.CoeusOptionPane;
import edu.mit.coeus.utils.CoeusTabbedPane;
import edu.mit.coeus.utils.CoeusVector;
import edu.mit.coeus.utils.DateUtils;
import edu.mit.coeus.utils.ScreenFocusTraversalPolicy;
import edu.mit.coeus.utils.query.Equals;
import java.awt.Component;
import java.awt.Cursor;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Hashtable;
import javax.swing.AbstractAction;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeListener;

/**
 *
 * @author  nadhgj
 */
public class MassChangeListReplaceWindow extends javax.swing.JComponent 
            implements ActionListener, ItemListener, ChangeListener  {
    
    private CoeusDlgWindow massChangeDlg;
    
    private CoeusAppletMDIForm mdiForm;
    
    /*width of the hierarchy list form*/
    private static final int WIDTH = 680;
    
    /*height of the hierarchy list form*/
    private static final int HEIGHT = 390;
    
    private static final char GET_LIST_DATA = 'B';
    
    private static final char UPDATE_LIST_DATA = 'C';
    
    private static final String GET_SERVLET = "/PersonMassChangeServlet";
    
    private static final String connect = CoeusGuiConstants.CONNECTION_URL + GET_SERVLET;
    
    private ModuleBean moduleBean;
    
    private Hashtable htData,htReplaceData;
    
    private CoeusVector cvModuleData,cvPersonData;
    
    private CoeusVector cvTabForm;
    
    private ShowListReplaceForm showListReplaceForm;
    
    private CoeusTabbedPane tbdPnMassChange;
    
    private String replacePerson,withNewPerson;
    
    private CoeusMessageResources coeusMessageResources;
    
    private boolean replaceForm;
    
    private java.text.SimpleDateFormat dtFormat
    = new java.text.SimpleDateFormat("MMM-dd-yyyy");
    
    private  static final String REQUIRED_DATE_FORMAT = "dd-MMM-yyyy";
    
    private static final String DATE_SEPARATERS = ":/.,|-";
    
    private DateUtils dtUtils = new DateUtils();
    
    private String modules = "";
    
    
    
    String date;
    
//    private String date;
    java.sql.Date sqlDate;
    
    /** Creates new form JPanel */
    public MassChangeListReplaceWindow(CoeusVector cvModuleData, Hashtable htData, CoeusVector cvPersonData, boolean replaceForm) throws CoeusException{
        this.cvModuleData = cvModuleData;
        this.cvPersonData = cvPersonData;
        this.replaceForm = replaceForm;
        this.htReplaceData = htData;
        initComponents();
        registerComponents();
        getMassChangeListData(htData);
        postInitComponents();
    }
    
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        btnClose = new javax.swing.JButton();
        chkSapFeed = new javax.swing.JCheckBox();
        chkSequences = new javax.swing.JCheckBox();
        btnReplace = new javax.swing.JButton();
        pnlModules = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(893, 401));
        setPreferredSize(new java.awt.Dimension(893, 401));
        btnClose.setFont(CoeusFontFactory.getLabelFont());
        btnClose.setMnemonic('C');
        btnClose.setText("Close");
        btnClose.setMaximumSize(new java.awt.Dimension(80, 26));
        btnClose.setMinimumSize(new java.awt.Dimension(80, 26));
        btnClose.setPreferredSize(new java.awt.Dimension(80, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 0);
        add(btnClose, gridBagConstraints);

        chkSapFeed.setFont(CoeusFontFactory.getLabelFont());
        chkSapFeed.setSelected(true);
        chkSapFeed.setText("Mark changed awards for SAP feed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(chkSapFeed, gridBagConstraints);

        chkSequences.setFont(CoeusFontFactory.getLabelFont());
        chkSequences.setSelected(true);
        chkSequences.setText("Mark changes to all sequences");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        add(chkSequences, gridBagConstraints);

        btnReplace.setFont(CoeusFontFactory.getLabelFont());
        btnReplace.setMnemonic('R');
        btnReplace.setText("Replace");
        btnReplace.setMinimumSize(new java.awt.Dimension(80, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(btnReplace, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(pnlModules, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void registerComponents() {
        Component[] component = {btnClose,btnReplace,chkSapFeed,chkSequences};
        
        ScreenFocusTraversalPolicy policy = new ScreenFocusTraversalPolicy(component);
        this.setFocusTraversalPolicy(policy);
        this.setFocusCycleRoot(true);
        chkSequences.addItemListener(this);
        btnClose.addActionListener(this);
        btnReplace.addActionListener(this);
    }
    
    private void getPersonData(CoeusVector cvData) {
        replacePerson = (String)cvData.get(1);
        withNewPerson = (String)cvData.get(3);
    }
    
    private void postInitComponents() {
        coeusMessageResources = CoeusMessageResources.getInstance();
        getPersonData(cvPersonData);
        Equals eqModuleId= new Equals("moduleCode","001");
        CoeusVector data = cvModuleData.filter(eqModuleId);
        
        if(replaceForm)
        chkSapFeed.setVisible(data.size()<=0 ? false : true);
        else
            chkSapFeed.setVisible(false);
        
        btnReplace.setVisible(replaceForm);
        mdiForm = CoeusGuiConstants.getMDIForm();
        cvTabForm = new CoeusVector();
        tbdPnMassChange = new CoeusTabbedPane();
        massChangeDlg = new CoeusDlgWindow(mdiForm, true);
        massChangeDlg.setResizable(false);
        int moduleDataSize = cvModuleData.size();
        boolean showReplaceBtn = false;
        for(int tabCount=0;tabCount<moduleDataSize;tabCount++) {
            moduleBean = (ModuleBean)cvModuleData.get(tabCount);
            String moduleName = moduleBean.getModuleName();
            CoeusVector cvTabData = (CoeusVector)htData.get(moduleBean.getModuleCode());
            if(!showReplaceBtn && cvTabData.size() > 0 )
                showReplaceBtn = true;
            String[] colNames = {moduleName+" No.", "Title"};
            String headerText = replacePerson + " will be replaced by "+ withNewPerson +" in the following "+moduleName.toLowerCase()+"s";
            String footterText = "          " + moduleName + "s will be modified                               "+ dtFormat.format(new Date());
            if(moduleDataSize > 1 && tabCount == moduleDataSize-1)
                modules = modules+" and "+moduleName+"s";
            else if (moduleDataSize == 1)
                modules = moduleName+"s";
            else
                modules = modules+moduleName+"s,";
            
            showListReplaceForm = new ShowListReplaceForm(cvTabData, headerText, footterText,colNames);
            cvTabForm.addElement(showListReplaceForm);
            tbdPnMassChange.add(moduleName, showListReplaceForm);
        }
        btnReplace.setEnabled(showReplaceBtn);
        pnlModules.setPreferredSize(new Dimension(600,350));
        pnlModules.add(tbdPnMassChange);
        massChangeDlg.getContentPane().add(this);
        massChangeDlg.setTitle("Person Mass Change");
        massChangeDlg.setFont(CoeusFontFactory.getLabelFont());
        massChangeDlg.setDefaultCloseOperation(CoeusDlgWindow.DO_NOTHING_ON_CLOSE);
        massChangeDlg.setSize(WIDTH, HEIGHT);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dlgSize = massChangeDlg.getSize();
        massChangeDlg.setLocation(screenSize.width/2 - (dlgSize.width/2),
        screenSize.height/2 - (dlgSize.height/2));
        
        massChangeDlg.addEscapeKeyListener(
        new AbstractAction("escPressed"){
            public void actionPerformed(ActionEvent actionEvent){
                massChangeDlg.dispose();
            }
        });
        massChangeDlg.addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent we){
                massChangeDlg.dispose();
            }
        });
        
        massChangeDlg.addComponentListener(
        new ComponentAdapter(){
            public void componentShown(ComponentEvent e){
                setRequestFocusInThread();
            }
        });
        
        massChangeDlg.show();
    }
    
    public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
        try {
            Object source = actionEvent.getSource();
            massChangeDlg.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            if(source.equals(btnClose)) {
                massChangeDlg.dispose();
            }else if(source.equals(btnReplace)) {
                updateMassChangeListData(htReplaceData);
            }
        }catch(Exception exception) {
            exception.printStackTrace();
        } finally {
            massChangeDlg.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    public void itemStateChanged(java.awt.event.ItemEvent itemEvent) {
        for(int index=0; index<cvTabForm.size(); index++) {
            moduleBean = (ModuleBean)cvModuleData.get(index);
            CoeusVector cvFormData = (CoeusVector)htData.get(moduleBean.getModuleCode());
            if(!chkSequences.isSelected()) {
                Equals operator = new Equals("isCurrentSeq", true);
                cvFormData = cvFormData.filter(operator);
            }
            ((ShowListReplaceForm)cvTabForm.get(index)).setFormData(cvFormData);
        }
    }
    
    private void setRequestFocusInThread() {
        SwingUtilities.invokeLater( new Runnable() {
            public void run() {
                if(replaceForm)
                    btnReplace.requestFocusInWindow();
                else
                    btnClose.requestFocusInWindow();
            }
        });
    }
    
    private void getMassChangeListData(Hashtable data) throws CoeusException{
        RequesterBean requester;
        ResponderBean responder;
        requester = new RequesterBean();
        requester.setFunctionType(GET_LIST_DATA);
        requester.setDataObject(data);
        AppletServletCommunicator comm
        = new AppletServletCommunicator(connect, requester);
        
        comm.send();
        responder = comm.getResponse();
        if(responder!= null){
            if(responder.isSuccessfulResponse()){
                htData = (Hashtable)responder.getDataObject();
            }else{
                throw new CoeusException(responder.getMessage(),0);
            }
        }
    }
    
    private void updateMassChangeListData(Hashtable data) throws CoeusException{
        RequesterBean requester;
        ResponderBean responder;
        requester = new RequesterBean();
        requester.setFunctionType(UPDATE_LIST_DATA);
        data.put("ALL_SEQUENCE",new Boolean(chkSequences.isSelected()));
        requester.setDataObject(data);
        AppletServletCommunicator comm
        = new AppletServletCommunicator(connect, requester);
        htReplaceData.put("LOCK_CHECK", new Boolean(true));
        CoeusVector cvAwardData = (CoeusVector)htData.get("001");
        if(cvAwardData !=null && cvAwardData.size() > 0)
            data.put("MARK_SAP_FEED",new Boolean(chkSapFeed.isSelected()));
        else
            data.put("MARK_SAP_FEED",new Boolean(false));
        int selectedOption = CoeusOptionPane.showQuestionDialog(coeusMessageResources.parseMessageKey("personmasschange_exceptionCode.1007") +
        " "+htReplaceData.get("PERSON_NAME_OLD")+" with "+htReplaceData.get("PERSON_NAME_NEW")+
        " in all "+modules,CoeusOptionPane.OPTION_YES_NO,CoeusOptionPane.DEFAULT_YES);
        if(selectedOption == CoeusOptionPane.SELECTION_YES) {
            comm.send();
            responder = comm.getResponse();
            if(responder!= null){
                if(responder.isSuccessfulResponse()){
                    if( responder.isCloseRequired()) {
                        int selOption = CoeusOptionPane.showQuestionDialog(coeusMessageResources.parseMessageKey("personmasschange_exceptionCode.1006"),
                        CoeusOptionPane.OPTION_YES_NO,CoeusOptionPane.DEFAULT_NO);
                        if(selOption == CoeusOptionPane.SELECTION_NO) {
                            btnReplace.setEnabled(false);
                            return;
                        }
                    }
                    selectedOption = CoeusOptionPane.showQuestionDialog(coeusMessageResources.parseMessageKey("personmasschange_exceptionCode.1008") +
                    "\n"+coeusMessageResources.parseMessageKey("personmasschange_exceptionCode.1009"),CoeusOptionPane.OPTION_YES_NO,CoeusOptionPane.DEFAULT_YES);
                    if(selectedOption == CoeusOptionPane.SELECTION_YES) {
                        updatePersonTypes();
                        data.put("LOCK_CHECK", new Boolean(false));
                        requester.setDataObject(data);
                        comm.send();
                        responder = comm.getResponse();
                        if(responder!= null)
                            if(!responder.isSuccessfulResponse())
                                throw new CoeusException(responder.getMessage(),0);
                    }
                    btnReplace.setEnabled(false);
                } else
                    throw new CoeusException(responder.getMessage(),0);
                
            }
            
        }
    }
    
    private void updatePersonTypes() {
        CoeusVector cvRmvPersons = (CoeusVector)htData.get("RMV_PERSONS");
        CoeusVector cvDat = (CoeusVector)htReplaceData.get(PersonTypeBean.class);
        for(int index=0;index<cvRmvPersons.size();index++) {
           String remPersonType = cvRmvPersons.get(index).toString();
            for (int indx=0;indx<cvDat.size();indx++) {
                PersonTypeBean pTypeBean = (PersonTypeBean)cvDat.get(indx);
                if (remPersonType.equals(pTypeBean.getModuleId())) {
                    cvDat.remove(pTypeBean);
                    indx--;
                }
            }
            
           // Equals eqTypeId= new Equals("typeId",cvRmvPersons.get(index).toString());
//            CoeusVector data = cvDat.filter(eqTypeId);
            //cvDat.removeAll(cvDat.filter(eqTypeId));
        }
    }
    
    public void stateChanged(javax.swing.event.ChangeEvent changeEvent) {
        String moduleName = tbdPnMassChange.getTitleAt(tbdPnMassChange.getSelectedIndex());
        String title = "Mark changed "+moduleName.toLowerCase()+"for SAP feed";
        chkSapFeed.setText(title);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnClose;
    public javax.swing.JButton btnReplace;
    public javax.swing.JCheckBox chkSapFeed;
    public javax.swing.JCheckBox chkSequences;
    public javax.swing.JPanel pnlModules;
    // End of variables declaration//GEN-END:variables
    
}
