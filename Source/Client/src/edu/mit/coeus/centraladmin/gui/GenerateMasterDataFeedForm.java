/*
 * GenerateMasterDataFeedForm.java
 *
 * Created on December 20, 2004, 2:14 PM
 */
/* PMD check performed, and commented unused imports and variables on 27-OCT-2010
 * by Keerthy Jayaraj
 */
package edu.mit.coeus.centraladmin.gui;

/**
 *
 * @author  shijiv
 */

import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.gui.CoeusAppletMDIForm;
import edu.mit.coeus.gui.CoeusDlgWindow;
import edu.mit.coeus.utils.ScreenFocusTraversalPolicy;
import edu.mit.coeus.gui.CoeusMessageResources;
import edu.mit.coeus.utils.CoeusOptionPane;
import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.utils.AppletServletCommunicator;
import edu.mit.coeus.exception.*;
import edu.mit.coeus.utils.query.*;
import edu.mit.coeus.brokers.*;
import edu.mit.coeus.utils.CoeusVector;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.*;
import javax.swing.*;
import java.awt.Color;
import java.awt.Cursor;


public class GenerateMasterDataFeedForm extends javax.swing.JPanel implements ActionListener,KeyListener { 
    
    private static final int WIDTH = 500;
    private static final int HEIGHT = 333;
    private static final String WINDOW_TITLE = "Generate SAP feed";
    private final String BUDGET_SERVLET ="/CentralAdminMaintenanceServlet";
    private static final char INIT_MASTER_DATA ='B';
    private static final char GENERATE_MASTER_DATA ='C';
    private final String connectTo = CoeusGuiConstants.CONNECTION_URL+ BUDGET_SERVLET;
    private static final String PRODUCTION = "Production";
    private static final String TEST = "Test";
    private static final String DEVELOPMENT = "Development";
    private CoeusAppletMDIForm mdiForm;
    private CoeusMessageResources coeusMessageResources;
    private CoeusDlgWindow dlgGenerateMasterData;
    private String selectedTarget;
    private Integer feedCount;
    
    /** Creates new form GenerateMasterDataFeedForm */
    public GenerateMasterDataFeedForm(CoeusAppletMDIForm mdiForm) {
        this.mdiForm = mdiForm;
        coeusMessageResources=CoeusMessageResources.getInstance();
        initComponents();
        postInitComponents();
        registerComponents();
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void postInitComponents() {
        dlgGenerateMasterData = new CoeusDlgWindow(mdiForm);
        dlgGenerateMasterData.setResizable(false);
        dlgGenerateMasterData.setModal(true);
        dlgGenerateMasterData.getContentPane().add(this);
        dlgGenerateMasterData.setFont(CoeusFontFactory.getLabelFont());
        dlgGenerateMasterData.setDefaultCloseOperation(CoeusDlgWindow.DO_NOTHING_ON_CLOSE);
        dlgGenerateMasterData.setSize(WIDTH, HEIGHT);
        dlgGenerateMasterData.setTitle(WINDOW_TITLE); 
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dlgSize = dlgGenerateMasterData.getSize();
        dlgGenerateMasterData.setLocation(screenSize.width/2 - (dlgSize.width/2),
        screenSize.height/2 - (dlgSize.height/2));
        
        dlgGenerateMasterData.addWindowListener(new WindowAdapter(){
            
            public void windowClosing(WindowEvent we){
                performCloseAction();
                return;
            }
        });
        
        dlgGenerateMasterData.addEscapeKeyListener(
        new AbstractAction("escPressed"){
            public void actionPerformed(ActionEvent ae){
                performCloseAction();
                return;
            }
        });
        
        dlgGenerateMasterData.addComponentListener(
        new ComponentAdapter(){
            public void componentShown(ComponentEvent e){
                setWindowFocus();
            }
        });
     }
    
     private void registerComponents() {
         java.awt.Component[] components = {btnGenerateFeed,rdBtnProduction,btnClose};
         ScreenFocusTraversalPolicy traversePolicy = new ScreenFocusTraversalPolicy( components );
         this.setFocusTraversalPolicy(traversePolicy);
         this.setFocusCycleRoot(true);
         
         btnGenerateFeed.addActionListener(this);
         btnClose.addActionListener(this);
         rdBtnProduction.addActionListener(this);
         rdBtnDevelopment.addActionListener(this);
         rdBtnTest.addActionListener(this);
         rdBtnProduction.addKeyListener(this);
         rdBtnDevelopment.addKeyListener(this);
         rdBtnTest.addKeyListener(this);
         
     }
     
     public void actionPerformed(ActionEvent e) {
         Object source = e.getSource();
         if(source.equals(btnGenerateFeed)) {
             performGenerateAction();
         }else if(source.equals(btnClose)) {
             performCloseAction();
         }else if(source.equals(rdBtnDevelopment)) {
             selectedTarget = DEVELOPMENT;
             txtDevelopment.setEditable(true);
             txtDevelopment.setFont(CoeusFontFactory.getLabelFont());
             txtDevelopment.setRequestFocusEnabled(false);
             txtDevelopment.setBackground(Color.yellow);
             txtProduction.setEditable(false);
             txtProduction.setFont(CoeusFontFactory.getNormalFont());
             txtTest.setEditable(false);
             txtTest.setFont(CoeusFontFactory.getNormalFont());
         }else if(source.equals(rdBtnProduction)) {
             selectedTarget = PRODUCTION;
             txtProduction.setEditable(true);
             txtProduction.setFont(CoeusFontFactory.getLabelFont());
             txtProduction.setRequestFocusEnabled(false);
             txtProduction.setBackground(Color.yellow);
             txtTest.setEditable(false);
             txtTest.setFont(CoeusFontFactory.getNormalFont());
             txtDevelopment.setEditable(false);
             txtDevelopment.setFont(CoeusFontFactory.getNormalFont());
         }else if(source.equals(rdBtnTest)) {
             selectedTarget = TEST;
             txtTest.setEditable(true);
             txtTest.setFont(CoeusFontFactory.getLabelFont());
             txtTest.setRequestFocusEnabled(false);
             txtTest.setBackground(Color.yellow);
             txtDevelopment.setEditable(false);
             txtDevelopment.setFont(CoeusFontFactory.getNormalFont());
             txtProduction.setEditable(false);
             txtProduction.setFont(CoeusFontFactory.getNormalFont());
         }
     }
     
     private void performCloseAction() {
         dlgGenerateMasterData.setVisible(false);
     }
     
     private void performGenerateAction() {
         try {
             dlgGenerateMasterData.setCursor(new Cursor(Cursor.WAIT_CURSOR)); 
             generateFeed();
         }catch(CoeusClientException coeusClientException) {
             CoeusOptionPane.showDialog(coeusClientException);
         } finally {
            dlgGenerateMasterData.setCursor(new Cursor(Cursor.DEFAULT_CURSOR)); 
         }
     }
     
     public void display() {
         try{
             initGenerateMasterData();
         }catch(CoeusClientException coeusClientException) {
             CoeusOptionPane.showDialog(coeusClientException);
         }
         dlgGenerateMasterData.setVisible(true);
         
     }
     
     private void generateFeed() throws CoeusClientException {
         try {
             RequesterBean requesterBean = new RequesterBean();
             ResponderBean responderBean = new ResponderBean();
             
             requesterBean.setFunctionType(GENERATE_MASTER_DATA);
             //customElemInfoBean.setAcType(TypeConstants.DELETE_RECORD);
             int pendingFeeds=feedCount.intValue();
             int recordsFed=0;
             checkValidTarget();
             requesterBean.setDataObject(selectedTarget);
             AppletServletCommunicator comm
                     = new AppletServletCommunicator(connectTo, requesterBean);
             
             comm.send();
             responderBean = comm.getResponse();
//			 boolean isErrorOccured = false;
             // Modified error handling with COEUSDEV-563: Award Sync to Parent is not triggering SAP feed
             if(responderBean!= null && responderBean.hasResponse()){
                 CoeusVector cvResponse= (CoeusVector)responderBean.getDataObject();
                 if (cvResponse != null && cvResponse.size() > 0) {
                     String noOfRecords = cvResponse.get(0).toString();
                     if (!("").equals(noOfRecords)) {
                         recordsFed = Integer.parseInt(noOfRecords);
                     }
                     int recordsInError = pendingFeeds - recordsFed;
                     String batch_file = cvResponse.get(1).toString();
                     lblBatchFileValue.setText(batch_file);
                     lblRecordsFedValue.setText(noOfRecords);
                     lblRecordsInErrorValue.setText((new Integer(recordsInError)).toString());
                     btnGenerateFeed.setEnabled(false);
                 } //else {
//                         CoeusOptionPane.showErrorDialog(coeusMessageResources.parseMessageKey("generateSponsorFeedExceptionCode.2051"));
//                     }
//                 } else if (responderBean.getMessage() == null) {
//                     CoeusOptionPane.showErrorDialog(coeusMessageResources.parseMessageKey("generateSponsorFeedExceptionCode.2051"));
//                 }else{
//                     throw new CoeusClientException(responderBean.getMessage(),CoeusClientException.ERROR_MESSAGE);
//
//                 }
             }
             // COEUSDEV-563 : End
         } catch (CoeusClientException coeusClientException) {
             CoeusOptionPane.showDialog(coeusClientException);
             dlgGenerateMasterData.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
             
         } catch (Exception exception){
             CoeusOptionPane.showErrorDialog(exception.getMessage());
             dlgGenerateMasterData.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
         }
     }
     
     private void initGenerateMasterData() throws CoeusClientException{
         RequesterBean requesterBean = new RequesterBean();
         ResponderBean responderBean = new ResponderBean();
         
         
         requesterBean.setFunctionType(INIT_MASTER_DATA);
         AppletServletCommunicator comm
         = new AppletServletCommunicator(connectTo, requesterBean);
         
         comm.send();
         responderBean = comm.getResponse();
         
         if(responderBean!= null){
             if(responderBean.isSuccessfulResponse()){
                 CoeusVector cvInitMasterData = (CoeusVector)responderBean.getDataObjects();
				 if (cvInitMasterData != null && cvInitMasterData.size() > 0) {
					 feedCount = (Integer)cvInitMasterData.get(0);
					 boolean hasTableChanged =((Boolean)cvInitMasterData.get(1)).booleanValue();
					 String development= cvInitMasterData.get(2).toString();
					 String production= cvInitMasterData.get(3).toString();
					 String test= cvInitMasterData.get(4).toString();
					 if(hasTableChanged) {
						 CoeusOptionPane.showErrorDialog(coeusMessageResources.parseMessageKey("generateMasterDataFeedExceptionCode.1801"));
						 btnGenerateFeed.setEnabled(false);
					 }
					 if(feedCount.intValue() <= 0) {
						 btnGenerateFeed.setEnabled(false);
					 }
					 lblPendingFeedCount.setText(feedCount.toString());
					 rdBtnProduction.setSelected(true);
					 selectedTarget = PRODUCTION;
					 txtProduction.setEditable(true);
					 txtProduction.setRequestFocusEnabled(false);
					 txtProduction.setBackground(Color.yellow);
					 txtProduction.setText(production);
					 txtDevelopment.setText(development);
					 txtTest.setText(test);
					 txtDevelopment.setFont(CoeusFontFactory.getNormalFont());
					 txtTest.setFont(CoeusFontFactory.getNormalFont());
				 }
             }else{
                 throw new CoeusClientException(responderBean.getMessage(),CoeusClientException.ERROR_MESSAGE);
             }
         }
     }
     
     private void setWindowFocus() {
         rdBtnProduction.requestFocusInWindow();
     }
     
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        targetDirButtonGrp = new javax.swing.ButtonGroup();
        lblPendingFeeds = new javax.swing.JLabel();
        lblPendingFeedCount = new javax.swing.JLabel();
        btnGenerateFeed = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        pnlTargetDirectory = new javax.swing.JPanel();
        rdBtnProduction = new javax.swing.JRadioButton();
        rdBtnTest = new javax.swing.JRadioButton();
        rdBtnDevelopment = new javax.swing.JRadioButton();
        txtProduction = new edu.mit.coeus.utils.CoeusTextField();
        txtTest = new edu.mit.coeus.utils.CoeusTextField();
        txtDevelopment = new edu.mit.coeus.utils.CoeusTextField();
        pnlFeedDetails = new javax.swing.JPanel();
        lblBatchFile = new javax.swing.JLabel();
        lblRecordsFed = new javax.swing.JLabel();
        lblRecordsInError = new javax.swing.JLabel();
        lblBatchFileValue = new javax.swing.JLabel();
        lblRecordsFedValue = new javax.swing.JLabel();
        lblRecordsInErrorValue = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(382, 314));
        setPreferredSize(new java.awt.Dimension(500, 333));
        lblPendingFeeds.setFont(CoeusFontFactory.getLabelFont());
        lblPendingFeeds.setText("Pending Feeds:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        add(lblPendingFeeds, gridBagConstraints);

        lblPendingFeedCount.setFont(CoeusFontFactory.getLabelFont());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        add(lblPendingFeedCount, gridBagConstraints);

        btnGenerateFeed.setFont(CoeusFontFactory.getLabelFont());
        btnGenerateFeed.setMnemonic('G');
        btnGenerateFeed.setText("Generate Feed");
        btnGenerateFeed.setMaximumSize(new java.awt.Dimension(166, 25));
        btnGenerateFeed.setMinimumSize(new java.awt.Dimension(166, 25));
        btnGenerateFeed.setPreferredSize(new java.awt.Dimension(166, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 7);
        add(btnGenerateFeed, gridBagConstraints);

        btnClose.setFont(CoeusFontFactory.getLabelFont());
        btnClose.setMnemonic('C');
        btnClose.setText("Close");
        btnClose.setMaximumSize(new java.awt.Dimension(166, 25));
        btnClose.setMinimumSize(new java.awt.Dimension(166, 25));
        btnClose.setPreferredSize(new java.awt.Dimension(166, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 7);
        add(btnClose, gridBagConstraints);

        pnlTargetDirectory.setLayout(new java.awt.GridBagLayout());

        pnlTargetDirectory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Target Directory", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, CoeusFontFactory.getLabelFont(), new java.awt.Color(255, 51, 51)));
        pnlTargetDirectory.setMinimumSize(new java.awt.Dimension(376, 88));
        pnlTargetDirectory.setPreferredSize(new java.awt.Dimension(484, 107));
        targetDirButtonGrp.add(rdBtnProduction);
        rdBtnProduction.setFont(CoeusFontFactory.getLabelFont());
        rdBtnProduction.setText(PRODUCTION);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.5;
        pnlTargetDirectory.add(rdBtnProduction, gridBagConstraints);

        targetDirButtonGrp.add(rdBtnTest);
        rdBtnTest.setFont(CoeusFontFactory.getLabelFont());
        rdBtnTest.setText(TEST);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        pnlTargetDirectory.add(rdBtnTest, gridBagConstraints);

        targetDirButtonGrp.add(rdBtnDevelopment);
        rdBtnDevelopment.setFont(CoeusFontFactory.getLabelFont());
        rdBtnDevelopment.setText(DEVELOPMENT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        pnlTargetDirectory.add(rdBtnDevelopment, gridBagConstraints);

        txtProduction.setEditable(false);
        txtProduction.setFont(CoeusFontFactory.getLabelFont());
        txtProduction.setMinimumSize(new java.awt.Dimension(359, 21));
        txtProduction.setPreferredSize(new java.awt.Dimension(414, 21));
        txtProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductionActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        pnlTargetDirectory.add(txtProduction, gridBagConstraints);

        txtTest.setEditable(false);
        txtTest.setFont(CoeusFontFactory.getLabelFont());
        txtTest.setMinimumSize(new java.awt.Dimension(359, 21));
        txtTest.setPreferredSize(new java.awt.Dimension(414, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 3, 0);
        pnlTargetDirectory.add(txtTest, gridBagConstraints);

        txtDevelopment.setEditable(false);
        txtDevelopment.setFont(CoeusFontFactory.getLabelFont());
        txtDevelopment.setMinimumSize(new java.awt.Dimension(359, 21));
        txtDevelopment.setPreferredSize(new java.awt.Dimension(414, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 5, 0);
        pnlTargetDirectory.add(txtDevelopment, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        add(pnlTargetDirectory, gridBagConstraints);

        pnlFeedDetails.setLayout(new java.awt.GridBagLayout());

        pnlFeedDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Feed Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, CoeusFontFactory.getLabelFont()));
        pnlFeedDetails.setMinimumSize(new java.awt.Dimension(376, 88));
        pnlFeedDetails.setPreferredSize(new java.awt.Dimension(484, 107));
        lblBatchFile.setFont(CoeusFontFactory.getLabelFont());
        lblBatchFile.setText("Batch File:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        pnlFeedDetails.add(lblBatchFile, gridBagConstraints);

        lblRecordsFed.setFont(CoeusFontFactory.getLabelFont());
        lblRecordsFed.setText("Records Fed:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        pnlFeedDetails.add(lblRecordsFed, gridBagConstraints);

        lblRecordsInError.setFont(CoeusFontFactory.getLabelFont());
        lblRecordsInError.setText("Records in Error:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        pnlFeedDetails.add(lblRecordsInError, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        pnlFeedDetails.add(lblBatchFileValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 2, 0);
        pnlFeedDetails.add(lblRecordsFedValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        pnlFeedDetails.add(lblRecordsInErrorValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        add(pnlFeedDetails, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void txtProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductionActionPerformed

    public void keyPressed(KeyEvent e) {
        int source=e.getKeyCode();
        if(source == KeyEvent.VK_DOWN) {
            if(selectedTarget.equals(PRODUCTION)) {
                selectedTarget = TEST;
                rdBtnTest.doClick();
            }else if(selectedTarget.equals(TEST)) {
                selectedTarget = DEVELOPMENT;
                rdBtnDevelopment.doClick();
            }else if(selectedTarget.equals(DEVELOPMENT)){
                selectedTarget = PRODUCTION;
                rdBtnProduction.doClick();
            }
        }else if(source == KeyEvent.VK_UP) {
            if(selectedTarget.equals(PRODUCTION)) {
                selectedTarget = DEVELOPMENT;
                rdBtnDevelopment.doClick();
            }else if(selectedTarget.equals(TEST)) {
                selectedTarget = PRODUCTION;
                rdBtnProduction.doClick();
            }else if(selectedTarget.equals(DEVELOPMENT)){
                selectedTarget = TEST;
                rdBtnTest.doClick();
            }
        }
    }
    
    public void keyReleased(KeyEvent e) {
    }
    
    public void keyTyped(KeyEvent e) {
		
    }
    
    /* Method to validate a valid target directory selection
     * @throws CoeusClientException with proper message if the directory selection is invalid.
     *
     */
    private void checkValidTarget() throws CoeusClientException{
        
        if(selectedTarget == null ) {
            throw new CoeusClientException(coeusMessageResources.parseMessageKey("generateMasterDataFeedExceptionCode.1802"),CoeusClientException.WARNING_MESSAGE);
        }else if((PRODUCTION.equals(selectedTarget) && "".equals(txtProduction.getText())) ||
                (TEST.equals(selectedTarget) && "".equals(txtTest.getText())) ||
                (DEVELOPMENT.equals(selectedTarget) && "".equals(txtDevelopment.getText()))){
            throw new CoeusClientException(coeusMessageResources.parseMessageKey("generateSponsorFeedExceptionCode.2051"),CoeusClientException.WARNING_MESSAGE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnClose;
    public javax.swing.JButton btnGenerateFeed;
    public javax.swing.JLabel lblBatchFile;
    public javax.swing.JLabel lblBatchFileValue;
    public javax.swing.JLabel lblPendingFeedCount;
    public javax.swing.JLabel lblPendingFeeds;
    public javax.swing.JLabel lblRecordsFed;
    public javax.swing.JLabel lblRecordsFedValue;
    public javax.swing.JLabel lblRecordsInError;
    public javax.swing.JLabel lblRecordsInErrorValue;
    public javax.swing.JPanel pnlFeedDetails;
    public javax.swing.JPanel pnlTargetDirectory;
    public javax.swing.JRadioButton rdBtnDevelopment;
    public javax.swing.JRadioButton rdBtnProduction;
    public javax.swing.JRadioButton rdBtnTest;
    public javax.swing.ButtonGroup targetDirButtonGrp;
    public edu.mit.coeus.utils.CoeusTextField txtDevelopment;
    public edu.mit.coeus.utils.CoeusTextField txtProduction;
    public edu.mit.coeus.utils.CoeusTextField txtTest;
    // End of variables declaration//GEN-END:variables
    
    
    /* public static void main(String args[]) {
        GenerateMasterDataFeedForm generateMasterDataFeedForm =new GenerateMasterDataFeedForm();
        JFrame frame= new JFrame();
        frame.getContentPane().add(generateMasterDataFeedForm);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 333);
        frame.show();
    }*/
     
    
     
}
