/*
 * @(#)CoeusApplet.java 1.0 7/27/02
 *
 * Copyright (c) Massachusetts Institute of Technology
 * 77 Massachusetts Avenue, Cambridge, MA 02139-4307
 * All rights reserved.
 */

/*
 * UserRoleDetails.java
 *
 * Created on August 4, 2003, 10:16 AM
 */

package edu.mit.coeus.user.gui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.bean.*;
import edu.mit.coeus.user.bean.*;

/** Building child panel and return to the main panel(UserRole)
 *
 * @author  chandrashekara
 */
public class UserRoleDetails extends javax.swing.JComponent {
    
    private Vector userRoleDetails;
    private RoleInfoBean roleInfoBean;
    
    private ImageIcon  activeProposalIcon,inactiveProposalIcon;
    private ImageIcon activeSystemIcon,inactiveSystemIcon;
    private ImageIcon activeAdminIcon,inactiveAdminIcon;
    private ImageIcon activeProtocolIcon,inactiveProtocolIcon;
    private ImageIcon activeIacucIcon,inactiveIacucIcon;
    
    private static final char PROPOSAL_LOWER_CASE = 'p';
    private static final char PROPOSAL_UPPER_CASE = 'P';
    
    private static final char PROTOCOL_LOWER_CASE = 'r';
    private static final char PROTOCOL_UPPER_CASE = 'R';
    
    private static final char ADMIN_LOWER_CASE = 'o';
    private static final char ADMIN_UPPER_CASE = 'O';
    
    private static final char SYSTEM_LOWER_CASE = 's';
    private static final char SYSTEM_UPPER_CASE = 'S';
    
    private static final char IUCUC_LOWER_CASE = 'i';
    private static final char IUCUC_UPPER_CASE = 'I';

    private static final char ACTIVE_LOWER_CASE = 'a';
    private static final char ACTIVE_UPPER_CASE = 'A';
    
    private static final char INACTIVE_LOWER_CASE = 'i';
    private static final char INACTIVE_UPPER_CASE = 'I';
    
    
    
    /** Creates new form UserRoleDetails 
     *@ param Vector of userRole Details. 
     */  
     
    public UserRoleDetails(Vector userRoleDetails) {
        initComponents();
        setRoleInfo(userRoleDetails);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        pnlRef = new javax.swing.JPanel();
        lblUnit = new javax.swing.JLabel();
        pnlChild = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        setMaximumSize(new java.awt.Dimension(400, 310));
        setMinimumSize(new java.awt.Dimension(400, 310));
        setPreferredSize(new java.awt.Dimension(400, 310));
        pnlRef.setLayout(new javax.swing.BoxLayout(pnlRef, javax.swing.BoxLayout.Y_AXIS));

        lblUnit.setText("jLabel1");
        pnlRef.add(lblUnit);

        pnlChild.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        pnlRef.add(pnlChild);

        add(pnlRef, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlChild;
    private javax.swing.JPanel pnlRef;
    private javax.swing.JLabel lblUnit;
    // End of variables declaration//GEN-END:variables
    
    /**
     *This method will initializes UserRoles. This method provides the status,type of a user role
     *@returns vector of user Role details.
     */
    
    public void setRoleInfo(Vector userRoleDetails){
        
        pnlChild.setLayout(new BoxLayout(pnlChild, BoxLayout.Y_AXIS));
        activeProposalIcon = new ImageIcon(getClass().getClassLoader().getResource(
        CoeusGuiConstants.PROP_ACTIVE_ROLE_ICON));
        inactiveProposalIcon = new ImageIcon(getClass().getClassLoader().getResource(
        CoeusGuiConstants.PROP_INACTIVE_ROLE_ICON));
        
        activeSystemIcon = new ImageIcon(getClass().getClassLoader().getResource(
        CoeusGuiConstants.SYSTEM_ACTIVE_ROLE_ICON));
        inactiveSystemIcon = new ImageIcon(getClass().getClassLoader().getResource(
        CoeusGuiConstants.SYSTEM_INACTIVE_ROLE_ICON));
        
        
        activeAdminIcon = new ImageIcon(getClass().getClassLoader().getResource(
        CoeusGuiConstants.ADMIN_ACTIVE_ROLE_ICON));
        
        inactiveAdminIcon = new ImageIcon(getClass().getClassLoader().getResource(
        CoeusGuiConstants.ADMIN_INACTIVE_ROLE_ICON));
        
        activeProtocolIcon = new ImageIcon(getClass().getClassLoader().getResource(
        CoeusGuiConstants.ACTIVE_ROLE_ICON ));
        inactiveProtocolIcon = new ImageIcon(getClass().getClassLoader().getResource(
        CoeusGuiConstants.INACTIVE_ROLE_ICON ));
        
        
        activeIacucIcon = new ImageIcon(
                getClass().getClassLoader().getResource(CoeusGuiConstants.IACUC_ACTIVE_ROLE_ICON));
        
        inactiveIacucIcon = new ImageIcon(
        getClass().getClassLoader().getResource(CoeusGuiConstants.IACUC_IN_ACTIVE_ROLE_ICON));
        
        RoleInfoBean roleInfoBean;
        JLabel lblChild = null;
        int rolesSize = userRoleDetails.size();
        char roleType;
        char status;
        if( rolesSize > 0 ) {
            
            lblUnit.setText("Roles in "+((RoleInfoBean)userRoleDetails.elementAt(0)).getUnitName());
            lblUnit.setFont(CoeusFontFactory.getLabelFont());
            
            for(int index = 0 ; index < rolesSize ; index++ ) {
                roleInfoBean = (RoleInfoBean) userRoleDetails.elementAt( index );
                String roleName = roleInfoBean.getRoleName();
                roleType = roleInfoBean.getRoleType();
                status = roleInfoBean.getStatus();
                lblChild = new JLabel();
                // To create an empty border to display in the panel
                lblChild.setBorder(new javax.swing.border.EmptyBorder(0,30,0,0));
                
                switch(roleType) {
                    case ADMIN_LOWER_CASE:
                    case ADMIN_UPPER_CASE:
                        if(status == ACTIVE_LOWER_CASE || status == ACTIVE_UPPER_CASE) {
                            
                            lblChild.setText(roleName);
                            lblChild.setIcon(activeAdminIcon);
                            lblChild.setIconTextGap(6);
                            pnlChild.add(lblChild);
                                                        
                        }
                        else if(status == INACTIVE_LOWER_CASE || status == INACTIVE_UPPER_CASE) {
                            
                            lblChild.setIcon(inactiveAdminIcon);
                            lblChild.setIconTextGap(6);
                            lblChild.setText(roleName);
                            pnlChild.add(lblChild);
                           
                        }
                        break;
                        
                    case IUCUC_LOWER_CASE:
                    case IUCUC_UPPER_CASE:
                        if(status == ACTIVE_LOWER_CASE || status == ACTIVE_UPPER_CASE) {
                            
                            lblChild.setText(roleName);
                            lblChild.setIcon(activeIacucIcon);
                            lblChild.setIconTextGap(6);
                            pnlChild.add(lblChild);
                                                        
                        }
                        else if(status == INACTIVE_LOWER_CASE || status == INACTIVE_UPPER_CASE) {
                            
                            lblChild.setIcon(inactiveIacucIcon);
                            lblChild.setIconTextGap(6);
                            lblChild.setText(roleName);
                            pnlChild.add(lblChild);
                           
                        }
                        break;
                    case PROPOSAL_LOWER_CASE:
                    case PROPOSAL_UPPER_CASE:
                        if(status == ACTIVE_LOWER_CASE || status == ACTIVE_UPPER_CASE) {
                            
                            lblChild.setText(roleName);
                            lblChild.setIcon(activeProposalIcon);
                            lblChild.setIconTextGap(6);
                            pnlChild.add(lblChild);
                           
                        }
                        else if(status == INACTIVE_LOWER_CASE || status == INACTIVE_UPPER_CASE) {
                            
                            lblChild.setText(roleName);
                            lblChild.setIcon(inactiveProposalIcon);
                            lblChild.setIconTextGap(6);
                            pnlChild.add(lblChild);
                           
                        }
                        break;
                        
                    case PROTOCOL_LOWER_CASE:
                    case PROTOCOL_UPPER_CASE:
                        if(status == ACTIVE_LOWER_CASE || status == ACTIVE_UPPER_CASE) {
                            
                            lblChild.setText(roleName);
                            lblChild.setIcon(activeProtocolIcon);
                            lblChild.setIconTextGap(6);
                            pnlChild.add(lblChild);
                           
                        }
                        else if(status == INACTIVE_LOWER_CASE || status == INACTIVE_UPPER_CASE) {
                            
                            lblChild.setText(roleName);
                            lblChild.setIconTextGap(6);
                            lblChild.setIcon(inactiveProtocolIcon);
                            pnlChild.add(lblChild);
                           
                        }
                        break;
                        
                    case SYSTEM_LOWER_CASE:
                    case SYSTEM_UPPER_CASE:
                        if(status == ACTIVE_LOWER_CASE || status == ACTIVE_UPPER_CASE) {
                            
                            lblChild.setText(roleName);
                            lblChild.setIcon(activeSystemIcon);
                            lblChild.setIconTextGap(6);
                            pnlChild.add(lblChild);
                           
                        }
                        else if(status == INACTIVE_LOWER_CASE || status == INACTIVE_UPPER_CASE) {
                            
                            lblChild.setText(roleName);
                            lblChild.setIcon(inactiveSystemIcon);
                            lblChild.setIconTextGap(6);
                            pnlChild.add(lblChild);
                           
                        }
                        break;
                        
                } //End Switch
            } //End Loop
        }//End if
        
    } //End method
 
   /* return this child panel to the main panel
    */
    public JPanel getChildPanel() {
        return pnlRef;
    }
}
