/*
 * ReviewCommentsForm.java
 *
 * Created on October 20, 2003, 12:11 PM
 */

package edu.mit.coeus.iacuc.gui;

/**
 *
 * @author  sharathk
 */
import edu.mit.coeus.bean.UserInfoBean;
import edu.mit.coeus.gui.URLOpener;
import java.awt.*;
import java.awt.event.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Hashtable;
import java.util.Vector;
import java.util.HashMap;
import javax.swing.*;
import javax.swing.table.*;

import edu.mit.coeus.utils.*;
import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.gui.CoeusDlgWindow;
import edu.mit.coeus.exception.*;
import edu.mit.coeus.gui.CoeusMessageResources;
import edu.mit.coeus.brokers.*;
import edu.mit.coeus.iacuc.bean.*;

/*
 * PMD check performed, and commented unused imports and variables on 14-APR-2011
 * by Maharaja Palanichamy
 */

public class ReviewCommentsForm extends javax.swing.JPanel implements ActionListener{
    
    private CoeusDlgWindow coeusDlgWindow;
    private Frame owner = CoeusGuiConstants.getMDIForm();
    private boolean modal;
    private Vector vecData;
    private Vector vecDeletedBeans;
    
    private String protocolNumber;
    private int submissionNumber, sequenceNumber;
    private String scheduleId;
    private boolean saveToDatabase = true;
    private CoeusMessageResources coeusMessageResources;
    private static final String DEFAULT_SCHEDULE_ID = "9999999998";
    
    private static final String SCHEDULE_MAINTENENCE_SERVLET = "/scheduleMaintSrvlt";
//    private static final String PROTOCOL_SUBMISSION_SERVLET = "/protocolSubSrvlt";
    private static final String TITLE = "Review Comments";
    private static final String COMMENTS = "Comments";
//    private static final String SAVE_CHANGES = "Do you want to save changes?";
    
    private ReviewCommentsTableModel reviewCommentsTableModel;
    private CommentsForm commentsForm;
    
    private static final int MINUTE_ENTRY_TYPE_CODE = 3;
    
    private static final int HEIGHT = 320;
    //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
    //private static final int WIDTH = 640;
    private static final int WIDTH = 750;
    //COEUSQA-2291 : End
    
    // added by ravi to hold the status of locked entry
//    private HashMap hmLocked = new HashMap();
    private boolean dataSaved = false;
    private Vector minutesData;
    private boolean lockSchedule = true;
    private char functionType;
    private boolean saveRequired;
//    private Vector vecToServer;
    private ProtocolSubmissionInfoBean submissionBean;
    private Vector oldData;
    
    //Added by Vyjayanthi for IRB Enhancement - 07/08/2004 - Start
    /** Holds true if user has MAINTAIN_MINUTES right, false otherwise
     */
    private boolean hasMaintainMinutesRight;
    private int selRow;
    private boolean showPrevSelection;
    private HashMap hmScheduleData = new HashMap();    
    private static final String SCHEDULE_ID = "SCHEDULE_ID";
    private static final String PROTOCOL_NUMBER = "PROTOCOL_NUMBER";
    private static final String SUBMISSION_NUMBER = "SUBMISSION_NUMBER";
    private static final String SEQUENCE_NUMBER = "SEQUENCE_NUMBER";
    private boolean refreshRequired;
    //Added by Vyjayanthi for IRB Enhancement - 07/08/2004 - End
    //Added for #2919 Review Comments Printing functionality
     private static final String connect = CoeusGuiConstants.CONNECTION_URL + "/ReportConfigServlet";
    // 3282: Reviewer view of Protocols - Start
    private static final char GET_USER_INFO = 'U';
    //Commented for unused local variabe PMD check
   // private UserInfoBean userInfoBean;
    // 3282: Reviewer view of Protocols - End
   //Added for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
    private static final char GET_PERSON_ID_FOR_USER = 'p';
    private String personId;
    //COEUSQA-2291 : End
    //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - Start
    private ProtocolReviewerAttachmentsForm protocolReviewerAttachmentsForm;
    //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - End
    
    /** Creates new form ReviewCommentsForm */
    public ReviewCommentsForm(boolean modal) {
        this.modal = modal;
        initComponents();
        registerComponents();
        //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
        // 3282: Reviewer view of Protocols
//       userInfoBean = fetchUserDetails();
        personId = getPersonId();
        //COEUSQA-2291 : End
        postInitComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scrPnReviewComments = new javax.swing.JScrollPane();
        tblReviewComments = new javax.swing.JTable();
        btnCancel = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnMoveDown = new javax.swing.JButton();
        btnMoveUp = new javax.swing.JButton();
        lblUpdateTimestamp = new javax.swing.JLabel();
        txtUpdateTimestamp = new edu.mit.coeus.utils.CoeusTextField();
        lblUpdateUser = new javax.swing.JLabel();
        txtUpdateUser = new edu.mit.coeus.utils.CoeusTextField();
        btnPrint = new javax.swing.JButton();
        btnAttachments = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(608, 550));
        setPreferredSize(new java.awt.Dimension(708, 550));
        setRequestFocusEnabled(false);
        scrPnReviewComments.setMinimumSize(new java.awt.Dimension(500, 250));
        scrPnReviewComments.setPreferredSize(new java.awt.Dimension(600, 250));
        tblReviewComments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblReviewComments.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        scrPnReviewComments.setViewportView(tblReviewComments);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(scrPnReviewComments, gridBagConstraints);

        btnCancel.setFont(CoeusFontFactory.getLabelFont());
        btnCancel.setMnemonic('C');
        btnCancel.setText("Close");
        btnCancel.setMaximumSize(new java.awt.Dimension(75, 24));
        btnCancel.setMinimumSize(new java.awt.Dimension(75, 24));
        btnCancel.setPreferredSize(new java.awt.Dimension(75, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(btnCancel, gridBagConstraints);

        btnNew.setFont(CoeusFontFactory.getLabelFont());
        btnNew.setMnemonic('N');
        btnNew.setText("New");
        btnNew.setMaximumSize(new java.awt.Dimension(75, 24));
        btnNew.setMinimumSize(new java.awt.Dimension(75, 24));
        btnNew.setPreferredSize(new java.awt.Dimension(75, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        add(btnNew, gridBagConstraints);

        btnModify.setFont(CoeusFontFactory.getLabelFont());
        btnModify.setMnemonic('M');
        btnModify.setText("Modify");
        btnModify.setMaximumSize(new java.awt.Dimension(75, 24));
        btnModify.setMinimumSize(new java.awt.Dimension(75, 24));
        btnModify.setPreferredSize(new java.awt.Dimension(75, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        add(btnModify, gridBagConstraints);

        btnDelete.setFont(CoeusFontFactory.getLabelFont());
        btnDelete.setMnemonic('D');
        btnDelete.setText("Delete");
        btnDelete.setMaximumSize(new java.awt.Dimension(75, 24));
        btnDelete.setMinimumSize(new java.awt.Dimension(75, 24));
        btnDelete.setPreferredSize(new java.awt.Dimension(75, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        add(btnDelete, gridBagConstraints);

        btnMoveDown.setFont(CoeusFontFactory.getLabelFont());
        btnMoveDown.setMnemonic('W');
        btnMoveDown.setText("Move Down");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        add(btnMoveDown, gridBagConstraints);

        btnMoveUp.setFont(CoeusFontFactory.getLabelFont());
        btnMoveUp.setMnemonic('U');
        btnMoveUp.setText("Move Up");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        add(btnMoveUp, gridBagConstraints);

        lblUpdateTimestamp.setFont(new java.awt.Font("Arial", 1, 11));
        lblUpdateTimestamp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUpdateTimestamp.setText("Last Update:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(lblUpdateTimestamp, gridBagConstraints);

        txtUpdateTimestamp.setMinimumSize(new java.awt.Dimension(140, 21));
        txtUpdateTimestamp.setPreferredSize(new java.awt.Dimension(140, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 80, 3, 0);
        add(txtUpdateTimestamp, gridBagConstraints);

        lblUpdateUser.setFont(new java.awt.Font("Arial", 1, 11));
        lblUpdateUser.setText("Update User: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 169);
        add(lblUpdateUser, gridBagConstraints);

        txtUpdateUser.setMaximumSize(new java.awt.Dimension(142, 21));
        txtUpdateUser.setMinimumSize(new java.awt.Dimension(142, 21));
        txtUpdateUser.setPreferredSize(new java.awt.Dimension(142, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 20);
        add(txtUpdateUser, gridBagConstraints);

        btnPrint.setFont(CoeusFontFactory.getLabelFont());
        btnPrint.setMnemonic('P');
        btnPrint.setText("Print");
        btnPrint.setMaximumSize(new java.awt.Dimension(89, 23));
        btnPrint.setMinimumSize(new java.awt.Dimension(89, 23));
        btnPrint.setPreferredSize(new java.awt.Dimension(89, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        add(btnPrint, gridBagConstraints);

        btnAttachments.setFont(CoeusFontFactory.getLabelFont());
        btnAttachments.setText("Attachments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        add(btnAttachments, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    public void postInitComponents() {
        
        //Code for focus traversal - start
        
        //Ordering Review Comments Enhancment Start 1
        //java.awt.Component[] components = { tblReviewComments, btnCancel, btnNew, btnModify, btnDelete};//btnOk commented by Vyjayanthi for IRB Enhancement - 07/08/2004
        //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - Start
        /*java.awt.Component[] components = { tblReviewComments, btnCancel, btnNew, btnModify ,
                                            btnDelete, btnMoveUp , btnMoveDown, btnPrint };//btnPrint added for Case #2919 Review Comments printing*/
        
        java.awt.Component[] components = { tblReviewComments, btnCancel, btnNew, btnModify ,
                                            btnDelete, btnMoveUp , btnMoveDown, btnPrint, btnAttachments };
        //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - End
        //Ordering Review Comments Enhancment End 1
                                            
        ScreenFocusTraversalPolicy  traversePolicy = new ScreenFocusTraversalPolicy( components );
        setFocusTraversalPolicy(traversePolicy);
        setFocusCycleRoot(true);
        //Code for focus traversal - end
        
        commentsForm = new CommentsForm(true);
        commentsForm.setReviewCommentsForm(this);
        commentsForm.setTitle(COMMENTS);
         //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
        // 3282: Reviewer view of Protocols
        //commentsForm.setUserInfoBean(userInfoBean);
        commentsForm.setPersonId(personId);
        //COEUSQA-2291 : End
        
        coeusMessageResources = CoeusMessageResources.getInstance();
        //Setting up table
        reviewCommentsTableModel = new ReviewCommentsTableModel();
        tblReviewComments.setModel(reviewCommentsTableModel);
        tblReviewComments.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblReviewComments.getTableHeader().setReorderingAllowed(false);
        tblReviewComments.getTableHeader().setFont(CoeusFontFactory.getLabelFont());
        tblReviewComments.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent me){
                // 3282: Reviewer view of Protocols - Start
                int selectedRow = tblReviewComments.getSelectedRow();
                if(selectedRow == -1) {
                    return ;
                }
                MinuteEntryInfoBean minuteEntryInfoBean = (MinuteEntryInfoBean)vecData.get(selectedRow);
                txtUpdateUser.setText(minuteEntryInfoBean.getUpdateUserName());
                java.sql.Timestamp updateTimestamp = minuteEntryInfoBean.getUpdateTimestamp();
                if(updateTimestamp != null){
                    txtUpdateTimestamp.setText(CoeusDateFormat.format(
                            updateTimestamp.toString()));
                }

                if( me.getClickCount() == 2 ) {
//                    int selectedRow = tblReviewComments.getSelectedRow();
//                    if(selectedRow == -1) {
//                        return ;
//                    }
//                    MinuteEntryInfoBean minuteEntryInfoBean = (MinuteEntryInfoBean)vecData.get(selectedRow);
                    // 3282: Reviewer view of Protocols - End
                    commentsForm.reset();
                    commentsForm.setFormData(minuteEntryInfoBean);
                    commentsForm.setFunctionType(CoeusGuiConstants.DISPLAY_MODE);
                    commentsForm.display();
                
                }
            }
        });
        
        //setting column widths
        // 3282: Reviewer View of Protocol materials - Start
//        int colWidth[] = {420, 70};
        int colWidth[] = {390, 50, 60};
        // 3282: Reviewer View of Protocol materials - End
        TableColumn tableColumn;
        for(int column=0; column < colWidth.length; column++) {
            tableColumn = tblReviewComments.getColumnModel().getColumn(column);
            tableColumn.setPreferredWidth(colWidth[column]);
        }
        
        coeusDlgWindow = new CoeusDlgWindow(owner, modal);
        coeusDlgWindow.getContentPane().add(this);
        coeusDlgWindow.setSize(WIDTH, HEIGHT);
        coeusDlgWindow.setResizable(false);
        coeusDlgWindow.setLocation(CoeusDlgWindow.CENTER);
        coeusDlgWindow.setTitle(TITLE);
        coeusDlgWindow.addWindowListener(new WindowAdapter(){
            public void windowActivated(WindowEvent we){
                requestDefaultFocusForComponent();
            }
            public void windowClosing(WindowEvent we){
                performWindowClosing();
            }
        });
        coeusDlgWindow.addEscapeKeyListener(
            new AbstractAction("escPressed"){
                public void actionPerformed(ActionEvent ae){
                    performWindowClosing();
                }
        });
    }
    private void requestDefaultFocusForComponent(){
        if( functionType == TypeConstants.MODIFY_MODE ) {
            btnNew.requestFocusInWindow();
        }else{
            btnCancel.requestFocusInWindow();
        }
    }
    
    
    public void display() {
        if( tblReviewComments.getRowCount() == 0){
            btnModify.setEnabled(false);
            btnDelete.setEnabled(false);
            
            //Ordering Review Comments Enhancment Start 2
            btnMoveUp.setEnabled(false);
            btnMoveDown.setEnabled(false);
            //Ordering Review Comments Enhancment End 2
                       
        }else{
            tblReviewComments.setRowSelectionInterval(0,0); //Added by Vyjayanthi 13/01/2004
            
            //Added by Vyjayanthi for IRB Enhancement - 11/08/2004 - Start
            //To set the selection to the previously selected row
            if( showPrevSelection ){
                setRowSelection();
                showPrevSelection = false;
            }
            //Added by Vyjayanthi for IRB Enhancement - 11/08/2004 - End
            
            btnModify.setEnabled(true);
            
            //Ordering Review Comments Enhancment Start 3
            if(functionType != TypeConstants.DISPLAY_MODE){
                if(tblReviewComments.getRowCount() == 1){
                    btnMoveUp.setEnabled(false);
                    btnMoveDown.setEnabled(false);
                }else{
                    btnMoveUp.setEnabled(true);
                    btnMoveDown.setEnabled(true);
                }
            }
            //Ordering Review Comments Enhancment End 3
            
            if(functionType == CoeusGuiConstants.DISPLAY_MODE){     
                
                //Modified by Vyjayanthi - 07/08/2004 for IRB Enhancement
                //To enable/disable Delete button based on MAINTAIN_MINUTES right
                btnDelete.setEnabled(hasMaintainMinutesRight);
            }
            else{
                btnDelete.setEnabled(true);
            }            
        }
        
        // 3282: Reviewer view of Protocols - Start
        txtUpdateTimestamp.setEnabled(false);
        txtUpdateUser.setEnabled(false);
        txtUpdateTimestamp.setText("");
        txtUpdateUser.setText("");
        int selectedRow = tblReviewComments.getSelectedRow();
        if(selectedRow != -1) {
            MinuteEntryInfoBean minuteEntryInfoBean = (MinuteEntryInfoBean)vecData.get(selectedRow);
            txtUpdateUser.setText(minuteEntryInfoBean.getUpdateUserName());
            java.sql.Timestamp updateTimestamp = minuteEntryInfoBean.getUpdateTimestamp();
            if(updateTimestamp != null){
                txtUpdateTimestamp.setText(CoeusDateFormat.format(
                        updateTimestamp.toString()));
            }
        }
        // 3282: Reviewer view of Protocols - End
        coeusDlgWindow.setLocation(CoeusDlgWindow.CENTER);
        coeusDlgWindow.setVisible(true);
    }
     
    public void setTitle(String title) {
        //coeusDlgWindow.setTitle(title);
        coeusDlgWindow.setTitle(TITLE);
    }
    
    public void setFormData(ProtocolSubmissionInfoBean submissionBean, Vector data) 
        throws Exception {
        this.submissionBean = submissionBean;
        if(submissionBean.getScheduleId() != null && !submissionBean.getScheduleId().equals("")){
            scheduleId = submissionBean.getScheduleId();
        }else {
            scheduleId = DEFAULT_SCHEDULE_ID;
        }
        
        //Added by Vyjayanthi for IRB Enhancement - 10/08/2004
        //To set the schedule id required for saving in Comments Form
        hmScheduleData.put(SCHEDULE_ID, scheduleId);
        
        vecData = data; 
        if( vecData == null ) {
            vecData = new Vector();
            /** Setting the required data items.
             */
            this.protocolNumber = submissionBean.getProtocolNumber();
            this.submissionNumber = submissionBean.getSubmissionNumber();
            this.sequenceNumber = submissionBean.getSequenceNumber();
            
        }else if( vecData.size() > 0 ) {
            MinuteEntryInfoBean entryBean = (MinuteEntryInfoBean)vecData.elementAt(0);
            this.protocolNumber = entryBean.getProtocolNumber();
            this.submissionNumber = entryBean.getSubmissionNumber();
            this.sequenceNumber = entryBean.getSequenceNumber();
            setTitle(protocolNumber +" : "+ submissionNumber);
        }
        
        //Added by Vyjayanthi for IRB Enhancement - 10/08/2004 - Start
        //To set the protocol number, submission number, sequence number
        //required for saving in Comments Form
        hmScheduleData.put(PROTOCOL_NUMBER, protocolNumber);
        hmScheduleData.put(SUBMISSION_NUMBER, new Integer(submissionNumber));
        hmScheduleData.put(SEQUENCE_NUMBER, new Integer(sequenceNumber));
        resetColumnSizes();
        //Added by Vyjayanthi for IRB Enhancement - 10/08/2004 - End
        
        if( lockSchedule && scheduleId != DEFAULT_SCHEDULE_ID ) {
            //Modified by Vyjayanthi for IRB Enhancement - 10/08/2004
            //To lock schedule initially
            if( !refreshRequired ){
//                lockSchedule(scheduleId);
            }
        }
        oldData = (Vector)ObjectCloner.deepCopy(vecData);
        
        if(vecDeletedBeans != null){
            vecDeletedBeans.removeAllElements();
        }
        
        //removing deleted beans and adding to vecDeleted beans.
        MinuteEntryInfoBean entryBean;
        for(int index = 0; index < vecData.size(); index++) {
            entryBean = (MinuteEntryInfoBean)vecData.elementAt(index);
            if(entryBean.getAcType() != null && entryBean.getAcType().equals(TypeConstants.DELETE_RECORD)) {
                vecDeletedBeans.add(entryBean);
                vecData.remove(index);
                index--;
            }
        }
        
        
        reviewCommentsTableModel.setData(vecData);
        reviewCommentsTableModel.fireTableDataChanged();
        reviewCommentsTableModel.fireTableRowsUpdated(0, vecData.size()-1);
        //System.out.println("Got Response");
        
    }
    
    public void setFormData(String protocolNumber, int submissionNumber, 
            int sequenceNumber) throws Exception{
        this.protocolNumber = protocolNumber;
        this.submissionNumber = submissionNumber;
        this.sequenceNumber = sequenceNumber;
        
        //Added by Vyjayanthi for IRB Enhancement - 10/08/2004 - Start
        //To set the protocol number, submission number, sequence number
        //required for saving in Comments Form
        hmScheduleData.put(PROTOCOL_NUMBER, protocolNumber);
        hmScheduleData.put(SUBMISSION_NUMBER, new Integer(submissionNumber));
        hmScheduleData.put(SEQUENCE_NUMBER, new Integer(sequenceNumber));
        resetColumnSizes();
        //Added by Vyjayanthi for IRB Enhancement - 10/08/2004 - End
        
        setTitle(protocolNumber +" : "+ submissionNumber);
        
        reviewCommentsTableModel.reset();
        
        ProtocolSubmissionInfoBean protocolSubmissionInfoBean = new ProtocolSubmissionInfoBean();
        protocolSubmissionInfoBean.setProtocolNumber(protocolNumber);
        protocolSubmissionInfoBean.setSubmissionNumber(submissionNumber);
        RequesterBean requesterBean = new RequesterBean();
        requesterBean.setDataObject(protocolSubmissionInfoBean);
        requesterBean.setFunctionType('r');
        
        AppletServletCommunicator appletServletCommunicator = new AppletServletCommunicator();
        appletServletCommunicator.setConnectTo(CoeusGuiConstants.CONNECTION_URL + SCHEDULE_MAINTENENCE_SERVLET);
        appletServletCommunicator.setRequest(requesterBean);
        appletServletCommunicator.send();
        
        ResponderBean responderBean = appletServletCommunicator.getResponse();
        if(! responderBean.isSuccessfulResponse()){
            return ;
        }
        
        vecData = responderBean.getDataObjects();
        
        protocolSubmissionInfoBean = (ProtocolSubmissionInfoBean)vecData.get(0);
        vecData = (Vector)vecData.get(1);
        this.submissionBean = protocolSubmissionInfoBean;
        if(vecData == null) {
            vecData = new Vector();
        }
        oldData = (Vector)ObjectCloner.deepCopy(vecData);
        //schedule ID
        /*MinuteEntryInfoBean minuteEntryInfoBean = null;
        for(int index = 0; index < vecData.size(); index++) {
            minuteEntryInfoBean = (MinuteEntryInfoBean)vecData.get(index);
            if(minuteEntryInfoBean.getScheduleId()!=null &&  ! (minuteEntryInfoBean.getScheduleId().equals(scheduleId))) {
                scheduleId = minuteEntryInfoBean.getScheduleId();
                break;
            }
        }*/
        
        if(protocolSubmissionInfoBean!= null && protocolSubmissionInfoBean.getScheduleId() != null){
            scheduleId = protocolSubmissionInfoBean.getScheduleId();
        }else {
            scheduleId = DEFAULT_SCHEDULE_ID;
        }
        
        //Added by Vyjayanthi for IRB Enhancement - 10/08/2004
        //To set the schedule id required for saving in Comments Form
        hmScheduleData.put(SCHEDULE_ID, scheduleId);
        
        if( lockSchedule && scheduleId != DEFAULT_SCHEDULE_ID ) {
        
            //Modified by Vyjayanthi for IRB Enhancement - 10/08/2004
            //To lock schedule initially
            if( !refreshRequired ){
        //     lockSchedule(scheduleId);
            }
        }
        
        reviewCommentsTableModel.setData(vecData);
        reviewCommentsTableModel.fireTableDataChanged();
        reviewCommentsTableModel.fireTableRowsUpdated(0, vecData.size()-1);
        //System.out.println("Got Response");
        
        if(vecDeletedBeans != null){
            vecDeletedBeans.removeAllElements();
        }        
        
    }
    
//    private void lockSchedule( String scheduleId )  throws Exception{
//
//        String connectTo = CoeusGuiConstants.CONNECTION_URL + "/scheduleMaintSrvlt";
//        
//        // connect to the database and get the Schedule Details for the given
//        //schedule id
//        RequesterBean request = new RequesterBean();
//        request.setFunctionType(TypeConstants.MODIFY_MODE);
//        request.setId(scheduleId);
//        AppletServletCommunicator comm = new AppletServletCommunicator(
//        connectTo, request);
//        comm.send();
//        ResponderBean response = comm.getResponse();
//        if (!response.isSuccessfulResponse() && response.isLocked()) {
//            throw new Exception(coeusMessageResources.parseMessageKey(
//                "reviewCommentsEditLock_exceptionCode.3103"));
//        }
//        
//    }
    public void setFunctionType(char mode) {
        functionType = mode;
        if(mode == TypeConstants.DISPLAY_MODE) {
            //Modified by Vyjayanthi for IRB Enhancement
            //To set the following properties in Display mode only if user does 
            //not have Maintain Minutes right
            if( !hasMaintainMinutesRight ){
                btnDelete.setEnabled(false);
                btnModify.setText("Display");
                btnModify.setMnemonic('i');
                btnNew.setEnabled(false);
                
                //Ordering Review Comments Enhancment Start 4
                btnMoveUp.setEnabled(false);
                btnMoveDown.setEnabled(false);
                //Ordering Review Comments Enhancment End 4
            }
            
            //If this window is opened from schedule details window and the 
            //schedule details window was opened in Display mode, New, Modify 
            //and Delete buttons will be enabled only if the user has MAINTAIN_MINUTES right
            if( hasMaintainMinutesRight ){
                btnNew.setEnabled(true);
                btnModify.setEnabled(true);
                btnDelete.setEnabled(true);
                
                //Ordering Review Comments Enhancment Start 5
                btnMoveUp.setEnabled(true);
                btnMoveDown.setEnabled(true);
                //Ordering Review Comments Enhancment End 5
            
            }
            
            
            //Commented by Vyjayanthi for IRB Enhancement - 07/08/2004
            //btnOk.setEnabled(false);
            
            tblReviewComments.setBackground((Color)UIManager.getDefaults().get("Panel.background"));
        }else if(mode == TypeConstants.MODIFY_MODE){
            btnDelete.setEnabled(true);
//            btnModify.setEnabled(true);
            btnModify.setText("Modify");
            btnModify.setMnemonic('M');
            btnNew.setEnabled(true);
            
            //Ordering Review Comments Enhancment Start 6
            btnMoveUp.setEnabled(true);
            btnMoveDown.setEnabled(true);
            //Ordering Review Comments Enhancment End 6
            
            //Commented by Vyjayanthi for IRB Enhancement - 07/08/2004
            //btnOk.setEnabled(true);
            
            tblReviewComments.setBackground(Color.white);
        }
    }
    
    public char getFunctionType(){
        return functionType;
    }
    private void registerComponents() {
        btnCancel.addActionListener(this);
        btnDelete.addActionListener(this);
        btnModify.addActionListener(this);
        btnNew.addActionListener(this);
        
        //Commented by Vyjayanthi for IRB Enhancement - 07/08/2004
        //btnOk.addActionListener(this);
        
        //Ordering Review Comments Enhancment Start 7
        btnMoveUp.addActionListener(this);
        btnMoveDown.addActionListener(this);
        //Ordering Review Comments Enhancment End 7
        //Case #2919 Added for Printing Review Comments Coeus4.3 Enhancement
        //Print functionality is not implemented
//        btnPrint.setEnabled(false);
        btnPrint.addActionListener(this);
        //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - Start
        btnAttachments.addActionListener(this);
        //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - End
    }
    
    public void setSaveToDatabase(boolean saveToDatabase) {
        this.saveToDatabase = saveToDatabase;
    }
    
    public Vector getData() {
        //return vecData; //Commented by sharath since this doesn't return deleted beans.
        //return vecToServer; 
        //Added so as to send deleted as well as non modified beans.
        if(vecDeletedBeans != null && vecDeletedBeans.size() > 0) {
            for(int index = 0; index < vecDeletedBeans.size(); index++) {
                vecData.add(vecDeletedBeans.get(index));
            }
        }
        
        return vecData;
    }
    
    public ProtocolSubmissionInfoBean getSubmissionDetails() {
        return submissionBean;
    }
    public void setRow(MinuteEntryInfoBean minuteEntryInfoBean) {
        if(minuteEntryInfoBean.getAcType().equals(TypeConstants.INSERT_RECORD)) {
            
            minuteEntryInfoBean.setScheduleId(scheduleId);
            minuteEntryInfoBean.setProtocolNumber(protocolNumber);
            minuteEntryInfoBean.setSubmissionNumber(submissionNumber);
            minuteEntryInfoBean.setSequenceNumber(sequenceNumber);
            minuteEntryInfoBean.setMinuteEntryTypeCode(MINUTE_ENTRY_TYPE_CODE);
//            minuteEntryInfoBean.setEntryNumber(vecData.size() + 1);
            if( commentsForm.getFunctionType()  == CoeusGuiConstants.ADD_MODE ) { 
                vecData.add(minuteEntryInfoBean);
            }else{
                int selectedRow = tblReviewComments.getSelectedRow();
                vecData.set(selectedRow, minuteEntryInfoBean);
            }
            
            if(vecData.size() == 1) {
                //setting column widths
                // 3282: Reviewer View of Protocol materials - Start
                // int colWidth[] = {420,25};
                int colWidth[] = {395, 25, 35};
                // 3282: Reviewer View of Protocol materials - End
                TableColumn tableColumn;
                for(int column=0; column < colWidth.length; column++) {
                    tableColumn = tblReviewComments.getColumnModel().getColumn(column);
                    tableColumn.setPreferredWidth(colWidth[column]);
                }
            }
            
            reviewCommentsTableModel.fireTableRowsInserted(vecData.size() - 1, vecData.size() -1);
            tblReviewComments.setRowSelectionInterval(vecData.size() - 1, vecData.size() - 1);
        }else if(minuteEntryInfoBean.getAcType().equals(TypeConstants.UPDATE_RECORD)){
            int selectedRow = tblReviewComments.getSelectedRow();
            vecData.set(selectedRow, minuteEntryInfoBean);
            reviewCommentsTableModel.fireTableRowsInserted(selectedRow, selectedRow);
            tblReviewComments.setRowSelectionInterval(selectedRow, selectedRow);
        }
    }

    //Added by Vyjayanthi - 11/08/2004 for IRB Enhancement
    /** Set the row selection in the table
     */
    public void setRowSelection() {
        if( selRow != -1 ){
            tblReviewComments.setRowSelectionInterval(selRow, selRow);
        }
    }
    
    private void performWindowClosing(){
        //Commented by Vyjayanthi - 07/08/2004 for IRB Enhancement
        //Since saving to database is directly done in the Comments screen
        /*
        boolean releaseLock = false;
        RequesterBean requesterBean = new RequesterBean();
        vecToServer = new Vector();
        MinuteEntryInfoBean minuteEntryInfoBean;
        for(int index = 0; index < vecData.size(); index++) {
            minuteEntryInfoBean = (MinuteEntryInfoBean)vecData.get(index);
            if(minuteEntryInfoBean.getAcType() != null){
                vecToServer.add(minuteEntryInfoBean);
            }
        }
        if(vecToServer.size() > 0 || (vecDeletedBeans != null && vecDeletedBeans.size() > 0)) {
            int selection = CoeusOptionPane.showQuestionDialog(SAVE_CHANGES, CoeusOptionPane.OPTION_YES_NO_CANCEL, CoeusOptionPane.DEFAULT_YES);            
            if(selection == CoeusOptionPane.SELECTION_YES) {
                save();
                return ;
            }else if(selection == CoeusOptionPane.SELECTION_NO) {
                vecData = oldData;
                saveRequired = false;
                releaseLock = true;
            }else{
            }            
        }else{
            releaseLock = true;
        }
        if( releaseLock && lockSchedule && saveToDatabase) {
            releaseUpdateLock();
        }
         */
        
        //Added by Vyjayanthi - 10/08/2004 for IRB Enhancement - Start
        //Schedule if locked from Review Comments is always released on close
        if( lockSchedule ) {
//            releaseUpdateLock();
        }
        //Added by Vyjayanthi - 10/08/2004 for IRB Enhancement - End
        coeusDlgWindow.setVisible(false);
    
    }
    public void actionPerformed(ActionEvent actionEvent) {        
        Object source = actionEvent.getSource();
        if(source.equals(btnCancel)) {
            performWindowClosing();
        }//End Cancel Button Click
        else if(source.equals(btnDelete)) {
             int selectedRow = tblReviewComments.getSelectedRow();        
            if(selectedRow == -1) {
                 return ;
            }
            
            //Added by Vyjayanthi - 11/08/2004 for IRB Enhancement - Start
            int selectedOption = CoeusOptionPane.showQuestionDialog(
                coeusMessageResources.parseMessageKey(
                "reviewComments_exceptionCode.3104"),
                CoeusOptionPane.OPTION_YES_NO,
                CoeusOptionPane.DEFAULT_YES);
            if( selectedOption == 0 ){
                MinuteEntryInfoBean minuteEntryInfoBean = (MinuteEntryInfoBean)vecData.get(selectedRow);
                if(minuteEntryInfoBean.getAcType() != null && minuteEntryInfoBean.getAcType().equals(TypeConstants.INSERT_RECORD)) {

                }else{
                    minuteEntryInfoBean.setAcType(TypeConstants.DELETE_RECORD);
                    if(vecDeletedBeans == null) {
                        vecDeletedBeans = new Vector();
                    }
                        vecDeletedBeans.add(minuteEntryInfoBean);
                }
                deleteReviewComments();
            }else {
                return ;
            }
            //Added by Vyjayanthi - 11/08/2004 for IRB Enhancement - End
            //Commented for case#3088 - Error updating review comments - start
//            reviewCommentsTableModel.removeRow(selectedRow);
//            reviewCommentsTableModel.fireTableRowsDeleted(selectedRow, selectedRow);
            //Commented for case#3088 - Error updating review comments - end            
            if(tblReviewComments.getRowCount() > 0){
                tblReviewComments.requestFocusInWindow();
                tblReviewComments.setRowSelectionInterval(0,0); 
            }
            display();
        }//End Delete Button Click
        else if(source.equals(btnModify)) {
            int selectedRow = tblReviewComments.getSelectedRow();
            if(selectedRow == -1) {
                return ;
            }
            
            //Added by Vyjayanthi - 11/08/2004 for IRB Enhancement - Start
            selRow = tblReviewComments.getSelectedRow();
            showPrevSelection = true;
            //Added by Vyjayanthi - 11/08/2004 for IRB Enhancement - End
            
            MinuteEntryInfoBean minuteEntryInfoBean = (MinuteEntryInfoBean)vecData.get(selectedRow);
            commentsForm.reset();
            commentsForm.setFormData(minuteEntryInfoBean);
            if( functionType == CoeusGuiConstants.MODIFY_MODE ) {
                commentsForm.setFunctionType(CoeusGuiConstants.MODIFY_MODE);
                
                //Added by Vyjayanthi - 10/08/2004 for IRB Enhancement
                //To set the schedule data used for saving the comments in Comments Screen
                commentsForm.setScheduleData(hmScheduleData);
            
            }else{
                //Modified by Vyjayanthi for IRB Enhancement
                //To open the Comments Form in Display mode only if user does 
                //not have Maintain Minutes right
                if( !hasMaintainMinutesRight ){
                    commentsForm.setFunctionType(CoeusGuiConstants.DISPLAY_MODE);
                }
            }
            commentsForm.display();
        }//End Modify Button Click
        else if(source.equals(btnNew)) {
            commentsForm.reset();

            //Added by Vyjayanthi - 10/08/2004 for IRB Enhancement
            //To set the schedule data used for saving the comments in Comments Screen
            commentsForm.setScheduleData(hmScheduleData);
            
            //commentsForm.setFormData(minuteEntryInfoBean);
            commentsForm.setFunctionType(CoeusGuiConstants.ADD_MODE);
            commentsForm.display();
        }//End New Button Click
        //Commented by Vyjayanthi - 07/08/2004 for IRB Enhancement
        //OK button not needed since saving to database is directly done in
        //the Comments screen        
        /*
        else if(source.equals(btnOk)) {
            save();
        }//End OK Button Click
         */
        
        //Ordering Review Comments Enhancment Start 8
        else if(source.equals(btnMoveUp)){
            moveUp();
        }else if(source.equals(btnMoveDown)){
            moveDown();
        }
        //Ordering Review Comments Enhancment End 8
        //Case Id#2919 Review Comments Printing - Start
        else if(source.equals(btnPrint)) {
            try {
                printComments();
            }catch(CoeusException ce) {
                ce.printStackTrace();
            }catch(Exception e) {
                e.printStackTrace();
            }
        }
        //Printing Review Comments - End
        //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - Start
        else if(source.equals(btnAttachments)) {
            try {
                showReviewerAttachments();
            }catch(CoeusException ce) {
                ce.printStackTrace();
            }catch(Exception e) {
                e.printStackTrace();
            }
        }
        //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - End
    }
    //Case Id#2919 Printing ReviewComments - Start
    /** 
     * Print ReviewComments Report
     * @throws CoeusException if any problem occurs in database interaction
     */

    public void printComments()throws CoeusException{       
        RequesterBean requester = new RequesterBean();
        Hashtable htParams = new Hashtable();
        htParams.put("ProtocolNumber", protocolNumber);
        htParams.put("SubmissionNumber", new Integer(submissionNumber).toString());
        requester.setDataObject(htParams);
        
        //For Streaming
        requester.setId("IacucProtocol/ReviewComments");
        requester.setFunctionType('R');
        //For Streaming
        
        AppletServletCommunicator comm
         = new AppletServletCommunicator(connect, requester);
         
        comm.send();
        ResponderBean responder = comm.getResponse();
        String fileName = "";
        if(responder.hasResponse()){
             fileName = (String)responder.getDataObject();
             try{
                 URL url = new URL(fileName);
                 URLOpener.openUrl(url);
             }catch (MalformedURLException malformedURLException) {
                 throw new CoeusException(malformedURLException.getMessage());
             }
         }else{
             throw new CoeusException(responder.getMessage());
         }               
    }
    //Case Id#2919 Printing ReviewComments - End
    
    //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - Start
    /** 
     * Print ReviewComments Report
     * @throws CoeusException if any problem occurs in database interaction
     */

    public void showReviewerAttachments()throws CoeusException{
        protocolReviewerAttachmentsForm = new ProtocolReviewerAttachmentsForm(true, submissionBean);
        //To display the attachment details
        protocolReviewerAttachmentsForm.setFormData();
    }
    //COEUSQA-2542_Allow Protocol Reviewer to upload Attachments - End
    
    //Commented by Vyjayanthi - 07/08/2004 for IRB Enhancement
    //Since saving to database is directly done in the Comments screen
    /*
    private void save() {
        RequesterBean requesterBean = new RequesterBean();
        vecToServer = new Vector();
        MinuteEntryInfoBean minuteEntryInfoBean;
        for(int index = 0; index < vecData.size(); index++) {
            minuteEntryInfoBean = (MinuteEntryInfoBean)vecData.get(index);
            if(minuteEntryInfoBean.getAcType() != null){
                vecToServer.add(minuteEntryInfoBean);
            }
        }
        
        if(vecDeletedBeans != null && vecDeletedBeans.size() > 0) {
            for(int index = 0; index < vecDeletedBeans.size(); index++) {
                vecToServer.add(vecDeletedBeans.get(index));
            }
        }

        if( vecToServer.size() > 0 ) {
            saveRequired = true;
        }
        
        if(! saveToDatabase) {
            coeusDlgWindow.setVisible(false);
            return ;
        }
        
        
        if( vecToServer.size() == 0  && saveToDatabase ){
            //No need to talk to server
            if( lockSchedule ) {
                releaseUpdateLock();
            }
            coeusDlgWindow.setVisible(false);
            return ;
        }
        Vector dataObjects = new Vector();
        dataObjects.add(vecToServer);
        dataObjects.add(new Boolean(lockSchedule));
        requesterBean.setDataObjects(dataObjects);
        requesterBean.setFunctionType('E');
        requesterBean.setId(scheduleId);
        AppletServletCommunicator appletServletCommunicator = new AppletServletCommunicator();
        appletServletCommunicator.setConnectTo(CoeusGuiConstants.CONNECTION_URL + SCHEDULE_MAINTENENCE_SERVLET);
        appletServletCommunicator.setRequest(requesterBean);
        appletServletCommunicator.send();
        
        ResponderBean responderBean = appletServletCommunicator.getResponse();
        if( responderBean != null && responderBean.isSuccessfulResponse() ) {
            dataSaved = true;
            minutesData = (Vector)responderBean.getDataObject();
            coeusDlgWindow.setVisible(false);
        }else if ( !responderBean.isSuccessfulResponse() ){
            dataSaved = false;
            CoeusOptionPane.showInfoDialog(responderBean.getMessage());
        }
    }
     */
    
    //Added by Vyjayanthi - 07/08/2004 for IRB Enhancement
    /** Setter for the property hasMaintainMinutesRight
     * @param hasRight holds true if user has MAINTAIN_MINUTES right, false otherwise
     */
    public void setHasMaintainMinutesRight(boolean hasRight) {
        this.hasMaintainMinutesRight = hasRight;
    }
    
    //Added by Vyjayanthi - 12/08/2004 for IRB Enhancement
    /** Deletes the Review Comments to the database
     */
    private void deleteReviewComments(){
        RequesterBean requesterBean = new RequesterBean();
        Vector dataObjects = new Vector();
//        Vector vecData = new Vector();
        dataObjects.add(vecDeletedBeans);
        dataObjects.add(new Boolean(false));
        requesterBean.setDataObjects(dataObjects);
        requesterBean.setFunctionType('k');
        requesterBean.setId((String)hmScheduleData.get(SCHEDULE_ID));
        AppletServletCommunicator appletServletCommunicator = new AppletServletCommunicator();
        appletServletCommunicator.setConnectTo(CoeusGuiConstants.CONNECTION_URL + SCHEDULE_MAINTENENCE_SERVLET);
        appletServletCommunicator.setRequest(requesterBean);
        appletServletCommunicator.send();
        
        ResponderBean responderBean = appletServletCommunicator.getResponse();
        //Modified for case#3088 - Error updating review comments - start
        if( responderBean != null && responderBean.isSuccessfulResponse() ) {
//            vecData = (Vector)responderBean.getDataObject();
            try{
                vecData = getReviewComments();
                reviewCommentsTableModel.reset();
                reviewCommentsTableModel.setData(vecData);
                reviewCommentsTableModel.fireTableDataChanged();
//                reviewCommentsTableModel.fireTableRowsUpdated(0, vecData.size());                
            }catch(Exception ex){
                ex.printStackTrace();
            }
        }else if ( !responderBean.isSuccessfulResponse() ){
            CoeusOptionPane.showInfoDialog(responderBean.getMessage());
        }
        //Modified for case#3088 - Error updating review comments - end
    }
    
    public Vector getMinutesData(){
        return minutesData;
    }
    
//    private boolean canLockReviewEntry(String scheduleId, String entryNumber ) {
//        if( !hmLocked.containsKey( scheduleId + entryNumber ) ) {
//            try{
//                if( RecordLocker.lock("MINUTE_ENTRY", scheduleId + entryNumber ) ){
//                    hmLocked.put(scheduleId + entryNumber,  new Boolean(true) ) ;
//                    return true;
//                }
//            }catch( CoeusException coe ) {
//                CoeusOptionPane.showDialog(new CoeusClientException(coe));
//                return false;
//            }
//        }else {
//            CoeusOptionPane.showInfoDialog(coeusMessageResources.parseMessageKey(
//                "protocolDetForm_exceptionCode.1019"));
//            return false;
//        }
//        return false;
//    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnAttachments;
    public javax.swing.JButton btnCancel;
    public javax.swing.JButton btnDelete;
    public javax.swing.JButton btnModify;
    public javax.swing.JButton btnMoveDown;
    public javax.swing.JButton btnMoveUp;
    public javax.swing.JButton btnNew;
    public javax.swing.JButton btnPrint;
    public javax.swing.JLabel lblUpdateTimestamp;
    public javax.swing.JLabel lblUpdateUser;
    public javax.swing.JScrollPane scrPnReviewComments;
    public javax.swing.JTable tblReviewComments;
    public edu.mit.coeus.utils.CoeusTextField txtUpdateTimestamp;
    public edu.mit.coeus.utils.CoeusTextField txtUpdateUser;
    // End of variables declaration//GEN-END:variables
    
    //For testing purpose only
    public static void main(String s[]){
//        Frame frame = new Frame();
        ReviewCommentsForm reviewCommentsForm = new ReviewCommentsForm(true);
        reviewCommentsForm.display();
    }
    
    /** Getter for property dataSaved.
     * @return Value of property dataSaved.
     *
     */
    public boolean isDataSaved() {
        return dataSaved;
    }
    
    
    /** Setter for property lockSchedule.
     * @param lockSchedule New value of property lockSchedule.
     *
     */
    public void setLockSchedule(boolean lockSchedule) {
        this.lockSchedule = lockSchedule;
    }
    
//    private void releaseUpdateLock() {
//        String connectTo = CoeusGuiConstants.CONNECTION_URL + "/scheduleMaintSrvlt";
//        RequesterBean requester = new RequesterBean();
//        requester.setDataObject(scheduleId);
//        requester.setFunctionType('Z');
//        AppletServletCommunicator comm = new AppletServletCommunicator(connectTo,requester);
//        //comm.releaseUpdateLock(refId,"/scheduleMaintSrvlt");
//        comm.send();
//        ResponderBean res = comm.getResponse();
//        if (res != null && !res.isSuccessfulResponse()){
//            CoeusOptionPane.showErrorDialog(res.getMessage());
//            return;
//        }
//    
//    }
    
    /** Getter for property saveRequired.
     * @return Value of property saveRequired.
     *
     */
    public boolean isSaveRequired() {
        return saveRequired;
    }
    
    //Added by Vyjayanthi for IRB Enhancement
    //To set the sizes of the table columns
    private void resetColumnSizes() {
       // 3282: Reviewer View of Protocol materials - Start
       // int colWidth[] = {420, 70};
       //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
        //int colWidth[] = {390, 50, 60};
        int colWidth[] = {140,330, 50, 60};
        //COEUSQA-2291 : End
        // 3282: Reviewer View of Protocol materials - End
        TableColumn tableColumn;
        for(int column=0; column < colWidth.length; column++) {
            tableColumn = tblReviewComments.getColumnModel().getColumn(column);
            tableColumn.setPreferredWidth(colWidth[column]);
        }
    }
    
    //Added by Vyjayanthi for IRB Enhancement
    //To set if data has to be refreshed after save and indicate if the record
    //should be locked
    /**
     * Setter for property refreshRequired.
     * @param refreshRequired New value of property refreshRequired.
     */
    public void setRefreshRequired(boolean refreshRequired) {
        this.refreshRequired = refreshRequired;
    }
    
    //Ordering Review Comments Enhancment Start 9
    
    private void moveUp(){
        int selRow = tblReviewComments.getSelectedRow();
        
        if(selRow == 0 || selRow == -1){
            return ;
        }
        
        if(selRow>0){
            swapSortNumbers(selRow, selRow-1 , true);
            tblReviewComments.setRowSelectionInterval(selRow-1,selRow-1);
        }
    }
    
    private void moveDown(){
        int rowCount = tblReviewComments.getRowCount();
        int selRow = tblReviewComments.getSelectedRow();
        
        if(selRow == rowCount-1 || selRow == -1){
            return ;
        }
        
        if(selRow < (rowCount-1)){
            swapSortNumbers( selRow, selRow+1 , true);
            tblReviewComments.setRowSelectionInterval(selRow+1,selRow+1);
        }
    }
    
     
    private void swapSortNumbers( int row1, int row2, boolean moveUp) {
        MinuteEntryInfoBean row1Bean = null;
        MinuteEntryInfoBean row2Bean = null;
        int row1EntryNo;
        int row2EntryNo;
        Vector vecDataToServer = new Vector();
        
        vecDataToServer.addAll(vecData);
        row1Bean = (MinuteEntryInfoBean)vecDataToServer.get(row1);
        row2Bean = (MinuteEntryInfoBean)vecDataToServer.get(row2);
        
        row1EntryNo = row1Bean.getEntryNumber();
        row2EntryNo = row2Bean.getEntryNumber();
        
        if( row1Bean.getAcType() == null ||
            row1Bean.getAcType().equals(TypeConstants.UPDATE_RECORD)) {
            //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
//            MinuteEntryInfoBean newRow1Bean = setDataToBean(row1Bean);
            MinuteEntryInfoBean newRow1Bean = setDataToBean(row1Bean,true);
            //COEUSQA-2291 : End
            row1Bean.setAcType( TypeConstants.DELETE_RECORD );
             
            
            newRow1Bean.setEntryNumber(row2EntryNo);
            newRow1Bean.setAcType(TypeConstants.INSERT_RECORD); 
            
            vecDataToServer.add(newRow1Bean);
        }else if (row1Bean.getAcType().equals(TypeConstants.INSERT_RECORD)){
            row1Bean.setEntryNumber(row2EntryNo);
            //Added for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
            row1Bean.setReviewCommentSwapped(true);
            //COEUSQA-2291 : End
        }
        
        if( row2Bean.getAcType() == null ||
            row2Bean.getAcType().equals(TypeConstants.UPDATE_RECORD)) {
            //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
//            MinuteEntryInfoBean newRow2Bean = setDataToBean(row2Bean);
            MinuteEntryInfoBean newRow2Bean = setDataToBean(row2Bean,true);
            //COEUSQA-2291 : End
            row2Bean.setAcType( TypeConstants.DELETE_RECORD );
            
            newRow2Bean.setEntryNumber(row1EntryNo);
            newRow2Bean.setAcType(TypeConstants.INSERT_RECORD); 
            vecDataToServer.add(newRow2Bean);
        }else if (row2Bean.getAcType().equals(TypeConstants.INSERT_RECORD)){
            row2Bean.setEntryNumber(row1EntryNo);
            //Added for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
            row1Bean.setReviewCommentSwapped(true);
            //COEUSQA-2291 : End
        }
        
        updateReviewComments(vecDataToServer);
    }
    
    private void updateReviewComments(Vector vecDataToServer){
        RequesterBean requesterBean = new RequesterBean();
        Vector dataObjects = new Vector();
        
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        
        ProtocolSubmissionInfoBean submissionInfoBean = new ProtocolSubmissionInfoBean();
        submissionInfoBean.setProtocolNumber(protocolNumber);
        submissionInfoBean.setSubmissionNumber(submissionNumber);
        
        
        dataObjects.add(vecDataToServer);
        dataObjects.add(submissionInfoBean);
        requesterBean.setDataObjects(dataObjects);
        requesterBean.setFunctionType('u');
        requesterBean.setId((String)hmScheduleData.get(SCHEDULE_ID));
        AppletServletCommunicator appletServletCommunicator = new AppletServletCommunicator();
        appletServletCommunicator.setConnectTo(CoeusGuiConstants.CONNECTION_URL + SCHEDULE_MAINTENENCE_SERVLET);
        appletServletCommunicator.setRequest(requesterBean);
        appletServletCommunicator.send();
        
        ResponderBean responderBean = appletServletCommunicator.getResponse();
        if( responderBean != null && responderBean.isSuccessfulResponse() ) {
            Vector vecDataFromServer = new Vector();
            vecDataFromServer = responderBean.getDataObjects();
            
            ProtocolSubmissionInfoBean protocolSubmissionInfoBean = 
                            (ProtocolSubmissionInfoBean)vecDataFromServer.get(0);
            vecData = (Vector)vecDataFromServer.get(1);
            this.submissionBean = protocolSubmissionInfoBean;
            if(vecData == null) {
                vecData = new Vector();
            }
            try{
                oldData = (Vector)ObjectCloner.deepCopy(vecData);
            }catch (Exception ex){
                ex.printStackTrace();
            }
            
            if(protocolSubmissionInfoBean!= null && protocolSubmissionInfoBean.getScheduleId() != null){
                scheduleId = protocolSubmissionInfoBean.getScheduleId();
            }else {
                scheduleId = DEFAULT_SCHEDULE_ID;
            }
            
            //To set the schedule id required for saving in Comments Form
            hmScheduleData.put(SCHEDULE_ID, scheduleId);

            reviewCommentsTableModel.setData(vecData);
            reviewCommentsTableModel.fireTableDataChanged();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }else if ( !responderBean.isSuccessfulResponse() ){
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            CoeusOptionPane.showInfoDialog(responderBean.getMessage());
        }
    }
    
   //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
   // private MinuteEntryInfoBean setDataToBean(MinuteEntryInfoBean minuteEntryInfoBean){
    private MinuteEntryInfoBean setDataToBean(MinuteEntryInfoBean minuteEntryInfoBean, boolean isCommentSwap){//COEUSQA-2291 : End
        MinuteEntryInfoBean newBean = new MinuteEntryInfoBean();
        
        newBean.setEntryNumber(minuteEntryInfoBean.getEntryNumber());
        newBean.setMinuteEntry(minuteEntryInfoBean.getMinuteEntry());
        newBean.setMinuteEntryTypeCode(minuteEntryInfoBean.getMinuteEntryTypeCode());
        newBean.setMinuteEntryTypeDesc(minuteEntryInfoBean.getMinuteEntryTypeDesc());
        newBean.setOtherItemDesc(minuteEntryInfoBean.getOtherItemDesc());
        newBean.setPrivateCommentFlag(minuteEntryInfoBean.isPrivateCommentFlag());
        // 3282: Reviewer View of Protocol materials -Start
        newBean.setFinalFlag(minuteEntryInfoBean.isFinalFlag());
        //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
//        newBean.setPersonId(userInfoBean.getPersonId());
        newBean.setPersonId(minuteEntryInfoBean.getPersonId());
        newBean.setPersonName(minuteEntryInfoBean.getPersonName());
        newBean.setCreateUser(minuteEntryInfoBean.getCreateUser());
        newBean.setCreateUserName(minuteEntryInfoBean.getCreateUserName());
        newBean.setCreateTimestamp(minuteEntryInfoBean.getCreateTimestamp());
        newBean.setReviewerName(minuteEntryInfoBean.getReviewerName());
        newBean.setReviewCommentSwapped(isCommentSwap);
        //COEUSQA-2291 : End
        // 3282: Reviewer view of Protocols - End 
        newBean.setProtocolContingencyCode(minuteEntryInfoBean.getProtocolContingencyCode());
        newBean.setProtocolContingencyDesc(minuteEntryInfoBean.getProtocolContingencyDesc());
        newBean.setProtocolNumber(minuteEntryInfoBean.getProtocolNumber());
        newBean.setScheduleId(minuteEntryInfoBean.getScheduleId());
        newBean.setSequenceNumber(minuteEntryInfoBean.getSequenceNumber());
        newBean.setSubmissionNumber(minuteEntryInfoBean.getSubmissionNumber());
        
        return newBean;
    }
    //Ordering Review Comments Enhancment End 9
    
    //Added for case#3088 - Error updating review comments - start
    private Vector getReviewComments() throws Exception{
        Vector vecReviewComments = new Vector();
        RequesterBean requesterBean = new RequesterBean();
        requesterBean.setDataObject(submissionBean);
        requesterBean.setFunctionType('r');        
        AppletServletCommunicator appletServletCommunicator = new AppletServletCommunicator();
        appletServletCommunicator.setConnectTo(CoeusGuiConstants.CONNECTION_URL+SCHEDULE_MAINTENENCE_SERVLET);
        appletServletCommunicator.setRequest(requesterBean);
        appletServletCommunicator.send();        
        ResponderBean responderBean = appletServletCommunicator.getResponse();
        if(responderBean.isSuccessfulResponse()){
            vecReviewComments = responderBean.getDataObjects();
            vecReviewComments = (Vector)vecReviewComments.get(1);
        }    
        return vecReviewComments;
    }
    //Added for case#3088 - Error updating review comments - end     
    // 3282: Reviewer view of Protocols - Start
    /**
     * Method to fetch the logged in User Information
     * @return UserInfoBean
     */
    private UserInfoBean fetchUserDetails() {
        //Commented for unused local variabe PMD check
        //String userId = CoeusGuiConstants.getMDIForm().getUserId();
        UserInfoBean userInfoBean = null;
        RequesterBean requesterBean = new RequesterBean();        
        String connectTo = CoeusGuiConstants.CONNECTION_URL + "/personMaintenanceServlet";
        requesterBean.setFunctionType(GET_USER_INFO);
        AppletServletCommunicator comm = new AppletServletCommunicator(connectTo, requesterBean);
        comm.send();
        ResponderBean response = comm.getResponse();
        if (response != null && response.isSuccessfulResponse()) {
            userInfoBean = (UserInfoBean)response.getDataObject();
        }
        return userInfoBean;
    }
    // 3282: Reviewer view of Protocols - End



  //Added for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
    /**
     * Method to fetch the logged in User person id
     * @return personId - String
     */
    private String getPersonId() {
        //Commented for unused local variabe PMD check
       // String userId = CoeusGuiConstants.getMDIForm().getUserId();
        //UserInfoBean userInfoBean = null;
        RequesterBean requesterBean = new RequesterBean();        
        String connectTo = CoeusGuiConstants.CONNECTION_URL + "/personMaintenanceServlet";
        requesterBean.setFunctionType(GET_PERSON_ID_FOR_USER);
        AppletServletCommunicator comm = new AppletServletCommunicator(connectTo, requesterBean);
        comm.send();
        ResponderBean response = comm.getResponse();
        if (response != null && response.isSuccessfulResponse()) {
            personId = (String)response.getDataObject();
        }
        return personId;
    }
    //COEUSQA-2291 : End
}

class ReviewCommentsTableModel extends DefaultTableModel {
    
    private Vector data;
    // 3282: Reviewer View of Protocol materials - Start
//    private Class columnClass[] = {String.class, Boolean.class};
//    private String columnName[] = {"Entry","Private"};
    //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
//    private Class columnClass[] = {String.class,Boolean.class, Boolean.class};
//    private String columnName[] = {"Entry", "Final", "Private"};
    private Class columnClass[] = {String.class,String.class,Boolean.class, Boolean.class};
    private String columnName[] = {"Reviewer", "Entry", "Final", "Private"};
    //COEUSQA-2291 : End
    // 3282: Reviewer View of Protocol materials - End
    private MinuteEntryInfoBean minuteEntryInfoBean;

    //Added for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
    private static final int REVIEWER_NAME_COLUMN = 0;
    private static final int MINUTE_ENTRY_COLUMN = 1;
    private static final int FINAL_FLAG_COLUMN = 2;
    private static final int PRIVATE_FLAG_COLUMN = 3;
    //COEUSQA-2291 : End
    
    public void setValueAt(Object value, int row, int column) {
    }
    
    public int getColumnCount() {
        return columnName.length;
    }
    
    public int getRowCount() {
        if(data == null) {
            return 0;
        }
        return data.size();
    }
    
    public Object getValueAt(int row, int column) {
        minuteEntryInfoBean = (MinuteEntryInfoBean)data.get(row);
        switch (column) {
            //Modified for COEUSQA-2291 : Hide Reviewer Name in Review Comments - Start
//            case 0:
//                return minuteEntryInfoBean.getMinuteEntry();
//                // 3282: Reviewer View of Protocol materials - Start
////            case 1:
////                return new Boolean(minuteEntryInfoBean.isPrivateCommentFlag());
//            case 1:
//                return new Boolean(minuteEntryInfoBean.isFinalFlag());
//            case 2:
//                return new Boolean(minuteEntryInfoBean.isPrivateCommentFlag());
//                // 3282: Reviewer View of Protocol materials - End
            case REVIEWER_NAME_COLUMN:
                return minuteEntryInfoBean.getReviewerName();
            case MINUTE_ENTRY_COLUMN:
                return minuteEntryInfoBean.getMinuteEntry();
            case FINAL_FLAG_COLUMN:
                return new Boolean(minuteEntryInfoBean.isFinalFlag());
            case PRIVATE_FLAG_COLUMN:
                return new Boolean(minuteEntryInfoBean.isPrivateCommentFlag());
           //COEUSQA-2291 : End
        }
        return null;
    }
    public String getColumnName(int column) {
        return columnName[column];
    }
    
    public Class getColumnClass(int column) {
        return columnClass[column];
    }
    
    public void setData(Vector data) {
        this.data = data;
    }
    
    public void reset() {
        data = null;
    }
    
    public void removeRow(int row) {
        data.remove(row);
    }
    
    public boolean isCellEditable(int row, int column) {
        return false;
    }
    
    //Added by Vyjayanthi - 11/08/2004 for IRB Enhancement
    public MinuteEntryInfoBean getMinuteBean( int row ){
        if( data != null && data.size() > 0 ) {
            return ( MinuteEntryInfoBean )data.elementAt( row );
        }
        return null;
    }       
    
}

