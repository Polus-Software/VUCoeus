/*
 * AssignScheduleForm.java
 *
 * Created on October 21, 2003, 9:46 PM
 */

package edu.mit.coeus.iacuc.gui;

import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.gui.CoeusDlgWindow;
import edu.mit.coeus.utils.*;
import edu.mit.coeus.brokers.*;
import edu.mit.coeus.iacuc.bean.ScheduleDetailsBean;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.AbstractAction;
/**
 *
 * @author  ravikanth
 */
public class AssignScheduleForm extends edu.mit.coeus.gui.CoeusDlgWindow 
    implements ActionListener {
    private boolean scheduleSelected;
    private Vector vData; //Added by Nadh
    private static final char COMMITTEE_LIST_FOR_MODULE = 'z';
    private int actionId;
    private String message;
    private String actionComments;
    private boolean actionPerformed = false;
    /** Creates new form AssignScheduleForm */
    public AssignScheduleForm(String title, String message, int actionId) {
        super(CoeusGuiConstants.getMDIForm(), title,true);
        this.actionId = actionId;
        this.message = message;
        initComponents();
        actionComponentSettings();
        registerListeners();
        btnCommittee.requestFocusInWindow();
        show();
    }
    // Added by Nadh for enhancement to Refine Notify Committee action.
    //starts 3 aug 2004
    public AssignScheduleForm(Object obj, String title, String message, int actionId) {
        super(CoeusGuiConstants.getMDIForm(), title,true);
        this.actionId = actionId;
        this.message = message;
        this.vData = (Vector)obj;
        initComponents();
        actionComponentSettings();
        txtCommiteeId.setText((String)vData.get(0));
        txtCommitteeName.setText((String)vData.get(1));
        registerListeners();
        btnCommittee.requestFocusInWindow();
        show();
    }
    private void actionComponentSettings(){
        if(actionId == IacucProtocolActionsConstants.NOTIFY_COMMITTEE){
            scrpnlInput.setVisible(false);
            txtComments.setVisible(false);
            lblPrompt.setVisible(false);
            lblComments.setVisible(false);
            Dimension pnlDimension = new Dimension(460,105);
            pnlMain.setMaximumSize(pnlDimension);
            pnlMain.setMinimumSize(pnlDimension);
            pnlMain.setPreferredSize(pnlDimension);
        }else{
            lblPrompt.setText(message);
        }
    }
    private void registerListeners(){
        java.awt.Component[] components = {btnOk,btnCancel,btnCommittee,btnSchedule};
        ScreenFocusTraversalPolicy  traversePolicy = new ScreenFocusTraversalPolicy( components );
        pnlMain.setFocusTraversalPolicy(traversePolicy);
        pnlMain.setFocusCycleRoot(true);
        btnCancel.addActionListener(this);
        btnCommittee.addActionListener(this);
        btnOk.addActionListener(this);
        btnSchedule.addActionListener(this);
        pack();
        setLocation(CoeusDlgWindow.CENTER);
        addEscapeKeyListener(
            new AbstractAction("escPressed"){
                public void actionPerformed(ActionEvent ae){
                    scheduleSelected = false;
                    actionPerformed = false;
                    dispose();
                }
        });
    }
    //nadh end 3 aug 2004

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMain = new javax.swing.JPanel();
        btnCommittee = new javax.swing.JButton();
        btnSchedule = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblScheduleId = new javax.swing.JLabel();
        txtScheduleId = new edu.mit.coeus.utils.CoeusTextField();
        lblScheduleDate = new javax.swing.JLabel();
        txtScheduleDate = new javax.swing.JTextField();
        txtCommitteeName = new javax.swing.JTextField();
        lblCommitteeName = new javax.swing.JLabel();
        txtCommiteeId = new javax.swing.JTextField();
        lblCommitteeId = new javax.swing.JLabel();
        lblPrompt = new javax.swing.JTextArea();
        lblComments = new javax.swing.JLabel();
        scrpnlInput = new javax.swing.JScrollPane();
        txtComments = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        pnlMain.setLayout(new java.awt.GridBagLayout());

        pnlMain.setMinimumSize(new java.awt.Dimension(500, 300));
        pnlMain.setPreferredSize(new java.awt.Dimension(500, 300));
        btnCommittee.setFont(CoeusFontFactory.getLabelFont());
        btnCommittee.setMnemonic('m');
        btnCommittee.setText("Select Committee");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 10);
        pnlMain.add(btnCommittee, gridBagConstraints);

        btnSchedule.setFont(CoeusFontFactory.getLabelFont());
        btnSchedule.setMnemonic('S');
        btnSchedule.setText("Select Schedule");
        btnSchedule.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 10);
        pnlMain.add(btnSchedule, gridBagConstraints);

        btnOk.setFont(CoeusFontFactory.getLabelFont());
        btnOk.setMnemonic('O');
        btnOk.setText("OK");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 10);
        pnlMain.add(btnOk, gridBagConstraints);

        btnCancel.setFont(CoeusFontFactory.getLabelFont());
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 10);
        pnlMain.add(btnCancel, gridBagConstraints);

        lblScheduleId.setFont(CoeusFontFactory.getLabelFont());
        lblScheduleId.setText("Schedule Id :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 4);
        pnlMain.add(lblScheduleId, gridBagConstraints);

        txtScheduleId.setEnabled(false);
        txtScheduleId.setMinimumSize(new java.awt.Dimension(100, 20));
        txtScheduleId.setOpaque(false);
        txtScheduleId.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlMain.add(txtScheduleId, gridBagConstraints);

        lblScheduleDate.setFont(CoeusFontFactory.getLabelFont());
        lblScheduleDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblScheduleDate.setText("Schedule Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 4);
        pnlMain.add(lblScheduleDate, gridBagConstraints);

        txtScheduleDate.setFont(CoeusFontFactory.getNormalFont());
        txtScheduleDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtScheduleDate.setEnabled(false);
        txtScheduleDate.setMinimumSize(new java.awt.Dimension(100, 20));
        txtScheduleDate.setOpaque(false);
        txtScheduleDate.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlMain.add(txtScheduleDate, gridBagConstraints);

        txtCommitteeName.setFont(CoeusFontFactory.getNormalFont());
        txtCommitteeName.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtCommitteeName.setEnabled(false);
        txtCommitteeName.setMinimumSize(new java.awt.Dimension(200, 20));
        txtCommitteeName.setOpaque(false);
        txtCommitteeName.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlMain.add(txtCommitteeName, gridBagConstraints);

        lblCommitteeName.setFont(CoeusFontFactory.getLabelFont());
        lblCommitteeName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCommitteeName.setText("Committee Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 4);
        pnlMain.add(lblCommitteeName, gridBagConstraints);

        txtCommiteeId.setFont(CoeusFontFactory.getNormalFont());
        txtCommiteeId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtCommiteeId.setEnabled(false);
        txtCommiteeId.setMinimumSize(new java.awt.Dimension(100, 20));
        txtCommiteeId.setOpaque(false);
        txtCommiteeId.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlMain.add(txtCommiteeId, gridBagConstraints);

        lblCommitteeId.setFont(CoeusFontFactory.getLabelFont());
        lblCommitteeId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCommitteeId.setText("Committee Id :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 4);
        pnlMain.add(lblCommitteeId, gridBagConstraints);

        lblPrompt.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderColor"));
        lblPrompt.setDocument(new LimitedPlainDocument(250));
        lblPrompt.setEditable(false);
        lblPrompt.setFont(CoeusFontFactory.getLabelFont());
        lblPrompt.setLineWrap(true);
        lblPrompt.setRows(2);
        lblPrompt.setWrapStyleWord(true);
        lblPrompt.setMaximumSize(new java.awt.Dimension(100, 50));
        lblPrompt.setMinimumSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 225;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 6);
        pnlMain.add(lblPrompt, gridBagConstraints);

        lblComments.setFont(CoeusFontFactory.getLabelFont());
        lblComments.setText("Comments : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 2);
        pnlMain.add(lblComments, gridBagConstraints);

        scrpnlInput.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrpnlInput.setMaximumSize(new java.awt.Dimension(100, 100));
        scrpnlInput.setMinimumSize(new java.awt.Dimension(100, 100));
        scrpnlInput.setPreferredSize(new java.awt.Dimension(100, 100));
        txtComments.setRows(2000);
        txtComments.setMaximumSize(new java.awt.Dimension(100, 150));
        txtComments.setMinimumSize(new java.awt.Dimension(100, 150));
        scrpnlInput.setViewportView(txtComments);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        pnlMain.add(scrpnlInput, gridBagConstraints);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        scheduleSelected = false;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    public void actionPerformed(ActionEvent e) {
        Object actSource = e.getSource();
        if( actSource.equals( btnOk ) ){
            if( txtScheduleId.getText() == null 
                || txtScheduleId.getText().trim().length() == 0 ) {
                CoeusOptionPane.showInfoDialog("Please select a Schedule");
            }else{
                actionPerformed = true;
                scheduleSelected = true;
                this.dispose();
            }
        }else if ( actSource.equals( btnCancel ) ){
            scheduleSelected = false;
            this.dispose();
        }else if ( actSource.equals( btnCommittee ) ){
            selectCommittee();
        }else if ( actSource.equals( btnSchedule ) ){
            selectSchedule();
        }
            
    }    
    
    private void selectCommittee() {
        CommitteeSelectionWindow  committeeSelectionWindow = 
            new CommitteeSelectionWindow(CoeusGuiConstants.getMDIForm(), 
                "Committee Selection", true, getCommitteList()) ; 
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dlgSize = committeeSelectionWindow.getSize();
        committeeSelectionWindow.setLocation(screenSize.width/2 - (dlgSize.width/2),
            screenSize.height/2 - (dlgSize.height/2));

        committeeSelectionWindow.show(true) ;

        if (committeeSelectionWindow.getCommitteeId() != null){
            txtCommiteeId.setText(committeeSelectionWindow.getCommitteeId()) ;
            txtCommitteeName.setText(committeeSelectionWindow.getCommitteeName()) ;

            // clear schedule & re-initiliase reviewers
            txtScheduleId.setText("") ;
            txtScheduleDate.setText("") ;

        }
    }
    
    private void selectSchedule() {
    
        if (txtCommiteeId.getText() != null ){              
              Vector schedules = getSchedules(txtCommiteeId.getText()) ;
              ScheduleSelectionWindow scheduleSelectionWindow = 
                new ScheduleSelectionWindow(CoeusGuiConstants.getMDIForm(), 
                    "Schedule Selection", true, new ArrayList(schedules)) ;
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            Dimension dlgSize = scheduleSelectionWindow.getSize();
            scheduleSelectionWindow.setLocation(screenSize.width/2 - (dlgSize.width/2),
                screenSize.height/2 - (dlgSize.height/2));
            scheduleSelectionWindow.show() ;
            ScheduleDetailsBean scheduleDetailsBean = 
                scheduleSelectionWindow.getScheduleDetailsBean() ;
            if (scheduleDetailsBean != null){
                txtScheduleId.setText(scheduleDetailsBean.getScheduleId()) ;
                String dateStr = new DateUtils().formatDate(scheduleDetailsBean.getScheduleDate().toString(), "dd-MMM-yyyy");
                txtScheduleDate.setText(dateStr) ;
            }    
       }else{
            CoeusOptionPane.showErrorDialog("Select a Committee") ;
       }    
    
    }
    /**
     * This method is used to get all the committees  to display in the
     * committee table of CommitteeSelectionForm
     *
     * @return committees collection of CommitteeMaintenanceFormBean
     */
    private ArrayList getCommitteList() {
        /**
         * This sends the functionType as 'G' to the servlet indicating to
         * get the details of all existing committees with the required
         * information
         */
        
        Vector vecBeans = new Vector();
        String connectTo = CoeusGuiConstants.CONNECTION_URL + "/comMntServlet";
        RequesterBean request = new RequesterBean();
        request.setDataObject(""+CoeusConstants.IACUC_COMMITTEE_TYPE_CODE);
        request.setFunctionType(COMMITTEE_LIST_FOR_MODULE);
        AppletServletCommunicator comm = new AppletServletCommunicator(
        connectTo, request);
        /**
         * Updated for REF ID :0003  Feb'21 2003.
         * Hour Glass implementation while DB Trsactions Wait
         * by Subramanya Feb' 21 2003
         */
        setCursor( new Cursor( Cursor.WAIT_CURSOR ) );
        comm.send();
        ResponderBean response = comm.getResponse();
        setCursor( new Cursor( Cursor.DEFAULT_CURSOR ) );
        
        if (response.isSuccessfulResponse()) {
            vecBeans = response.getDataObjects();
        }
        return new ArrayList(vecBeans);
    }

    private Vector getSchedules(String committeeId){

        Vector vecBeans = new Vector();
        String connectTo = CoeusGuiConstants.CONNECTION_URL + "/iacucProtocolSubSrvlt";
        RequesterBean request = new RequesterBean();
        request.setFunctionType('V');
        request.setId(committeeId);
        AppletServletCommunicator comm = new AppletServletCommunicator(
                connectTo, request);
        setCursor( new Cursor( Cursor.WAIT_CURSOR ) );        
        comm.send();
        ResponderBean response = comm.getResponse();
        setCursor( new Cursor( Cursor.DEFAULT_CURSOR ) );

        if (response.isSuccessfulResponse()) {
            vecBeans = (Vector)((Vector) response.getDataObjects()).elementAt(0);
        }
        return vecBeans;
    }
    
    /** Getter for property scheduleSelected.
     * @return Value of property scheduleSelected.
     *
     */
    public boolean isScheduleSelected() {
        return scheduleSelected;
    }    
    
    public String getSelectedCommitteeId(){
        return txtCommiteeId.getText();
    }
    public String getSelectedScheduleId(){
        return txtScheduleId.getText();
    }
    
    /*
     * Method to get the action comments
     * @return String
     */
    public String getActionComments() {
        return txtComments.getText().trim();
    }

    public void setActionComments(String actionComments) {
        this.actionComments = actionComments;
    }

    public boolean isActionPerformed() {
        return actionPerformed;
    }

    public void setActionPerformed(boolean actionPerformed) {
        this.actionPerformed = actionPerformed;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCommittee;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JLabel lblComments;
    private javax.swing.JLabel lblCommitteeId;
    private javax.swing.JLabel lblCommitteeName;
    private javax.swing.JTextArea lblPrompt;
    private javax.swing.JLabel lblScheduleDate;
    private javax.swing.JLabel lblScheduleId;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane scrpnlInput;
    private javax.swing.JTextArea txtComments;
    private javax.swing.JTextField txtCommiteeId;
    private javax.swing.JTextField txtCommitteeName;
    private javax.swing.JTextField txtScheduleDate;
    private edu.mit.coeus.utils.CoeusTextField txtScheduleId;
    // End of variables declaration//GEN-END:variables
    
}
