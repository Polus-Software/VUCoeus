/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KerberosLoginWindow.java
 *
 * Created on Jun 28, 2010, 3:27:08 PM
 */

package edu.mit.coeus.applet;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.ConfirmationCallback;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.swing.JOptionPane;

import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.utils.CoeusOptionPane;
import javax.swing.ImageIcon;

/**
 *
 * @author geot
 */
public class KerberosLoginWindow extends javax.swing.JPanel implements CallbackHandler {
    private Component parentComponent;
    /** Creates new form KerberosLoginWindow */
    public KerberosLoginWindow(Component parentComponent){
        this.parentComponent = parentComponent;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        lblUserId = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUserId = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        lblHeader = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setLayout(new java.awt.GridBagLayout());

        lblUserId.setFont(CoeusFontFactory.getLabelFont());
        lblUserId.setText("User Id : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 40, 3, 10);
        add(lblUserId, gridBagConstraints);

        lblPassword.setFont(CoeusFontFactory.getLabelFont());
        lblPassword.setText("Password : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 40, 3, 10);
        add(lblPassword, gridBagConstraints);

        txtUserId.setFont(CoeusFontFactory.getNormalFont());
        txtUserId.setMinimumSize(new java.awt.Dimension(100, 20));
        txtUserId.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(txtUserId, gridBagConstraints);

        password.setFont(CoeusFontFactory.getNormalFont());
        password.setMinimumSize(new java.awt.Dimension(100, 20));
        password.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(password, gridBagConstraints);

        lblHeader.setFont(CoeusFontFactory.getLabelFont());
        lblHeader.setText("Enter a User ID and Password to log onto Coeus");
        lblHeader.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        add(lblHeader, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUserId;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField txtUserId;
    // End of variables declaration//GEN-END:variables

    private String userId;
    public String getUserId() {
        return userId;
    }
    public void setUserId(String userId){
        this.userId = userId;
    }

    /*
     * An interface for recording actions to carry out if the user
     * clicks OK for the dialog.
     */
    private static interface Action {
	 void perform();
    }
    final List okActions = new ArrayList(2);
    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
        ConfirmationInfo confirmation = new ConfirmationInfo();
        boolean showDialog = false;
        for (int i = 0; i < callbacks.length; i++) {
            Callback callback = callbacks[i];
            if(callback instanceof NameCallback){
                final NameCallback nameCallBack = (NameCallback)callback;
                String defaultName = getUserId()==null?nameCallBack.getDefaultName():getUserId();
                
                if (defaultName != null) {
		    txtUserId.setText(defaultName);
		}else{
                    txtUserId.setText(System.getProperty("user.name"));
                }
//                txtUserId.setText(nameCallBack.getDefaultName());
                confirmation.initialValue = nameCallBack.getDefaultName();
                nameCallBack.setName(txtUserId.getText());
                setUserId(txtUserId.getText());
                okActions.add (new Action() {
		    public void perform() {
			nameCallBack.setName(txtUserId.getText());
                        setUserId(txtUserId.getText());
		    }
		});
            }
            if(callback instanceof PasswordCallback){
                final PasswordCallback passwordCallback = (PasswordCallback)callback;
                okActions.add (new Action() {
		    public void perform() {
			passwordCallback.setPassword(password.getPassword());
		    }
		});
                showDialog = true;
            }
        }
        if(showDialog){
            
            int result = JOptionPane.showOptionDialog(
                parentComponent,
                this,
                "Coeus kerberos login",
                confirmation.optionType,
                confirmation.messageType,
                getCoeusImageIcon(),
                confirmation.options,
                confirmation.initialValue);

            /* Perform the OK actions */
            if (result == JOptionPane.OK_OPTION  || result == JOptionPane.YES_OPTION){
                Iterator iterator = okActions.iterator();
                while (iterator.hasNext()) {
                    ((Action) iterator.next()).perform();
                }
            }else{
                System.exit(0);
            }
            confirmation.handleResult(result);
            
        }
    }
    public ImageIcon getCoeusImageIcon() {
        return new ImageIcon(getClass().getClassLoader().getResource(CoeusGuiConstants.COEUS_ICON));
    }
    public void setInitialFocus(){
        txtUserId.requestFocus();
    }
    private static class ConfirmationInfo {

	private int[] translations;

	int optionType = JOptionPane.OK_CANCEL_OPTION;
	Object[] options = null;
	Object initialValue = null;

	int messageType = JOptionPane.PLAIN_MESSAGE;

	private ConfirmationCallback callback;

	/* Set the confirmation callback handler */
	void setCallback(ConfirmationCallback callback)
	    throws UnsupportedCallbackException{
	    this.callback = callback;

	    int confirmationOptionType = callback.getOptionType();
	    switch (confirmationOptionType) {
	    case ConfirmationCallback.YES_NO_OPTION:
		optionType = JOptionPane.YES_NO_OPTION;
		translations = new int[] {
		    JOptionPane.YES_OPTION, ConfirmationCallback.YES,
		    JOptionPane.NO_OPTION, ConfirmationCallback.NO,
		    JOptionPane.CLOSED_OPTION, ConfirmationCallback.NO
		};
		break;
	    case ConfirmationCallback.YES_NO_CANCEL_OPTION:
		optionType = JOptionPane.YES_NO_CANCEL_OPTION;
		translations = new int[] {
		    JOptionPane.YES_OPTION, ConfirmationCallback.YES,
		    JOptionPane.NO_OPTION, ConfirmationCallback.NO,
		    JOptionPane.CANCEL_OPTION, ConfirmationCallback.CANCEL,
		    JOptionPane.CLOSED_OPTION, ConfirmationCallback.CANCEL
		};
		break;
	    case ConfirmationCallback.OK_CANCEL_OPTION:
		optionType = JOptionPane.OK_CANCEL_OPTION;
		translations = new int[] {
		    JOptionPane.OK_OPTION, ConfirmationCallback.OK,
		    JOptionPane.CANCEL_OPTION, ConfirmationCallback.CANCEL,
		    JOptionPane.CLOSED_OPTION, ConfirmationCallback.CANCEL
		};
		break;
	    case ConfirmationCallback.UNSPECIFIED_OPTION:
		options = callback.getOptions();
		/*
		 * There's no way to know if the default option means
		 * to cancel the login, but there isn't a better way
		 * to guess this.
		 */
		translations = new int[] {
		    JOptionPane.CLOSED_OPTION, callback.getDefaultOption()
		};
		break;
	    default:
		throw new UnsupportedCallbackException(
		    callback,
		    "Unrecognized option type: " + confirmationOptionType);
	    }

	    int confirmationMessageType = callback.getMessageType();
	    switch (confirmationMessageType) {
	    case ConfirmationCallback.WARNING:
		messageType = JOptionPane.WARNING_MESSAGE;
		break;
	    case ConfirmationCallback.ERROR:
		messageType = JOptionPane.ERROR_MESSAGE;
		break;
	    case ConfirmationCallback.INFORMATION:
		messageType = JOptionPane.INFORMATION_MESSAGE;
		break;
	    default:
		throw new UnsupportedCallbackException(
		    callback,
		    "Unrecognized message type: " + confirmationMessageType);
	    }
	}


	/* Process the result returned by the Swing dialog */
	void handleResult(int result) {
	    if (callback == null) {
		return;
	    }

	    for (int i = 0; i < translations.length; i += 2) {
		if (translations[i] == result) {
		    result = translations[i + 1];
		    break;
		}
	    }
	    callback.setSelectedIndex(result);
	}
    }

}
