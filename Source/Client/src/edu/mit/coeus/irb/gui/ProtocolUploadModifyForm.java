/*
 * @(#)ProtocolUploadModifyForm.java 3/21/2007
 *
 * Copyright (c) Massachusetts Institute of Technology
 * 77 Massachusetts Avenue, Cambridge, MA 02139-4307
 * All rights reserved.
 *
 */

/* PMD check performed, and commented unused imports and variables on 11-MAY-2007
 * by Leena
 */

package edu.mit.coeus.irb.gui;

import edu.mit.coeus.brokers.RequesterBean;
import edu.mit.coeus.brokers.ResponderBean;
import edu.mit.coeus.exception.CoeusException;
import edu.mit.coeus.gui.CoeusDlgWindow;
import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.gui.CoeusMessageResources;
import edu.mit.coeus.irb.bean.ProtocolInfoBean;
import edu.mit.coeus.irb.bean.UploadDocumentBean;
import edu.mit.coeus.utils.AppletServletCommunicator;
import edu.mit.coeus.utils.CoeusFileChooser;
import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.utils.CoeusOptionPane;
import edu.mit.coeus.utils.CoeusVector;
import edu.mit.coeus.utils.ComboBoxBean;
import edu.mit.coeus.utils.TypeConstants;

import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;

/**
 * 
 * @author  leenababu
 */
public class ProtocolUploadModifyForm extends CoeusDlgWindow {
    
    private UploadDocumentBean uploadDocBean = null;
    private ProtocolInfoBean protocolInfoBean = null;
    private static final char MODIFY_DOCUMENT = 'M';
    private static final char CHANGE_STATUS = 'S';
    private static final char ADD_DOCUMENT = 'A';
    private static final char AMEND_DOCUMENT = 'E';
    private static final char ADD_UPD_DEL_DOC_DATA = 'm';
    private char functionType = 'M';
    private CoeusVector cvDocType;
    private CoeusVector cvDocStatus;
    private boolean fileSelected;
    private byte[] blobData;
    private JTable tblDocuments;
    private String connectTo = CoeusGuiConstants.CONNECTION_URL + "/protocolMntServlet";
    private CoeusMessageResources coeusMessageResources;
    private RequesterBean requester = null;
    private ResponderBean responder = null;
    private static final String DRAFT = "Draft";
    
    private boolean newVersion;
    private boolean newDocumentId;
    private boolean saveRequired;
    //Added for COEUSDEV-322 :  Premium - Protocol attachments - Delete Document line when a Document was removed resulting in no document being stored - Start
    private static final int DOCUMENT_STATUS_FINALIZED = 2;
    //COEUSDEV-322 : End
    
    /** Creates new form ProtocolUploadModifyForm */
    public ProtocolUploadModifyForm(UploadDocumentBean uploadDocBean,
            ProtocolInfoBean protocolInfoBean, char functionType){
        super(CoeusGuiConstants.getMDIForm());
        this.uploadDocBean = uploadDocBean;
        this.protocolInfoBean = protocolInfoBean;
        setFunctionType(functionType);
    }
    
    /**
     * Initializes the components and sets the form data and the size of the form
     */
    public void showWindow(){
        try {
            initComponents();
            postInitComponents();
            coeusMessageResources = coeusMessageResources.getInstance();
            disableComponents(functionType);
            setFormData();
            
            Dimension screenSize;
            Dimension dlgSize;
            
            screenSize =Toolkit.getDefaultToolkit().getScreenSize();
            dlgSize = getSize();
            setLocation(screenSize.width / 2 - (dlgSize.width / 2),
                    screenSize.height / 2 - (dlgSize.height / 2));
            setVisible(true);
        } catch (HeadlessException ex) {
            ex.printStackTrace();
        } catch (CoeusException ex) {
            ex.printStackTrace();
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        lblDocumentType = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblFileName = new javax.swing.JLabel();
        lblDocumentStatus = new javax.swing.JLabel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        cmbDocumentType = new edu.mit.coeus.utils.CoeusComboBox();
        cmbDocumentStatus = new edu.mit.coeus.utils.CoeusComboBox();
        txtDescription = new edu.mit.coeus.utils.CoeusTextField();
        txtFileName = new edu.mit.coeus.utils.CoeusTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setResizable(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        lblDocumentType.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 11));
        lblDocumentType.setText("Document Type: ");
        lblDocumentType.setName("lblDocumentType");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 3, 0);
        jPanel1.add(lblDocumentType, gridBagConstraints);

        lblDescription.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 11));
        lblDescription.setText("Description: ");
        lblDescription.setName("lblDescription");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 3, 0);
        jPanel1.add(lblDescription, gridBagConstraints);

        lblFileName.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 11));
        lblFileName.setText("File Name: ");
        lblFileName.setName("lblFileName");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 3, 0);
        jPanel1.add(lblFileName, gridBagConstraints);

        lblDocumentStatus.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 11));
        lblDocumentStatus.setText("Document Status: ");
        lblDocumentStatus.setName("lblDocumentStatus");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel1.add(lblDocumentStatus, gridBagConstraints);

        btnOk.setFont(CoeusFontFactory.getLabelFont());
        btnOk.setMnemonic('O');
        btnOk.setText("OK");
        btnOk.setName("btnOk");
        btnOk.setNextFocusableComponent(btnCancel);
        btnOk.setPreferredSize(new java.awt.Dimension(90, 22));
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 3, 5);
        jPanel1.add(btnOk, gridBagConstraints);

        btnCancel.setFont(CoeusFontFactory.getLabelFont());
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.setName("btnCancel");
        btnCancel.setNextFocusableComponent(cmbDocumentType);
        btnCancel.setPreferredSize(new java.awt.Dimension(90, 22));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanel1.add(btnCancel, gridBagConstraints);

        btnBrowse.setFont(CoeusFontFactory.getLabelFont());
        btnBrowse.setMnemonic('B');
        btnBrowse.setText("Browse...");
        btnBrowse.setName("btnBrowse");
        btnBrowse.setNextFocusableComponent(cmbDocumentStatus);
        btnBrowse.setPreferredSize(new java.awt.Dimension(90, 21));
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanel1.add(btnBrowse, gridBagConstraints);

        cmbDocumentType.setEnabled(false);
        cmbDocumentType.setNextFocusableComponent(txtDescription);
        cmbDocumentType.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 3, 0);
        jPanel1.add(cmbDocumentType, gridBagConstraints);

        cmbDocumentStatus.setName("cmbDocumentStatus");
        cmbDocumentStatus.setNextFocusableComponent(btnOk);
        cmbDocumentStatus.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel1.add(cmbDocumentStatus, gridBagConstraints);

        txtDescription.setEditable(false);
        txtDescription.setName("txtDescription");
        txtDescription.setNextFocusableComponent(btnBrowse);
        txtDescription.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(txtDescription, gridBagConstraints);

        txtFileName.setEditable(false);
        txtFileName.setName("txtFileName");
        txtFileName.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanel1.add(txtFileName, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed
    
    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        try {
            checkSaveRequired();
            boolean success = true;
            if(uploadDocBean!=null){
                /*Check the function type */
                if(functionType == CHANGE_STATUS){
                    String statusCode = ((ComboBoxBean)cmbDocumentStatus.getSelectedItem()).getCode();
                    String statusDescription = ((ComboBoxBean)cmbDocumentStatus.getSelectedItem()).getDescription();
                    if(uploadDocBean.getStatusCode() != (Integer.parseInt(statusCode))){
                        uploadDocBean.setStatusCode(Integer.parseInt(statusCode));
                        uploadDocBean.setStatusDescription(statusDescription);
                        uploadDocBean.setAcType(TypeConstants.UPDATE_RECORD);
                        uploadDocBean.setChangeStatus(true);
                        newVersion = false;
                        newDocumentId = false;
                        success = saveUploadDocument();
                    }
                }else if(functionType == MODIFY_DOCUMENT){
                    if(validateForm()){
                        //Modified for COEUSDEV-322 :  Premium - Protocol attachments - Delete Document line when a Document was removed resulting in no document being stored - Start
//                        if(uploadDocBean.getStatusDescription().equals(DRAFT) ){
                        if(uploadDocBean.getStatusDescription().equals(DRAFT) || uploadDocBean.getStatusCode() == DOCUMENT_STATUS_FINALIZED){
                           //COEUSDEV-322 : end 
                            newVersion = false;
                            newDocumentId = false;
//                            uploadDocBean.setAcType(TypeConstants.UPDATE_RECORD);
                            /*COEUSQA-2954 Attachment history should keep previous version of the attachment after it 
                                                           is changed in response to a request for revisions-Start */
                            if(DOCUMENT_STATUS_FINALIZED == uploadDocBean.getStatusCode()){
                                uploadDocBean.setVersionNumber(uploadDocBean.getVersionNumber()+1);
                                uploadDocBean.setAcType(TypeConstants.INSERT_RECORD);
                            }else{
                                uploadDocBean.setAcType(TypeConstants.UPDATE_RECORD);
                            }
                            /*COEUSQA-2954 Attachment history should keep previous version of the attachment after it 
                                                             is changed in response to a request for revisions-End */
                        }else{
                            uploadDocBean.setStatusCode(1);
                            uploadDocBean.setStatusDescription(DRAFT);
                            uploadDocBean.setSequenceNumber(protocolInfoBean.getSequenceNumber());
                            newVersion = true;
                            newDocumentId = false;
                            uploadDocBean.setAcType(TypeConstants.INSERT_RECORD);
                        }
                        
                        uploadDocBean.setFileName(txtFileName.getText());
                        uploadDocBean.setDescription(txtDescription.getText());
                        setSaveRequired(true);
                        if(isFileSelected()){
                            uploadDocBean.setDocument(getBlobData());
                        }
                        success = saveUploadDocument();
                    }
                    /*COEUSQA-2954 Attachment history should keep previous version of the attachment after it 
                                                is changed in response to a request for revisions-Start */
                    else{
                        success = false;
                    }
                    /*COEUSQA-2954 Attachment history should keep previous version of the attachment after it 
                                                  is changed in response to a request for revisions-End */
                    
                    
                }else if(functionType == ADD_DOCUMENT){
                    success = performUploadAction();
                }else if(functionType == AMEND_DOCUMENT){
                    success = performAmendAction();
                    setSaveRequired(true);
                }
                if(success){
                    this.dispose();
                }
            }
        } catch (NumberFormatException ex) {
            ex.printStackTrace();
        } catch (CoeusException ex) {
            ex.printStackTrace();
        }
        
        
    }//GEN-LAST:event_btnOkActionPerformed
    
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        CoeusFileChooser fileChooser = new CoeusFileChooser(this);
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.showFileChooser();
        if(fileChooser.isFileSelected()){
            String fileName = fileChooser.getSelectedFile();
            if(fileName != null && !fileName.trim().equals("")){
                int index = fileName.lastIndexOf('.');
                if(index != -1 && index != fileName.length()){
                    setFileSelected(true);
                    txtFileName.setText(fileChooser.getFileName().getName());
                    setBlobData(fileChooser.getFile());
                }else{
                    CoeusOptionPane.showErrorDialog(coeusMessageResources.parseMessageKey(
                            "correspType_exceptionCode.1012"));
                    setFileSelected(false);
                    setBlobData(null);
                }
            }
        }
    }//GEN-LAST:event_btnBrowseActionPerformed
    
    /**
     * Method to initialise dialog
     * @throws CoeusException If Any exception occurs
     */
    private void postInitComponents() throws CoeusException{
        
        setDefaultCloseOperation(CoeusDlgWindow.DO_NOTHING_ON_CLOSE);
        addComponentListener(
                new ComponentAdapter(){
            public void componentShown(ComponentEvent e){
                try{
                    requestDefaultFocusToComp();
                }catch(CoeusException ce){
                    ce.printStackTrace();
                }
            }
        });
        addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent we){
                try{
                    performCloseAction();
                }catch(CoeusException ce){
                    ce.printStackTrace();
                }
            }
        });
        
        addEscapeKeyListener(new AbstractAction("escPressed"){
            public void actionPerformed(ActionEvent ae){
                try{
                    performCloseAction();
                }catch(CoeusException ce){
                    ce.printStackTrace();
                }
            }
        });
    }
    /**
     * method to set default focus based on open window
     * @throws CoeusException If Any exception occurs
     */
    private void requestDefaultFocusToComp() throws CoeusException{
        if(getFunctionType() != TypeConstants.DISPLAY_MODE){
            if(cmbDocumentType.isEnabled()){
                cmbDocumentType.requestFocusInWindow();
            }else{
                txtDescription.requestFocusInWindow();
            }
        }else{
            btnCancel.requestFocusInWindow();
        }
    }
    /**
     * Check whether any modification in the data has been done, and accordingly
     * set the saveRequired variable
     * @return saveRequired true if there is any data modification else false
     */
    public boolean checkSaveRequired(){
        String statusDescription = ((ComboBoxBean)cmbDocumentStatus.getSelectedItem()).getDescription();
        String typeDescription = ((ComboBoxBean)cmbDocumentType.getSelectedItem()).getDescription();
        if((uploadDocBean.getDescription()==null && txtDescription.getText().trim().length()>0) ||
                (uploadDocBean.getDescription()!=null && !uploadDocBean.getDescription().equals(txtDescription.getText().trim())) ||
                (uploadDocBean.getFileName()==null && txtFileName.getText().trim().length()>0) ||
                (uploadDocBean.getFileName()!=null &&!uploadDocBean.getFileName().equals(txtFileName.getText().trim())) ||
                (uploadDocBean.getStatusDescription()!=null && !uploadDocBean.getStatusDescription().equals(statusDescription)) ||
                (uploadDocBean.getDocType()!=null && !uploadDocBean.getDocType().equals(typeDescription))){
            setSaveRequired(true);
            return true;
        }else{
            setSaveRequired(false);
            return false;
        }
    }
    
    /**
     * Method to perform the actions on closing the dialog
     */
    public void performCloseAction() throws CoeusException{
        if(checkSaveRequired()){
            int option = CoeusOptionPane.showQuestionDialog(
                    coeusMessageResources.parseMessageKey("budget_baseWindow_exceptionCode.1402"),
                    CoeusOptionPane.OPTION_YES_NO_CANCEL,2);
            switch( option ) {
                case (CoeusOptionPane.SELECTION_YES):
                    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
                    btnOkActionPerformed(new ActionEvent(btnOk, 1001, "OK"));
                    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                    break;
                case(CoeusOptionPane.SELECTION_NO):
                    setSaveRequired(false);
                    dispose();
                    break;
                default:
                    break;
            }
        }else {
            this.dispose();
        }
    }
    /**
     * Performs the amending for a document 
     * @return boolean true if successful
     * @throws CoeusException
     */
    public boolean performAmendAction() throws CoeusException{
        if(validateForm()){
            if(isFileSelected()){
                if(getBlobData().length == 0 ){
                    CoeusOptionPane.showErrorDialog(
                            coeusMessageResources.parseMessageKey("protocolUpload_exceptionCode.1005"));
                    return false;
                }
                uploadDocBean.setDocument(getBlobData());
            }else{
                CoeusOptionPane.showInfoDialog(coeusMessageResources.parseMessageKey(
                        "protocolUpload_exceptionCode.1020"));
                return false;
            }
        }
        ComboBoxBean cmbTypeCode =
                (ComboBoxBean)cmbDocumentType.getSelectedItem();
        uploadDocBean.setDocCode(Integer.parseInt(cmbTypeCode.getCode()));
        uploadDocBean.setFileName(txtFileName.getText().trim());
        uploadDocBean.setDescription(txtDescription.getText().trim());
        uploadDocBean.setStatusCode(1);
        uploadDocBean.setAcType(TypeConstants.INSERT_RECORD);
        newDocumentId = false;
        newVersion = true;
        boolean isSuccess = saveUploadDocument();
        return isSuccess;
    }
    
    
    /**
     * method to perform upload document operation
     * @return boolean true if successful
     * @throws CoeusException If Any exception occurs
     */
    private boolean performUploadAction() throws CoeusException{
        boolean isSuccess = false;
        if(validateForm()){
            if(isFileSelected()){
                if(getBlobData().length == 0 ){
                    CoeusOptionPane.showErrorDialog(
                            coeusMessageResources.parseMessageKey("protocolUpload_exceptionCode.1005"));
                    return false;
                }
            }
            ComboBoxBean cmbTypeCode =
                    (ComboBoxBean)cmbDocumentType.getSelectedItem();
            uploadDocBean.setDescription(txtDescription.getText().trim());
            uploadDocBean.setDocCode(Integer.parseInt(cmbTypeCode.getCode()));
            uploadDocBean.setDocument(getBlobData());
            uploadDocBean.setFileName(txtFileName.getText().trim());
            uploadDocBean.setStatusCode(1);
            uploadDocBean.setAcType(TypeConstants.INSERT_RECORD);
            newVersion = true;
            newDocumentId = true;
            isSuccess = saveUploadDocument();
        }
        return isSuccess;
    }
    
    /**
     * Method to validate form data
     * @return boolean true data is valid else false
     */
    private boolean validateForm() {
        if(txtDescription.getText() != null && txtFileName.getText() != null){
            if(txtDescription.getText().trim().length() == 0){
                CoeusOptionPane.showInfoDialog(
                        coeusMessageResources.parseMessageKey("protocolUpload_exceptionCode.1006"));
                txtDescription.requestFocusInWindow();
                return false;
            }
            if(txtDescription.getText().trim().length()>=200){
                CoeusOptionPane.showInfoDialog(
                        coeusMessageResources.parseMessageKey("protocolUpload_exceptionCode.1018"));
                txtDescription.requestFocusInWindow();
                return false;
            }
            if(txtFileName.getText().trim().length() == 0){
                CoeusOptionPane.showInfoDialog(
                        coeusMessageResources.parseMessageKey("protocolUpload_exceptionCode.1007"));
                return false;
            }
            if(txtFileName.getText().trim().length()>=300){
                CoeusOptionPane.showInfoDialog(
                        coeusMessageResources.parseMessageKey("protocolUpload_exceptionCode.1019"));
                txtDescription.requestFocusInWindow();
                return false;
            }
            /*COEUSQA-2954 Attachment history should keep previous version of the attachment after it 
                                           is changed in response to a request for revisions-Start */
            if(!isFileSelected()&& DOCUMENT_STATUS_FINALIZED == uploadDocBean.getStatusCode()){                             
                CoeusOptionPane.showInfoDialog(coeusMessageResources.parseMessageKey(
                       "protocolUpload_exceptionCode.1020"));
                return false;
            }
            /*COEUSQA-2954 Attachment history should keep previous version of the attachment after it 
                                              is changed in response to a request for revisions-End */
        }
        return true;
    }
    
    /**
     * Save the upload document to the db
     *@return boolean - true if success
     */
    public boolean saveUploadDocument() throws CoeusException{
        boolean success = true;
        requester = new RequesterBean();
        Vector vecServerObjects = new Vector();
        vecServerObjects.add(0,uploadDocBean);
        vecServerObjects.add(1, new Boolean(newDocumentId));
        vecServerObjects.add(2, new Boolean(newVersion));
        requester.setDataObjects(vecServerObjects);
        requester.setFunctionType(ADD_UPD_DEL_DOC_DATA);
        AppletServletCommunicator comm = new AppletServletCommunicator(connectTo, requester);
        comm.send();
        
        responder = comm.getResponse();
        
        if(!responder.isSuccessfulResponse()){
            success = false;
            throw new CoeusException(responder.getMessage(),0);
        }
        return success;
    }
    
    /**
     *  Disable the components of the form according to the functionType
     * @param functionType the mode in which the window is opened
     */
    private void disableComponents(char functionType){
        if(functionType == MODIFY_DOCUMENT){
            txtDescription.setEditable(true);
            lblDocumentStatus.setVisible(false);
            cmbDocumentStatus.setVisible(false);
            setTitle("Modify Document");
        }else if(functionType == CHANGE_STATUS){
            btnBrowse.setVisible(false);
            setTitle("Change Document Status");
        }else if(functionType == ADD_DOCUMENT ){
            cmbDocumentType.setEnabled(true);
            txtDescription.setEditable(true);
            lblDocumentStatus.setVisible(false);
            cmbDocumentStatus.setVisible(false);
            setTitle("Add Document");
        }else if(functionType == AMEND_DOCUMENT){
            cmbDocumentType.setEnabled(false);
            txtDescription.setEditable(true);
            lblDocumentStatus.setVisible(false);
            cmbDocumentStatus.setVisible(false);
            setTitle("Amend Document");
        }
    }
    /**
     * Populate the data in the form fields
     */
    private void setFormData(){
        if(uploadDocBean!=null){
            cmbDocumentType.setModel(new DefaultComboBoxModel(cvDocType));
            cmbDocumentType.setSelectedIndex(getDocumentTypeIndex());
            txtDescription.setText(uploadDocBean.getDescription());
            txtFileName.setText(uploadDocBean.getFileName());
            /*
             * Add the status of the uploadDocumentBean into the status combobox
             * and according to the status of the document and the status of the
             * protocol, add the next status into the comboBox.
             */
            cvDocStatus = new CoeusVector();
            ComboBoxBean comboBoxBean = null;
            if(uploadDocBean.getStatusDescription()!=null &&
                    !uploadDocBean.getStatusDescription().trim().equals("")){
                comboBoxBean = new ComboBoxBean();
                comboBoxBean.setCode(Integer.toString(uploadDocBean.getStatusCode()));
                comboBoxBean.setDescription(uploadDocBean.getStatusDescription());
                cvDocStatus.add(comboBoxBean);
                
                if(uploadDocBean.getStatusDescription().trim().equals(DRAFT)){
                    comboBoxBean = new ComboBoxBean();
                    comboBoxBean.setCode("2");
                    comboBoxBean.setDescription("Submitted");
                    cvDocStatus.add(comboBoxBean);
                }else if(uploadDocBean.getStatusDescription().trim().equals("Submitted") &&
                        (protocolInfoBean.getProtocolStatusCode() == 102 ||
                        protocolInfoBean.getProtocolStatusCode() == 104 ) ){
                    comboBoxBean = new ComboBoxBean();
                    comboBoxBean.setCode("1");
                    comboBoxBean.setDescription(DRAFT);
                    cvDocStatus.add(comboBoxBean);
                }else if(uploadDocBean.getStatusDescription().trim().equals("Submitted") &&
                        protocolInfoBean.getProtocolStatusCode() == 200){
                    comboBoxBean = new ComboBoxBean();
                    comboBoxBean.setCode("3");
                    comboBoxBean.setDescription("Approved");
                    cvDocStatus.add(comboBoxBean);
                }
            }
            
            cmbDocumentStatus.setModel(new DefaultComboBoxModel(cvDocStatus));
            if(cmbDocumentStatus.isVisible()){
                cmbDocumentStatus.setSelectedIndex(getDocumentStatusIndex());
            }
        }
    }
    
    /**
     * Get the index to be set selected for the document type combobox
     * @return int -index
     */
    public int getDocumentTypeIndex(){
        int index = 0;
        if(uploadDocBean!=null && cvDocType!=null && uploadDocBean.getDocType()!=null){
            for(int i = 0; i<cvDocType.size(); i++){
                if(uploadDocBean.getDocType().equalsIgnoreCase(cvDocType.get(i).toString())){
                    index = i;
                    break;
                }
            }
        }
        return index;
    }
    /**
     * Get the index to be set selected for the document status combobox
     * @return int - index
     */
    public int getDocumentStatusIndex(){
        int index = 0;
        if(uploadDocBean!=null && cvDocStatus!=null && uploadDocBean.getStatusDescription()!=null){
            for(int i = 0; i<cvDocStatus.size(); i++){
                if(uploadDocBean.getStatusDescription().equalsIgnoreCase(cvDocStatus.get(i).toString())){
                    index = i;
                    break;
                }
            }
        }
        return index;
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ProtocolUploadModifyForm(new javax.swing.JFrame(), true).setVisible(true);
//            }
//        });
//    }
    
    public char getFunctionType() {
        return functionType;
    }
    
    public void setFunctionType(char functionType) {
        this.functionType = functionType;
    }
    
    public CoeusVector getCvDocType() {
        return cvDocType;
    }
    
    public void setCvDocType(CoeusVector cvDocType) {
        this.cvDocType = cvDocType;
    }
    
    public boolean isFileSelected() {
        return fileSelected;
    }
    
    public void setFileSelected(boolean fileSelected) {
        this.fileSelected = fileSelected;
    }
    
    public byte[] getBlobData() {
        return blobData;
    }
    
    public void setBlobData(byte[] blobData) {
        this.blobData = blobData;
    }
    
    public JTable getTblDocuments() {
        return tblDocuments;
    }
    
    public void setTblDocuments(JTable tblDocuments) {
        this.tblDocuments = tblDocuments;
    }
    
    public boolean isNewVersion() {
        return newVersion;
    }
    
    public void setNewVersion(boolean newVersion) {
        this.newVersion = newVersion;
    }
    
    public boolean isNewDocumentId() {
        return newDocumentId;
    }
    
    public void setNewDocumentId(boolean newDocumentId) {
        this.newDocumentId = newDocumentId;
    }
    
    public boolean isSaveRequired() {
        return saveRequired;
    }
    
    public void setSaveRequired(boolean saveRequired) {
        this.saveRequired = saveRequired;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private edu.mit.coeus.utils.CoeusComboBox cmbDocumentStatus;
    private edu.mit.coeus.utils.CoeusComboBox cmbDocumentType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDocumentStatus;
    private javax.swing.JLabel lblDocumentType;
    private javax.swing.JLabel lblFileName;
    private edu.mit.coeus.utils.CoeusTextField txtDescription;
    private edu.mit.coeus.utils.CoeusTextField txtFileName;
    // End of variables declaration//GEN-END:variables
    
}
