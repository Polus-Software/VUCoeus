/*
 * ScheduleActionInputForm.java
 *
 * Created on May 5, 2003, 1:11 PM
 */

/* PMD check performed, and commented unused imports and variables on 16-JULY-2010
 * by George J Nirappeal
 */

package edu.mit.coeus.irb.gui;


import edu.mit.coeus.gui.* ;
import edu.mit.coeus.irb.bean.ProtocolRiskLevelBean;
import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.utils.ScreenFocusTraversalPolicy;

import java.awt.*;
import java.awt.event.*;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.*;
import java.util.Date;
import edu.mit.coeus.gui.CoeusMessageResources;
import edu.mit.coeus.gui.CoeusDlgWindow ;
import edu.mit.coeus.utils.*;
import edu.mit.coeus.brokers.* ;
import edu.mit.coeus.irb.bean.ProtocolSubmissionInfoBean;
import edu.mit.coeus.irb.bean.ProtocolActionsBean;
import java.sql.Timestamp;



public class ScheduleActionApprovalForm extends CoeusDlgWindow {
	private CoeusMessageResources coeusMessageResources;
	//Commented for pmd check, unused private field
	//private final String CODE_TABLE_SERVLET = "/CodeTableServlet";
	
	 private Frame parent;
        //Commented for pmd check, unused private field
	//private CoeusDlgWindow thisWindow ;
	
	private String title ;
	private String prompt ;
	private String defValue ;
	private String userInput ;
	private boolean continueAction ;
	
	//holds approval date
	private java.sql.Date approvalDate;
	//holds expiration date
	private java.sql.Date expirationDate;
	
	//holds action date added by Jobin
	private java.sql.Date actionDate;
	//Commented for pmd check, unused private field.
	//private CoeusFontFactory fontFactory;
	
	
	private DateUtils dtUtils = new DateUtils();
	private java.text.SimpleDateFormat dtFormat
	= new java.text.SimpleDateFormat("MM/dd/yyyy");
	
	private boolean lockSchedule = true;
	private Vector reviewComments;
	private ReviewCommentsForm reviewCommentsForm;
	private ProtocolActionsBean actionBean;
	private ProtocolSubmissionInfoBean protocolSubmissionInfoBean;
	private boolean releaseLock;
        //Added for case 2176 - Risk Level - start
        private CoeusVector riskLevels = null;
        private boolean riskAcessedFirstTime = true;
        //Added for case 2176 - Risk Level - end
        //Added for COEUSDEV-330 : Expedited Amendment approval box changes if we SMR an amendment - start
        private static final char AMENDMENT = 'A';       
        //Commented for pmd check, unused local variable.
        //private static final char RENEWAL = 'R';
        
        private static final String DATE_FORMAT_DD_MMM_YYYY = "dd-MMM-yyyy";
        //COEUSDEV-330 : End
	/** Creates new form ScheduleActionInputForm */
	public ScheduleActionApprovalForm(Frame parent, String title, String prompt, String defValue) {
		super(parent,title,true);
		this.parent = parent ;
		this.title = title ;
		this.prompt = prompt ;
		this.defValue = defValue ;
		initComponents();
		pnlInput.setSize(500, 325) ;
		
		initialiseData();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlInput = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblComments = new javax.swing.JLabel();
        scrpnlInput = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        lblPrompt = new javax.swing.JTextArea();
        lblActionDate = new javax.swing.JLabel();
        txtActionDate = new edu.mit.coeus.utils.CoeusTextField();
        lblApprovalDate = new javax.swing.JLabel();
        lblExpirationDate = new javax.swing.JLabel();
        txtApprovalDate = new edu.mit.coeus.utils.CoeusTextField();
        txtExpirationDate = new edu.mit.coeus.utils.CoeusTextField();
        btnReviewComments = new javax.swing.JButton();
        btnRiskLevel = new javax.swing.JButton();

        pnlInput.setLayout(new java.awt.GridBagLayout());

        pnlInput.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlInput.setMaximumSize(new java.awt.Dimension(300, 100));
        pnlInput.setMinimumSize(new java.awt.Dimension(300, 100));
        pnlInput.setPreferredSize(new java.awt.Dimension(300, 100));
        btnOk.setFont(CoeusFontFactory.getLabelFont());
        btnOk.setMnemonic('o');
        btnOk.setText("OK");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 0, 4);
        pnlInput.add(btnOk, gridBagConstraints);

        btnCancel.setFont(CoeusFontFactory.getLabelFont());
        btnCancel.setMnemonic('c');
        btnCancel.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 7, 0, 4);
        pnlInput.add(btnCancel, gridBagConstraints);

        lblComments.setFont(CoeusFontFactory.getLabelFont()
        );
        lblComments.setText("Comments :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 0, 0);
        pnlInput.add(lblComments, gridBagConstraints);

        scrpnlInput.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrpnlInput.setMaximumSize(new java.awt.Dimension(100, 100));
        scrpnlInput.setMinimumSize(new java.awt.Dimension(100, 100));
        scrpnlInput.setPreferredSize(new java.awt.Dimension(100, 100));
        txtInput.setRows(2000);
        txtInput.setMaximumSize(new java.awt.Dimension(100, 150));
        txtInput.setMinimumSize(new java.awt.Dimension(100, 150));
        scrpnlInput.setViewportView(txtInput);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 1, 0);
        pnlInput.add(scrpnlInput, gridBagConstraints);

        lblPrompt.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderColor"));
        lblPrompt.setEditable(false);
        lblPrompt.setRows(2);
        lblPrompt.setMaximumSize(new java.awt.Dimension(100, 50));
        lblPrompt.setMinimumSize(new java.awt.Dimension(100, 50));
        lblPrompt.setPreferredSize(new java.awt.Dimension(100, 34));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 0);
        pnlInput.add(lblPrompt, gridBagConstraints);

        lblActionDate.setFont(CoeusFontFactory.getLabelFont()
        );
        lblActionDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblActionDate.setText("Action Date: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 0, 0);
        pnlInput.add(lblActionDate, gridBagConstraints);

        txtActionDate.setFont(CoeusFontFactory.getNormalFont());
        txtActionDate.setMinimumSize(new java.awt.Dimension(120, 20));
        txtActionDate.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 4, 0);
        pnlInput.add(txtActionDate, gridBagConstraints);

        lblApprovalDate.setFont(CoeusFontFactory.getLabelFont()
        );
        lblApprovalDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblApprovalDate.setText("Approval Date: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 0, 0);
        pnlInput.add(lblApprovalDate, gridBagConstraints);

        lblExpirationDate.setFont(CoeusFontFactory.getLabelFont()
        );
        lblExpirationDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExpirationDate.setText("Expiration Date: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 0, 0);
        pnlInput.add(lblExpirationDate, gridBagConstraints);

        txtApprovalDate.setFont(CoeusFontFactory.getNormalFont());
        txtApprovalDate.setMinimumSize(new java.awt.Dimension(120, 20));
        txtApprovalDate.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlInput.add(txtApprovalDate, gridBagConstraints);

        txtExpirationDate.setFont(CoeusFontFactory.getNormalFont());
        txtExpirationDate.setMinimumSize(new java.awt.Dimension(120, 20));
        txtExpirationDate.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlInput.add(txtExpirationDate, gridBagConstraints);

        btnReviewComments.setFont(CoeusFontFactory.getLabelFont());
        btnReviewComments.setMnemonic('R');
        btnReviewComments.setText("Review Comments");
        btnReviewComments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReviewCommentsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 0, 4);
        pnlInput.add(btnReviewComments, gridBagConstraints);

        btnRiskLevel.setFont(CoeusFontFactory.getLabelFont());
        btnRiskLevel.setMnemonic('L');
        btnRiskLevel.setText("Risk Level");
        btnRiskLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRiskLevelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 0, 4);
        pnlInput.add(btnRiskLevel, gridBagConstraints);

        getContentPane().add(pnlInput, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void btnRiskLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRiskLevelActionPerformed
        String protocolNumber = actionBean.getProtocolNumber();
        if( protocolNumber.indexOf( 'A' ) != -1 ||  protocolNumber.indexOf( 'R' ) != -1 ) {
            protocolNumber = protocolNumber.substring(0,10);
        }
        
        RiskLevelForm riskLevelForm = new RiskLevelForm(protocolNumber,true);
        if(riskAcessedFirstTime){
            riskLevelForm.setFormData(null); 
        }else{
            riskLevelForm.setFormData(riskLevels); 
        }
        riskLevelForm.display();
        
        if(riskLevelForm.isOkButtonClicked()){
            
            riskLevels = new CoeusVector();
            CoeusVector cvRiskLevels = riskLevelForm.getProtocolRiskLevels();
            if(cvRiskLevels!=null && cvRiskLevels.size() > 0){
                riskAcessedFirstTime = false;
                ProtocolRiskLevelBean riskLevelBean = null;
                 try {
                    for(int i=0; i<cvRiskLevels.size(); i++){
                        riskLevelBean =  (ProtocolRiskLevelBean)ObjectCloner.deepCopy(cvRiskLevels.get(i));
                        riskLevels.add(riskLevelBean);
                    }
                 } catch (Exception ex) {
                        ex.printStackTrace();
                 }
            }
        }
    }//GEN-LAST:event_btnRiskLevelActionPerformed
	
    private void btnReviewCommentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReviewCommentsActionPerformed
		// Add your handling code here:
		try{
			if( reviewCommentsForm == null ) {
				reviewCommentsForm = new ReviewCommentsForm(true);
				reviewCommentsForm.setSaveToDatabase(false);
				reviewCommentsForm.setLockSchedule(lockSchedule);
				RequesterBean requesterBean = new RequesterBean();
				protocolSubmissionInfoBean = new ProtocolSubmissionInfoBean();
				protocolSubmissionInfoBean.setProtocolNumber(actionBean.getProtocolNumber());
				protocolSubmissionInfoBean.setSequenceNumber(actionBean.getSequenceNumber());
				protocolSubmissionInfoBean.setSubmissionNumber(actionBean.getSubmissionNumber());
				requesterBean.setDataObject(protocolSubmissionInfoBean);
				requesterBean.setFunctionType('T');
				AppletServletCommunicator comm = new AppletServletCommunicator(
				CoeusGuiConstants.CONNECTION_URL + "/scheduleMaintSrvlt",
				requesterBean);
				comm.send();
				ResponderBean responderBean = comm.getResponse();
				if(! responderBean.isSuccessfulResponse()){
					reviewCommentsForm.setFunctionType(TypeConstants.DISPLAY_MODE);
				}else {
					reviewCommentsForm.setFunctionType(TypeConstants.MODIFY_MODE);
				}
				Vector dataObjects = responderBean.getDataObjects();
				protocolSubmissionInfoBean = ( ProtocolSubmissionInfoBean ) dataObjects.get(0);
			}
			if( reviewComments == null ) {
				String protocolNumber = protocolSubmissionInfoBean.getProtocolNumber();
				int seqNo = protocolSubmissionInfoBean.getSequenceNumber();
				int subNo = protocolSubmissionInfoBean.getSubmissionNumber();
				reviewCommentsForm.setFormData(protocolNumber, subNo, seqNo);
			}else{
				if( reviewCommentsForm.getFunctionType() == TypeConstants.MODIFY_MODE ) {
					reviewCommentsForm.setLockSchedule(false);
				}
				reviewCommentsForm.setFormData(protocolSubmissionInfoBean,
				(Vector)ObjectCloner.deepCopy(reviewComments));
			}
			if( reviewCommentsForm.getFunctionType() == TypeConstants.MODIFY_MODE
			&& lockSchedule) {
				releaseLock = true;
			}
			reviewCommentsForm.display();
			if( reviewCommentsForm.isSaveRequired() ) {
				reviewComments = reviewCommentsForm.getData();
			}
		}catch(Exception e ) {
			CoeusOptionPane.showInfoDialog( e.getMessage());
		}
    }//GEN-LAST:event_btnReviewCommentsActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnCancel;
    public javax.swing.JButton btnOk;
    public javax.swing.JButton btnReviewComments;
    public javax.swing.JButton btnRiskLevel;
    public javax.swing.JLabel lblActionDate;
    public javax.swing.JLabel lblApprovalDate;
    public javax.swing.JLabel lblComments;
    public javax.swing.JLabel lblExpirationDate;
    public javax.swing.JTextArea lblPrompt;
    public javax.swing.JPanel pnlInput;
    public javax.swing.JScrollPane scrpnlInput;
    public edu.mit.coeus.utils.CoeusTextField txtActionDate;
    public edu.mit.coeus.utils.CoeusTextField txtApprovalDate;
    public edu.mit.coeus.utils.CoeusTextField txtExpirationDate;
    public javax.swing.JTextArea txtInput;
    // End of variables declaration//GEN-END:variables
	
	
	private void initialiseData() {
		
                //Modified for case 2176 - Risk Levels - start
                //Added the button btnRiskLevel
		java.awt.Component[] components = {txtApprovalDate,
                    txtExpirationDate,txtInput,txtActionDate,btnOk, btnCancel,
                    btnReviewComments, btnRiskLevel};
                //Modified for case 2176 - Risk Levels - end
		ScreenFocusTraversalPolicy traversePolicy = new ScreenFocusTraversalPolicy( components );
		setFocusTraversalPolicy(traversePolicy);
		setFocusCycleRoot(true);
		
		btnOk.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					if (validateData()) {
						if (txtInput != null) {
							if (txtInput.getText().trim().length() == 0) {
								userInput = defValue ;
							} else {
								userInput = txtInput.getText().trim() ;
							}
						} else {
							userInput = defValue ;
						}
						
						approvalDate = new java.sql.Date(dtFormat.parse(
						dtUtils.restoreDate(txtApprovalDate.getText(),"/-:,.")).getTime()) ;
						
						expirationDate = new java.sql.Date(dtFormat.parse(
						dtUtils.restoreDate(txtExpirationDate.getText(),"/-:,.")).getTime()) ;
						
						actionDate = new java.sql.Date(dtFormat.parse(
						dtUtils.restoreDate(txtActionDate.getText(),"/-:,.")).getTime()) ;
						
						//continueAction = true ;
						//dispose() ;
                                                //Added for internal issue fix 77 start
                                                coeusMessageResources = CoeusMessageResources.getInstance();
                                                if(expirationDate != null && approvalDate != null){
                                                        if( (expirationDate.compareTo(approvalDate) <0 )) {
                                                                /* Expiration Date is earlier than
                                                                   Approval Date */
                                                                //CoeusOptionPane.showErrorDialog("Expiration date is not valid") ;
                                                                setRequestFocusInThread(txtExpirationDate);
                                                                CoeusOptionPane.showErrorDialog(coeusMessageResources.parseMessageKey("actionInputFrm_exceptionCode.2054"));
                                                                continueAction= false;
                                                        }else{
                                                            continueAction = true ;
                                                            dispose() ;
                                                        }
                                                }
                                               
                                                //Added for internal issue fix 77 end
                                                
					} else {
						CoeusOptionPane.showErrorDialog("Please enter a valid date in mm/dd/yyyy format.") ;
					}
				}
				catch(Exception ex) {
					CoeusOptionPane.showErrorDialog("Please enter a valid date in mm/dd/yyyy format.") ;
					ex.printStackTrace() ;
				}
				
				
			}
			
		});
		
		btnCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				userInput = "" ; //defValue ;
				continueAction = false ;
				if( releaseScheduleLock() ) {
					releaseUpdateLock();
				}
				dispose() ;
			}
		});
		addEscapeKeyListener( new AbstractAction("escPressed"){
			public void actionPerformed(ActionEvent ae){
				userInput = "" ; //defValue ;
				continueAction = false ;
				if( releaseScheduleLock() ) {
					releaseUpdateLock();
				}
				dispose() ;
			}
		});
		setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent we){
				userInput = "" ; //defValue ;
				continueAction = false ;
				if( releaseScheduleLock() ) {
					releaseUpdateLock();
				}
				dispose() ;
			}
		});
		
		btnOk.setFont(CoeusFontFactory.getLabelFont()) ;
		btnCancel.setFont(CoeusFontFactory.getLabelFont()) ;
		
		lblComments.setFont(CoeusFontFactory.getLabelFont()) ;
		
		
		txtInput.setPreferredSize(new Dimension(100, 150)) ;
		
		txtInput.setLineWrap(true) ;
		txtInput.setWrapStyleWord(true) ;
		txtInput.setDocument(new LimitedPlainDocument( 2000 ));
		txtInput.setFont(CoeusFontFactory.getNormalFont()) ;
		
		lblPrompt.setWrapStyleWord(true);
		lblPrompt.setLineWrap(true);
		lblPrompt.setDocument(new LimitedPlainDocument( 150 ));
		lblPrompt.setFont(CoeusFontFactory.getLabelFont()) ;
		
		lblPrompt.setText(prompt) ;
		txtInput.setText(defValue) ;
		
		lblApprovalDate.setFont(CoeusFontFactory.getLabelFont()) ;
		txtApprovalDate.setFont(CoeusFontFactory.getNormalFont()) ;
		
		lblExpirationDate.setFont(CoeusFontFactory.getLabelFont()) ;
		txtExpirationDate.setFont(CoeusFontFactory.getNormalFont()) ;
		//Fix the date issue with wrong timezone
//		String todayDate = dtUtils.formatDate(
//		(new java.sql.Timestamp(
//		(new java.util.Date()).getTime())).toString(),
//		DATE_FORMAT_DD_MMM_YYYY);
                Timestamp todayTS = CoeusUtils.getDBTimeStamp();
                String todayDate = dtUtils.formatDate(todayTS.toString(),
                                                        DATE_FORMAT_DD_MMM_YYYY);
                
		java.util.GregorianCalendar cal = new
		java.util.GregorianCalendar(java.util.TimeZone.getDefault());
		
		cal.roll(Calendar.YEAR, 1) ;
		int year = cal.get(Calendar.YEAR) ;
		
		//  incrementing the month as in Calendar class month index starts from zero
		int mon = cal.get(Calendar.MONTH) ;
		mon = mon + 1 ;
		
		cal.roll(Calendar.DATE, -1) ;
		int day = cal.get(Calendar.DATE) ;
		
		System.out.println("next year" + mon + "/" + day + "/" + year ) ;
		
		String expiryDate = dtUtils.formatDate( mon + "/" + day + "/" + year, "/", DATE_FORMAT_DD_MMM_YYYY);
		
		txtApprovalDate.setDocument(new LimitedPlainDocument(11));
		txtApprovalDate.addFocusListener(new CustomFocusAdapter());
		
		txtExpirationDate.setDocument(new LimitedPlainDocument(11));
		txtExpirationDate.addFocusListener(new CustomFocusAdapter());
		
		txtActionDate.setDocument(new LimitedPlainDocument(11));
		txtActionDate.addFocusListener(new CustomFocusAdapter());
		
		txtApprovalDate.setText(todayDate);
		txtExpirationDate.setText(expiryDate);
		txtActionDate.setText(todayDate);
		
	}
	
	public void showForm() {
		/* Case 818  start - prahalad - May 10 2004 */
		// if check was added to make sure that ApprovalDate and ExpirationDate are hidden when
		// Expedited Approval or Approval action is requested by the user on a Amendment i.e protocol with
		// submissiontype = 102
		if (this.actionBean != null) {
			if ((this.actionBean.getActionTypeCode() == 205
                                || this.actionBean.getActionTypeCode() == 204
                                || this.actionBean.getActionTypeCode() == 208)  // Expedited Approval or Approval
                                //Modified for COEUSDEV-330 : Expedited Amendment approval box changes if we SMR an amendment - start
                                //Instead of check amendment in submission type code, checked for protocol number
			//&&   getProtocolSubmissionTypeCode() == 102) // Amendment
                                && (this.actionBean.getProtocolNumber().indexOf(AMENDMENT) != -1))//COEUSDEV-330 : End
			{
				lblApprovalDate.setVisible(false) ;
				txtApprovalDate.setVisible(false) ;
				lblApprovalDate.setEnabled(false) ;
				txtApprovalDate.setEnabled(false) ;
				
				lblExpirationDate.setVisible(false) ;
				txtExpirationDate.setVisible(false) ;
				lblExpirationDate.setEnabled(false) ;
				txtExpirationDate.setEnabled(false) ;
			}
			else {
				//prps start feb 17 2004
                                //For Case Fix #1713 Start
                            /*
                             *  Commented by Geo to show approval date if its renewal
                             *  ie, submission type code is Continuing Review/Continuation
                             */
                                /*if(getProtocolSubmissionTypeCode() == 101) {
                                    lblApprovalDate.setVisible(false) ;
                                    txtApprovalDate.setVisible(false) ;
                                    lblApprovalDate.setEnabled(false) ;
                                    txtApprovalDate.setEnabled(false) ;
                                }
                                else*/
                                if(getProtocolSubmissionTypeCode() == 112){
                                    lblApprovalDate.setVisible(false) ;
                                    txtApprovalDate.setVisible(false) ;
                                    lblApprovalDate.setEnabled(false) ;
                                    txtApprovalDate.setEnabled(false) ;

                                    lblExpirationDate.setVisible(false) ;
                                    txtExpirationDate.setVisible(false) ;
                                    lblExpirationDate.setEnabled(false) ;
                                    txtExpirationDate.setEnabled(false) ;
                                }
                                else {
                                    txtApprovalDate.setText(getOriginalApprovalDate()) ;
                                }
                                //Case fix End
                                try{
                                    showExpiryDate();
                                }catch(java.text.ParseException PException){
					// CoeusOptionPane.showErrorDialog("Please enter a valid date in mm/dd/yyyy format.");
				}
				//prps end feb 17 2004
			}
                        //Added for case 2176 - Risk level category - start
                        //Make the risk level button visible only for Expedited Approval
                        //and Response Approval
                        int actionTypeCode = this.actionBean.getActionTypeCode();
                        // 4183:Risk level for Full review protocols - Start
//                        if(actionTypeCode == 205 || actionTypeCode == 208){
                        if(actionTypeCode == 205 || actionTypeCode == 208 || actionTypeCode == 204){
                            // Action is Expedited Approval OR Rsponse Approval OR Full Board Approval
                        // 4183:Risk level for Full review protocols - End
                            btnRiskLevel.setVisible(true);
                        }else{
                            btnRiskLevel.setVisible(false);
                        }
                       //Added for case 2176 - Risk level category - end
		}
		// end else
		//        thisWindow = new CoeusDlgWindow(parent, title, true);
		//
		//       thisWindow.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
		//
		//       thisWindow.getContentPane().add(pnlInput) ;
		//       thisWindow.setSize(520, 325);
		//       Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		//
		//       Dimension dlgSize = thisWindow.getSize();
		//       thisWindow.setLocation(screenSize.width/2 - (dlgSize.width/2),
		//       screenSize.height/2 - (dlgSize.height/2));
		//
		//       thisWindow.setResizable(true) ;
		//       thisWindow.show() ;
		setSize(520, 325);
		setLocation(CoeusDlgWindow.CENTER);
		setResizable(false);
		show();
		
	}
	
	
	
	public boolean validateData() throws Exception {
		if (txtApprovalDate.getText()== null) {
			/* Application Date doesn't have any value */
			setRequestFocusInThread(txtApprovalDate);
			return false;
		} else if (txtExpirationDate.getText() == null) {
			setRequestFocusInThread(txtExpirationDate);
			return false;
		} else if (txtActionDate.getText() == null) {
			setRequestFocusInThread(txtActionDate);
			return false;
		} else if (txtApprovalDate.getText().trim().length() <= 0) {
			setRequestFocusInThread(txtApprovalDate);
			return false ;
		} else if (txtExpirationDate.getText().trim().length() <= 0) {
			setRequestFocusInThread(txtExpirationDate);
			return false ;
		} else if (txtActionDate.getText().trim().length() <= 0) {
			setRequestFocusInThread(txtActionDate);
			return false ;
		} else{
                      //Commented for pmd check, unused local variable
			//Date applnDate = null;
			Date apprDate = null;
			Date expDate = null;
			
			String oldDate;
			String convertedDate ;
			if((txtApprovalDate.getText() != null)
			&& (txtApprovalDate.getText().trim().length() > 0)){
				
				convertedDate = dtUtils.formatDate(txtApprovalDate.getText(),
				"/-:,." , DATE_FORMAT_DD_MMM_YYYY);
				
				if (convertedDate==null){
					oldDate = dtUtils.restoreDate(txtApprovalDate.getText(),"/-:.,");
					if(oldDate == null || oldDate.equals(txtApprovalDate.getText())){
						//                        log(coeusMessageResources.parseMessageKey(
						//                                            "memMntFrm_exceptionCode.1048"));
						setRequestFocusInThread(txtApprovalDate);
						return false;
					}
				}
				apprDate = dtFormat.parse(
				dtUtils.restoreDate(txtApprovalDate.getText(),"/:-.,"));
				
				if(apprDate == null){
					//                    log(coeusMessageResources.parseMessageKey(
					//                                    "protoMntFrm_exceptionCode.1074"));
					setRequestFocusInThread(txtApprovalDate);
					return false;
				}
			}
			if((txtExpirationDate.getText() != null)
			&& (txtExpirationDate.getText().trim().length() > 0)){
				
				convertedDate = dtUtils.formatDate(txtExpirationDate.getText(),
				"/-:,." , DATE_FORMAT_DD_MMM_YYYY);
				if (convertedDate==null){
					oldDate = dtUtils.restoreDate(txtExpirationDate.getText(),"/-:.,");
					if(oldDate == null || oldDate.equals(txtExpirationDate.getText())){
						//                        log(coeusMessageResources.parseMessageKey(
						//                                            "memMntFrm_exceptionCode.1048"));
						setRequestFocusInThread(txtExpirationDate);
						return false;
					}
				}
				
				expDate = dtFormat.parse(
				dtUtils.restoreDate(txtExpirationDate.getText(),"/:-,."));
				if(expDate == null){
					//                    log(coeusMessageResources.parseMessageKey(
					//                                    "protoMntFrm_exceptionCode.1075"));
					setRequestFocusInThread(txtExpirationDate);
					return false;
				}
			}
			//Commented for internal issue fix 77 start
                        
//			if(expDate != null && apprDate != null){
//				if( (expDate.compareTo(apprDate) <0 )) {
//					/* Expiration Date is earlier than
//					   Approval Date */
//					//CoeusOptionPane.showErrorDialog("Expiration date is not valid") ;
//					setRequestFocusInThread(txtExpirationDate);
//					return false;
//				}
//			}
                        
                        //Commented for internal issue fix 77 end
			
		}
		return true;
	}
	
	
	
	/**
	 * Custom focus adapter which is used for text fields which consists of
	 * date values. This is mainly used to format and restore the date value
	 * during focus gained / focus lost of the text field.
	 */
	private class CustomFocusAdapter extends FocusAdapter{
		//hols the data display Text Field
		CoeusTextField dateField;
		String strDate = "";
		String oldData = "";
		boolean temporary = false;
		
		public void focusGained(FocusEvent fe){
			if (fe.getSource() instanceof CoeusTextField){
				dateField = (CoeusTextField)fe.getSource();
				if ( (dateField.getText() != null)
				&&  (!dateField.getText().trim().equals(""))) {
					oldData = dateField.getText();
					String focusDate = dtUtils.restoreDate(
					dateField.getText(),"/-:,");
					dateField.setText(focusDate);
				}
			}
		}
		
		public void focusLost(FocusEvent fe){
			if (fe.getSource() instanceof CoeusTextField){
				dateField = (CoeusTextField)fe.getSource();
				
				temporary = fe.isTemporary();
				if ( (dateField.getText() != null)
				&&  (!dateField.getText().trim().equals(""))
				&& (!temporary) ) {
					strDate = dateField.getText();
					String convertedDate =
					dtUtils.formatDate(dateField.getText(), "/-:," ,
					DATE_FORMAT_DD_MMM_YYYY);
					if (convertedDate==null){
						CoeusOptionPane.showErrorDialog("Please enter a valid date in mm/dd/yyyy format.");
						setRequestFocusInThread(dateField);
						dateField.setText(oldData);						
						temporary = true;
					}else {
						dateField.setText(convertedDate);
						temporary = false;
						if( fe.getSource() == txtApprovalDate ) {
							try{
								showExpiryDate();
							}catch(java.text.ParseException PException){
								CoeusOptionPane.showErrorDialog("Please enter a valid date in mm/dd/yyyy format.");
								setRequestFocusInThread(txtApprovalDate);
							}
						}
					}
				}
			}
		}
	}
	//Added by Jobin for the focus Issue 
	/*to set the focus in the respective fields*/
    private void setRequestFocusInThread(final Component component) {
        SwingUtilities.invokeLater( new Runnable() {
            public void run() {
                component.requestFocusInWindow();
            }
        });
    }
	
	//prps start - feb 17 2004
	private final char GET_APPROVAL_DATE = 'L' ;
	private static final String SCHEDULE_MAINTENANCE_SERVLET = "/scheduleMaintSrvlt";
	
	private String getOriginalApprovalDate() {
		String tempApprovalDate = dtUtils.formatDate((new java.sql.Timestamp(
		(new java.util.Date()).getTime())).toString(),
		DATE_FORMAT_DD_MMM_YYYY);
		if (actionBean != null) {
			RequesterBean requesterBean = new RequesterBean();
                        //Modified for GN444 issue# 63 - Start
                        Vector moduleCode = new Vector();
                        moduleCode.add(ModuleConstants.PERSON_MODULE_CODE);
			requesterBean.setDataObjects(moduleCode) ;
                        //Modified for GN444 issue# 63 - End
                        requesterBean.setId(actionBean.getScheduleId());
			requesterBean.setDataObject(this.actionBean);
			requesterBean.setFunctionType(GET_APPROVAL_DATE);
			AppletServletCommunicator comm = new AppletServletCommunicator(
			CoeusGuiConstants.CONNECTION_URL + SCHEDULE_MAINTENANCE_SERVLET,
			requesterBean);
			comm.send();
			ResponderBean responderBean = comm.getResponse();
			if(responderBean.isSuccessfulResponse()) {
				java.sql.Timestamp tempDate = (java.sql.Timestamp)responderBean.getDataObject() ;
				tempApprovalDate = dtUtils.formatDate((tempDate).toString(),
				DATE_FORMAT_DD_MMM_YYYY) ;
				
			}
		}
		
		return tempApprovalDate ;
	}
	
	
	//prps end feb 17 2004
	
	public void showExpiryDate() throws java.text.ParseException {
		/* Case 673
		 * When excemption is granted, set approval date to date of action.
		 * Expiry date should be NULL - prahalad start mar 1 2004
		 */
		if (this.actionBean != null) {
			//Modifified for Coeus enhancement Case id :1880 : start
			if (this.actionBean.getActionTypeCode() == 206 || this.actionBean.getActionTypeCode() == 210) // Grant Exemption
			{//Coeus enhancement Case id :1880 : end   
				lblExpirationDate.setVisible(false) ;
				txtExpirationDate.setVisible(false) ;
				lblExpirationDate.setEnabled(false) ;
				txtExpirationDate.setEnabled(false) ;
			}
			else {
				lblExpirationDate.setEnabled(true) ;
				txtExpirationDate.setEnabled(true) ;
				Date apprDate = null;
				String stDate = dtUtils.restoreDate(txtApprovalDate.getText(),"/:-,");
				apprDate = new java.sql.Date((dtFormat.parse(stDate)).getTime());
				java.util.GregorianCalendar cal = new java.util.GregorianCalendar();
				cal.setTimeInMillis(dtFormat.parse(stDate).getTime());
				
				cal.roll(Calendar.YEAR, 1) ;
				cal.set(Calendar.DATE,cal.get(Calendar.DATE)-1);
				String expDate = (cal.get(Calendar.MONTH)+1)+"/"
				+cal.get(Calendar.DATE)+"/"+(cal.get(Calendar.YEAR));
				txtExpirationDate.setText(dtUtils.formatDate( expDate, "/", DATE_FORMAT_DD_MMM_YYYY));
			}// end else
		}
		
		/* Case 673
		 * When excemption is granted, set approval date to date of action.
		 * Expiry date should be NULL - prahalad end mar 1 2004
		 */
		
	}
	
	public String getUserInput() {
		return userInput ;
	}
	
	public void setUserInput(String userInput ) {
		this.userInput = userInput ;
	}
	
	
	public java.sql.Date getApprovalDate() {
		return approvalDate;
	}
	
	
	public void setApprovalDate(java.sql.Date approvalDate) {
		this.approvalDate = approvalDate ;
	}
	
	public java.sql.Date getExpirationDate() {
		return expirationDate ;
	}
	
	
	public void setExpirationDate(java.sql.Date expirationDate) {
		this.expirationDate = expirationDate ;
	}
	
	
	public boolean performAction() {
		return continueAction ;
	}
	
	public void setContinueAction(boolean continueAction) {
		this.continueAction = continueAction ;
	}
	
	/** Getter for property lockSchedule.
	 * @return Value of property lockSchedule.
	 *
	 */
	public boolean isLockSchedule() {
		return lockSchedule;
	}
	
	/** Setter for property lockSchedule.
	 * @param lockSchedule New value of property lockSchedule.
	 *
	 */
	public void setLockSchedule(boolean lockSchedule) {
		this.lockSchedule = lockSchedule;
	}
	
	/** Getter for property reviewComments.
	 * @return Value of property reviewComments.
	 *
	 */
	public java.util.Vector getReviewComments() {
		return reviewComments;
	}
	/** Getter for property actionBean.
	 * @return Value of property actionBean.
	 *
	 */
	public ProtocolActionsBean getActionBean() {
		return actionBean;
	}
	
	/** Setter for property actionBean.
	 * @param actionBean New value of property actionBean.
	 *
	 */
	public void setActionBean(ProtocolActionsBean actionBean) {
		this.actionBean = actionBean;
	}
	private void releaseUpdateLock() {
		String connectTo = CoeusGuiConstants.CONNECTION_URL + "/scheduleMaintSrvlt";
		RequesterBean requester = new RequesterBean();
		String lockedScheduleId = protocolSubmissionInfoBean.getScheduleId();
		if( lockedScheduleId != null ) {
			requester.setDataObject(lockedScheduleId);
			requester.setFunctionType('Z');
			AppletServletCommunicator comm = new AppletServletCommunicator(connectTo,requester);
			//comm.releaseUpdateLock(refId,"/scheduleMaintSrvlt");
			comm.send();
			ResponderBean res = comm.getResponse();
			if (res != null && !res.isSuccessfulResponse()){
				CoeusOptionPane.showErrorDialog(res.getMessage());
				return;
			}
		}
	}
	public boolean releaseScheduleLock(){
		return releaseLock;
	}
	
	
	/* Case 818  start - prahalad - May 10 2004 */
	private int getProtocolSubmissionTypeCode() {
		int submisionTypeCode = 0 ;
		if (this.actionBean != null) {
			RequesterBean requesterBean = new RequesterBean();
			requesterBean.setId(actionBean.getScheduleId()) ;
			ProtocolSubmissionInfoBean reqProtocolSubmissionInfoBean = new ProtocolSubmissionInfoBean() ;
			reqProtocolSubmissionInfoBean.setProtocolNumber(this.actionBean.getProtocolNumber()) ;
			reqProtocolSubmissionInfoBean.setSubmissionNumber(this.actionBean.getSubmissionNumber()) ;
			
			requesterBean.setDataObject(reqProtocolSubmissionInfoBean);
			// 'R' is GET_REVIEW_COMMENTS just to reuse the existing code this is being used.
			requesterBean.setFunctionType('R');
			AppletServletCommunicator comm = new AppletServletCommunicator(
			CoeusGuiConstants.CONNECTION_URL + SCHEDULE_MAINTENANCE_SERVLET,
			requesterBean);
			comm.send();
			ResponderBean responderBean = comm.getResponse();
			if(responderBean.isSuccessfulResponse()) {
				
				Vector vecDataObject =  responderBean.getDataObjects() ;
				if (vecDataObject != null) {
					if (vecDataObject.size()>0) {
						ProtocolSubmissionInfoBean protocolSubmissionInfoBean = (ProtocolSubmissionInfoBean) vecDataObject.get(0) ;
						submisionTypeCode = protocolSubmissionInfoBean.getSubmissionTypeCode() ;
					}
				}
			}
		}
		
		return submisionTypeCode ;
		
	}
	
	/**
	 * Getter for property actionDate.
	 * @return Value of property actionDate.
	 */
	public java.sql.Date getActionDate() {
		return actionDate;
	}
	
	/**
	 * Setter for property actionDate.
	 * @param actionDate New value of property actionDate.
	 */
	public void setActionDate(java.sql.Date actionDate) {
		this.actionDate = actionDate;
	}
	
	/* Case 818  end - prahalad - May 10 2004 */
        //Added for case 2176 - Risk Levels - start
        /**
         * Get the all the protocol risk levels which are newly added or modified
         */
        public Vector getNewOrModifiedRiskLevels(){
            Vector vecProtocolRiskLevels = new Vector();
            if(riskLevels!=null){
                ProtocolRiskLevelBean protocolRiskLevelBean = null;
                for(int i = 0; i < riskLevels.size(); i++ ){
                    protocolRiskLevelBean = (ProtocolRiskLevelBean)riskLevels.get(i);
                    if(protocolRiskLevelBean.getAcType()!=null &&
                            !protocolRiskLevelBean.getAcType().equals("")){
                        vecProtocolRiskLevels.add(protocolRiskLevelBean);
                    }
                }
            }
            return vecProtocolRiskLevels;
        }
        //Added for case 2176 - Risk Levels - end
}
