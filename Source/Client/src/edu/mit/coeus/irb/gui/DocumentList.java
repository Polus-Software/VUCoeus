/*
 * @(#)DocumentList.java 1.0 08/28/02
 *
 * Copyright (c) Massachusetts Institute of Technology
 * 77 Massachusetts Avenue, Cambridge, MA 02139-4307
 * All rights reserved.
 */

/*
 * DocumentList.java
 *
 * Created on August 28, 2003, 9:33 AM
 */

/* PMD check performed, and commented unused imports and variables on 15-JULY-2010
 * by Johncy M John
 */
package edu.mit.coeus.irb.gui;


import edu.mit.coeus.mail.controller.ActionValidityChecking;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.ListSelectionModel;
import java.net.*;

import edu.mit.coeus.gui.CoeusDlgWindow;
//import edu.mit.coeus.irb.bean.DocumentListController;
import edu.mit.coeus.irb.bean.*;
//import edu.mit.coeus.utils.CoeusGuiConstants;
import edu.mit.coeus.gui.CoeusFontFactory;
import edu.mit.coeus.utils.*;
import edu.mit.coeus.brokers.RequesterBean;
import edu.mit.coeus.brokers.ResponderBean;
//import edu.mit.coeus.exception.CoeusException;
import edu.mit.coeus.gui.CoeusMessageResources;
import edu.mit.coeus.gui.URLOpener;
//import java.awt.Cursor;
import java.io.ByteArrayInputStream;
import java.util.Hashtable;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/** Displays the Document List to View.
 * @author sharathk
 */
public class DocumentList extends javax.swing.JComponent {
    
    private DocumentListMediator documentListMediator;
    private DocumentListController documentListController;
    private DocumentListTableModel documentListTableModel;
    private CoeusDlgWindow dialog;
    private Vector data;
    
    private Frame owner;
    private boolean modal;
    //title modified for coeus 4.3 enhancement
    private String title = "Correspondences List"; //modified by Vyjayanthi
    
    //Added by Vyjayanthi
    //Start
    String protocolNumber;
    String actionDescription;
    String actionMenu;
    //End
    
    private final static char GET_CUSTOM_TAGS_REGENERATE = 'y';
    private final static char REGENERATE_CORRESPONDENCE_WITH_TAGS ='Y';
    
    // Added for Coeus 4.3 Enhancement.
    private char mode = 'M';
//    private static final int WIDTH = 600;
//    private static final int HEIGHT = 260;
    
    //prps start - nov 13 2003
    ProtocolActionsBean actionBean ;
    private final String PROTOCOL_ACTION_SERVLET = "/protocolActionServlet";
    //Added for Coeus 4.3 enhancement
    private final String PROTOCOL_MAINTENANCE_SERVLET = "/protocolMntServlet";
    private CoeusMessageResources coeusMessageResources;
    //Added for case #1961 start 1
    private boolean buttonPress = false;
    //Added for case #1961 end 1
    //prps end - nov 13 2003
    // Added for Coeus 4.3 enhancement - starts
    private boolean dataChanged = false;
    private boolean flagEnabled = false;
    //Added for 4.3 Enhancement - ends
    //Added for Coeus4.3 enhancement - Email Notification - start
    private final String EMPTY_STRING = "";
    
    private String actionTypeCode = "";
    //Added for Coeus4.3 enhancement - Email Notification - end
    /** Creates new form DocumentList
     * @param owner owner from which the dialog is displayed
     * @param modal true for a modal dialog, false for one that allows other windows to be active at the same time
     */
    public DocumentList(Frame owner, boolean modal) {
        this.owner = owner;
        this.modal = modal;
        initComponents();
        postInitComponents();
    }
    
    /**
     * Added for Coeus 4.3 Enhancement
     * Creates new form DocumentList
     * @param owner owner from which the dialog is displayed
     * @param modal true for a modal dialog, false for one that allows other windows to be active at the same time
     * @param mode sets the mode which the window is opened.
     */
    public DocumentList(Frame owner, boolean modal, char mode) {
        this.owner = owner;
        this.modal = modal;
        this.mode = mode;
        initComponents();
        postInitComponents();
    }
    
    /** Creates new form DocumentList
     * @param owner owner from which the dialog is displayed
     * @param title Dialog Title.
     * @param modal true for a modal dialog, false for one that allows other windows to be active at the same time
     */
    public DocumentList(Frame owner, String title, boolean modal) {
        this(owner, modal);
        this.title = title;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scrPnDocumentList = new javax.swing.JScrollPane();
        tblDocumentList = new javax.swing.JTable();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtArTitle = new javax.swing.JTextArea();
        btnRegenerate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(484, 229));
        setPreferredSize(new java.awt.Dimension(484, 254));
        scrPnDocumentList.setMinimumSize(new java.awt.Dimension(360, 200));
        scrPnDocumentList.setPreferredSize(new java.awt.Dimension(360, 225));
        scrPnDocumentList.setViewportView(tblDocumentList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 2, 2);
        add(scrPnDocumentList, gridBagConstraints);

        btnOk.setFont(CoeusFontFactory.getLabelFont());
        btnOk.setMnemonic('V');
        btnOk.setText("View");
        btnOk.setMaximumSize(new java.awt.Dimension(75, 24));
        btnOk.setMinimumSize(new java.awt.Dimension(75, 24));
        btnOk.setPreferredSize(new java.awt.Dimension(75, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 5);
        add(btnOk, gridBagConstraints);

        btnCancel.setFont(CoeusFontFactory.getLabelFont());
        btnCancel.setMnemonic('C');
        btnCancel.setText("Close");
        btnCancel.setMaximumSize(new java.awt.Dimension(103, 24));
        btnCancel.setMinimumSize(new java.awt.Dimension(103, 24));
        btnCancel.setPreferredSize(new java.awt.Dimension(103, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 5);
        add(btnCancel, gridBagConstraints);

        txtArTitle.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        txtArTitle.setEditable(false);
        txtArTitle.setFont(CoeusFontFactory.getLabelFont());
        txtArTitle.setLineWrap(true);
        txtArTitle.setText("Reports generated");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(txtArTitle, gridBagConstraints);

        btnRegenerate.setFont(CoeusFontFactory.getLabelFont());
        btnRegenerate.setMnemonic('R');
        btnRegenerate.setText("Regenerate");
        btnRegenerate.setMaximumSize(new java.awt.Dimension(75, 24));
        btnRegenerate.setMinimumSize(new java.awt.Dimension(75, 24));
        btnRegenerate.setPreferredSize(new java.awt.Dimension(75, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        add(btnRegenerate, gridBagConstraints);

        btnSave.setFont(CoeusFontFactory.getLabelFont());
        btnSave.setMnemonic('C');
        btnSave.setText("Save");
        btnSave.setMaximumSize(new java.awt.Dimension(75, 24));
        btnSave.setMinimumSize(new java.awt.Dimension(75, 24));
        btnSave.setPreferredSize(new java.awt.Dimension(75, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        add(btnSave, gridBagConstraints);

        btnSend.setFont(CoeusFontFactory.getLabelFont());
        btnSend.setText("Send");
        btnSend.setMaximumSize(new java.awt.Dimension(103, 24));
        btnSend.setMinimumSize(new java.awt.Dimension(103, 24));
        btnSend.setName("btnSend");
        btnSend.setPreferredSize(new java.awt.Dimension(103, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 5);
        add(btnSend, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    /** creates instances of Controller, Mediator and other neccessary Classes.
     * Registers Components with Listeners.
     */
    private void postInitComponents() {
        // Code added for 4.3 Enhancement - starts
        coeusMessageResources = CoeusMessageResources.getInstance();
        String flag = coeusMessageResources.parseMessageKey("display_final_flag_enabled_exceptionCode.100");
        if(flag!=null && flag.equals("Y")){
            flagEnabled = true;
        } else {
            flagEnabled = false;
        }
        documentListMediator = new DocumentListMediator();
        documentListController = new DocumentListController();
        documentListTableModel = new DocumentListTableModel();
        tblDocumentList.setModel(documentListTableModel);
        tblDocumentList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblDocumentList.getTableHeader().setFont(CoeusFontFactory.getLabelFont());
        tblDocumentList.setFont(CoeusFontFactory.getNormalFont());
        // Code added for 4.3 Enhancement - starts
        TableColumn column = tblDocumentList.getColumnModel().getColumn(0);
        column.setPreferredWidth(180);
        column = tblDocumentList.getColumnModel().getColumn(1);
        column.setPreferredWidth(125);
        if(flagEnabled){
            column = tblDocumentList.getColumnModel().getColumn(2);
            column.setPreferredWidth(30);
        }
        // Code added for 4.3 Enhancement - ends
        dialog = new CoeusDlgWindow(owner, modal);
        dialog.setTitle(title);
        dialog.getContentPane().add(this);
//        dialog.setSize(WIDTH, HEIGHT);
        dialog.setResizable(false);
        dialog.pack();
        
        //Registering Components with Event Handler
        btnOk.addActionListener(documentListMediator);
        btnCancel.addActionListener(documentListMediator);
        //prps start - nov 12 2003
        btnRegenerate.addActionListener(documentListMediator) ;
        //Added for Coeus 4.3 enhancement
        btnSave.addActionListener(documentListMediator);
        //prps end - nov 12 2003
        //Added for Coeus 4.3 enhancement: Email Notification - start
        btnSend.addActionListener(documentListMediator);
        //Added for Coeus 4.3 enhancement: Email Notification - end
    }
    //Added for Coeus4.3 enhancement - Email Notification - start
    /**
     * Sets the send button visible if the promptuser is true, else send the
     * email notification automatically.
     */
    public void setMailSettings(){
//        btnSend.setVisible(false);
        if(actionBean!=null){
//            HashMap hmValidAction = null;
//            ActionValidityChecking actionValidityChecking = new ActionValidityChecking();
//            int selectedRow = tblDocumentList.getSelectedRow();
//            String url = EMPTY_STRING;
//            if(data != null && data.size() > 0) {
            // COEUSQA-2375: Send button in correspondences list window should be enabled always - IRB -Start    
//                ProtoCorrespRecipientsBean protoBean = (ProtoCorrespRecipientsBean) data.get(selectedRow);
//            try {
//                url = actionValidityChecking.fetchAttachment(protoBean.getProtocolNumber(),
//                        protoBean.getActionId(), protoBean.getProtoCorrespTypeCode());
//            }
            actionTypeCode = Integer.toString(actionBean.getActionTypeCode());
//            hmValidAction = actionValidityChecking.checkValidAction(ModuleConstants.PROTOCOL_MODULE_CODE,actionBean.getActionTypeCode());
//            String validAction = EMPTY_STRING;
//            String promptUser = EMPTY_STRING;
//            validAction = (String) hmValidAction.get("validAction");
//            promptUser = (String) hmValidAction.get("promptUser");
//            if(validAction.equals("true")){
//                if(promptUser.equals("N")){
//                    COEUSDEV-75:Rework email engine so the email body is picked up from one place
//                    actionValidityChecking.setUrl(url);
//                    actionValidityChecking.sendMail(ModuleConstants.PROTOCOL_MODULE_CODE,actionBean.getActionTypeCode(),
//                            protocolNumber, actionBean.getSequenceNumber());
//                    COEUSDEV-75:End
//                }else{
                    btnSend.setVisible(true);
//                }
//            }
            
            
//            }catch (Exception ex) {
//                ex.printStackTrace();
//            }
        // COEUSQA-2375: Send button in correspondences list window should be enabled always - IRB - End    
        }
    }
    //Added for Coeus4.3 enhancement - Email Notification - end
    
    /** displays the Dialog.
     */
    public void display() {
        txtArTitle.setWrapStyleWord(true);
        dialog.setLocation(CoeusDlgWindow.CENTER);
        if( tblDocumentList.getRowCount() > 0 ) {
            tblDocumentList.requestFocusInWindow();
        }else{
            btnCancel.requestFocusInWindow();
        }
        dialog.setVisible(true);
        
    }
    //Added for case #1961 start 2
    public void loadFormData(ProtocolActionsBean protocolActionsBean) {
        
        btnRegenerate.setVisible(true) ;
        Vector corresType = protocolActionsBean.getProtoCorresType();
        if(corresType == null || corresType.size() == 0){
            data = null;
        }
        Vector corresData = null;
        if(corresType!=null && corresType.size() > 0){
            corresData = new Vector();
            ProtoCorrespRecipientsBean protoCorrespRecipientsBean;
            for(int index =0;index < corresType.size();index++){
                protoCorrespRecipientsBean = new ProtoCorrespRecipientsBean();
                protoCorrespRecipientsBean.setProtocolNumber(protocolActionsBean.getProtocolNumber());
                CorrespondenceTypeFormBean correpTypeFormBean =
                        (CorrespondenceTypeFormBean)corresType.get(index);
                protoCorrespRecipientsBean.setProtoCorrespTypeCode(correpTypeFormBean.getProtoCorrespTypeCode());
                protoCorrespRecipientsBean.setActionId(protocolActionsBean.getActionId());
                protoCorrespRecipientsBean.setProtoCorrespDescription(protocolActionsBean.getActionTypeDescription());
                protoCorrespRecipientsBean.setUpdateTimestamp(correpTypeFormBean.getUpdateTimestamp());
                corresData.addElement(protoCorrespRecipientsBean);
            }
        }
        
        data = corresData;
        protocolNumber = protocolActionsBean.getProtocolNumber();    //Added by Vyjayanthi
        actionDescription = protocolActionsBean.getActionTypeDescription();    //Added by Vyjayanthi
        
        actionBean = protocolActionsBean ;
        if(data == null) {
            data = new Vector();
            btnOk.setEnabled(false);
        }
        btnOk.setEnabled(false);
        txtArTitle.setText("Reports generated during the action '" + actionDescription + "' for the protocol - " + protocolNumber);    //Added by Vyjayanthi
        tblDocumentList.getTableHeader().setReorderingAllowed( false );    //Added by Vyjayanthi
        documentListTableModel.setDataVector(data);
        documentListTableModel.fireTableDataChanged();
        if(data.size() > 0){
            tblDocumentList.setRowSelectionInterval(0,0);
        }
        //Added for Coeus 4.3 enhancement: Email Notification - start
        setMailSettings();
        //Added for Coeus 4.3 enhancement: Email Notification - end
    }
    //Added for case #1961 end 2
    /** Communicates with the controller, gets information and
     * loads the Form.
     * @param protocolActionsBean ProtocolActionsBean for which the Information has to be loaded.
     */
    public void loadForm(ProtocolActionsBean protocolActionsBean) {
        //prps start nov 14 2003
        // allow regenerate functionality
        btnRegenerate.setVisible(true) ;
        //pros end nov 14 2003
        // Added for Coeus 4.3 enhancement
        btnSave.setVisible(true) ;
        data = documentListController.getDocumentDetails(protocolActionsBean);
        btnRegenerate.setEnabled(documentListController.isHasRight());
        // Added for Coeus 4.3 enhancement - starts
        btnSave.setEnabled(documentListController.isHasRight());
        if(!flagEnabled){
            btnSave.setVisible(false);
        }
        // Added for Coeus 4.3 enhancement - ends
        protocolNumber = protocolActionsBean.getProtocolNumber();    //Added by Vyjayanthi
        actionDescription = protocolActionsBean.getActionTypeDescription();    //Added by Vyjayanthi
        
        //prps start - nov 13 2003
        actionBean = protocolActionsBean ;
        //prps end - nov 13 2003
        if(data == null) {
            data = new Vector();
            btnOk.setEnabled(false);
        } else{
            btnOk.setEnabled(true);
        }
        //title modified for coeus 4.3 enhancement
        txtArTitle.setText("Correspondences generated during the action '" + actionDescription + "' for the protocol - " + protocolNumber);    //Added by Vyjayanthi
        tblDocumentList.getTableHeader().setReorderingAllowed( false );    //Added by Vyjayanthi
        documentListTableModel.setDataVector(data);
        documentListTableModel.fireTableDataChanged();
        if(data.size() > 0){
            tblDocumentList.setRowSelectionInterval(0,0);
        }
        //Added for Coeus 4.3 enhancement: Email Notification - start
        setMailSettings();
        //Added for Coeus 4.3 enhancement: Email Notification - end
    }
    
    //Added by Vyjayanthi
    //Start
    public void loadForm(Vector protocolActions) {
        //prps start nov 14 2003
        // do not allow regenerate functionality
        btnRegenerate.setVisible(false) ;
        //pros end nov 14 2003
        data = protocolActions; //Added By sharath
        documentListTableModel.setDataVector(protocolActions);
        protocolNumber = getProtocolNumber();    //Added by Vyjayanthi
        actionMenu = getMenuAction();    //Added by Vyjayanthi
        txtArTitle.setText("Reports generated during the action '" + actionMenu + "' for the protocol - " + protocolNumber);    //Added by Vyjayanthi
        documentListTableModel.fireTableDataChanged();
        tblDocumentList.getTableHeader().setReorderingAllowed( false );    //Added by Vyjayanthi
        if(protocolActions != null && protocolActions.size() > 0){
            tblDocumentList.setRowSelectionInterval(0,0);
        }
        //Added for Coeus 4.3 enhancement: Email Notification - start
        setMailSettings();
        //Added for Coeus 4.3 enhancement: Email Notification - end
    }
    //End
    
    public int getDocumentCount() {
        return data.size();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRegenerate;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSend;
    private javax.swing.JScrollPane scrPnDocumentList;
    private javax.swing.JTable tblDocumentList;
    private javax.swing.JTextArea txtArTitle;
    // End of variables declaration//GEN-END:variables
    
    /** This is a Listener for Document List Components.
     */
    class DocumentListMediator implements ActionListener {
        
        /** Invoked when an action occurs.
         * @param actionEvent ActionEvent
         */
        public void actionPerformed(ActionEvent actionEvent) {
            Object source = actionEvent.getSource();
            if(source.equals(btnOk)) {
                int selectedRow = tblDocumentList.getSelectedRow();
                if(selectedRow < 0){
                    return ;
                }
                showDocument(selectedRow);
            } else if(source.equals(btnCancel)) {
                // Code added for 4.3 Enhancement - starts
                if(dataChanged){
                    int option
                            = CoeusOptionPane.showQuestionDialog(
                            coeusMessageResources.parseMessageKey(
                            "saveConfirmCode.1002"),
                            CoeusOptionPane.OPTION_YES_NO_CANCEL,
                            CoeusOptionPane.DEFAULT_YES);
                    switch( option ){
                        case ( JOptionPane.YES_OPTION ):
                            try{
                                saveReportList();
                            }catch(Exception e){
                                e.getMessage();
                            }
                            break;
                        case ( JOptionPane.CANCEL_OPTION ):
                            return;
                    }
                }
                dataChanged = false;
                dialog.setVisible(false);
                // Code added for 4.3 Enhancement - ends
            } //prps start - nov 12 2003
            else if(source.equals(btnRegenerate)) {
                int selectedRow = tblDocumentList.getSelectedRow();
                if(selectedRow < 0){
                    return ;
                }
                regenerateLetterWithTags();
                
                
            } //prps end - nov 12 2003
            // Added for Coeus 4.3 enhancement - starts
            else if(source.equals(btnSave)) {
                saveReportList();
            }
            // Added for 4.3 Enhancement - ends
            //Added for Coeus 4.3 enhancement: Email Notification - start
            else if(source.equals(btnSend)){
                ActionValidityChecking actionValidityChecking = new ActionValidityChecking();
                int selectedRow = tblDocumentList.getSelectedRow();
                String url = EMPTY_STRING;
                if(data != null && data.size() > 0) {
                    ProtoCorrespRecipientsBean protoBean = (ProtoCorrespRecipientsBean) data.get(selectedRow);
//                try {
                    url = actionValidityChecking.fetchAttachment(protoBean.getProtocolNumber(), 
                        protoBean.getActionId(), protoBean.getProtoCorrespTypeCode(),ModuleConstants.PROTOCOL_MODULE_CODE);
                }
                //COEUSDEV-75:Rework email engine so the email body is picked up from one place
                actionValidityChecking.setUrl(url);
                actionValidityChecking.sendMail(ModuleConstants.PROTOCOL_MODULE_CODE,actionBean.getActionTypeCode(),
                        //  COEUSQA-2375: Send button in correspondences list window should be enabled always - IRB
                        protocolNumber, actionBean.getSequenceNumber(), false);
                //COEUSDEV-75:End
//                }catch(Exception e) {
//                    e.printStackTrace();
//                }
            }
            //Added for Coeus 4.3 enhancement: Email Notification - end
        } //Action Performed
        /*
         * Created for regenration of the pdf document which contains custom tags.
         */
        private void regenerateLetterWithTags() {
            setCursor( new Cursor( Cursor.WAIT_CURSOR ) );
            String connectTo = CoeusGuiConstants.CONNECTION_URL+ PROTOCOL_ACTION_SERVLET ;
            // connect to the database and get the formData for the given organization id
            RequesterBean request = new RequesterBean();
            
            int selRow = tblDocumentList.getSelectedRow() ;
            ProtoCorrespRecipientsBean protoCorrespRecipientsBean
                    = (ProtoCorrespRecipientsBean)data.get(selRow);
            request.setId(String.valueOf(protoCorrespRecipientsBean.getProtoCorrespTypeCode())) ;
            
            request.setFunctionType(GET_CUSTOM_TAGS_REGENERATE);
            //request.setId(protocolNumber);
            request.setDataObject(actionBean) ;
            ResponderBean response = showCustomizeWindow(request,actionBean);
            if (response == null) {
                request.setFunctionType('G');
                AppletServletCommunicator comm
                        = new AppletServletCommunicator(connectTo,request);
                comm.send();
                response = comm.getResponse();
            }
            if (response.isSuccessfulResponse()) {
                // Display a msg saying regeneration successfull & Refresh the list
                //Commented/Added for case#3072 - Documents Premium - Final flag is not sticking
                //Vector data = documentListController.getDocumentDetails(actionBean);
                data = documentListController.getDocumentDetails(actionBean);
                documentListTableModel.setDataVector(data);
                documentListTableModel.fireTableDataChanged();
                if(data.size() > 0){
                    tblDocumentList.setRowSelectionInterval(0,0);
                }
                setCursor( new Cursor( Cursor.DEFAULT_CURSOR ) );
                CoeusOptionPane.showInfoDialog("Document regenerated") ;
                //Added for case #1961 start 3
                btnOk.setEnabled(true);
                setButtonPress(true);
                //Added for case #1961 end 3
            } else {
                setCursor( new Cursor( Cursor.DEFAULT_CURSOR ) );
                CoeusOptionPane.showInfoDialog("Error while regenerating the document") ;
            }
        }
        
        /*
         * Shows the window for entering the custom tags
         *
         */
        private ResponderBean showCustomizeWindow(RequesterBean request,ProtocolActionsBean actionBean) {
            try {
                Vector dataObjects = new Vector();
                String connectTo =CoeusGuiConstants.CONNECTION_URL
                        + PROTOCOL_ACTION_SERVLET ;
//                Vector sendToServer = new Vector();
                byte[] stream = null;
                String startingCutomTag = null;
                String endingCutomTag = null;
                ByteArrayInputStream byteArrayInputStream=null;
//                String scheduleID = null;
//                String committeeId = null;
                String protoCorrespTypeDesc= null;
                // int selRow =  tblAdhocList.getSelectedRow() ;
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                //setCursor( new Cursor( Cursor.WAIT_CURSOR ) );
                AppletServletCommunicator comm = new AppletServletCommunicator(
                        connectTo, request );
                comm.send();
                ResponderBean response = comm.getResponse();
                if(response!= null){
                    if(response.isSuccessfulResponse()){
                        Vector dataFromServerVec =(Vector)response.getDataObjects();
                        if (dataFromServerVec !=null) {
                            stream = (byte[])dataFromServerVec.get(0);// xsl stream
                            startingCutomTag = (String)dataFromServerVec.get(1);// Starting tag
                            endingCutomTag = (String)dataFromServerVec.get(2);// Ending tag
                            protoCorrespTypeDesc=(String)dataFromServerVec.get(3);//Get the protoCorresTypeDesc
                        }
                        if (stream != null) {
                            byteArrayInputStream = new ByteArrayInputStream(stream);
                        }
                    }else {
                        if (response == null) {
                            response.setMessage("NO_TAGS");
                            return response;
                        }
                        if (response.getMessage().equals("NO_TAGS")) {
                            return response;
                        }
                        CoeusOptionPane.showErrorDialog(response.getMessage());
                    }
                }
                ResponderBean responderBean = null;
                if (byteArrayInputStream != null) {
//                    java.io.BufferedWriter modifiedXsl = null;
//                    String readtext="";
//                    java.io.DataInputStream dataInputStream = new java.io.DataInputStream(byteArrayInputStream);
                    CustomTagScanner customTagScanner = new CustomTagScanner();
                    CoeusVector cvCustomTags = customTagScanner.stringScan(stream,startingCutomTag,endingCutomTag);
                    // check for the custom tags. If present then popup the window for the corresponsding
                    //tags. If not then generate pdf without popping up the window
                    if(cvCustomTags!= null && cvCustomTags.size()>0){
                        ReportGui  reportGui = new ReportGui(CoeusGuiConstants.getMDIForm(),protoCorrespTypeDesc);
                        reportGui.setTemplateData(cvCustomTags);
                        reportGui.postInitComponents();
                        int action;
                        try {
                            setCursor(new Cursor(java.awt.Cursor.WAIT_CURSOR));
                            action = reportGui.displayReportGui();
                        } finally {
                            setCursor(new Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                        }
                        if(action ==reportGui.CLICKED_OK){
                            try {
                                setCursor(new Cursor(java.awt.Cursor.WAIT_CURSOR));
                                Hashtable htData = reportGui.getXslData();
                                byte[] customData = customTagScanner.replaceContents(htData);
                                //adhocDetailsBean.setFormId(tblAdhocList.getValueAt(selRow, 0).toString()) ;
                                // adhocDetailsBean.setDescription(tblAdhocList.getValueAt(selRow, 1).toString()) ;
                                dataObjects.add(0,actionBean);
                                dataObjects.add(1,customData);
                                request.setFunctionType(REGENERATE_CORRESPONDENCE_WITH_TAGS);
                                request.setDataObjects(dataObjects);
                                responderBean= generatePdfForTags(request);
                            } finally {
                                setCursor(new Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                            }
                        }else{
                            // Do the usual action
                            //scheduleXMLGenerator('M');
                        }
                    }else{
                        // Do the usual action
                        // showDocument();
                    }
                }
                return responderBean;
            } catch (Exception e) {
                e.printStackTrace();
                CoeusOptionPane.showErrorDialog(e.getMessage());
                return null;
            }
        }
        
        /*
         * Generates the PDF with Tags
         */
        private ResponderBean generatePdfForTags(RequesterBean request) {
            String connectTo =CoeusGuiConstants.CONNECTION_URL
                    + PROTOCOL_ACTION_SERVLET ;
//            boolean success=false;
            AppletServletCommunicator comm = new AppletServletCommunicator(connectTo, request);
            comm.send();
            ResponderBean response = comm.getResponse();
            return response;
        }
        
        
        
        
        
        
        private void regenerateLetter() {
            setCursor( new Cursor( Cursor.WAIT_CURSOR ) );
            
            String connectTo = CoeusGuiConstants.CONNECTION_URL+ PROTOCOL_ACTION_SERVLET ;
            // connect to the database and get the formData for the given organization id
            RequesterBean request = new RequesterBean();
            
            int selRow = tblDocumentList.getSelectedRow() ;
            ProtoCorrespRecipientsBean protoCorrespRecipientsBean
                    = (ProtoCorrespRecipientsBean)data.get(selRow);
            request.setId(String.valueOf(protoCorrespRecipientsBean.getProtoCorrespTypeCode())) ;
            
            request.setFunctionType('G');
            //request.setId(protocolNumber);
            request.setDataObject(actionBean) ;
            AppletServletCommunicator comm
                    = new AppletServletCommunicator(connectTo, request);
            comm.send();
            ResponderBean response = comm.getResponse();
            if (response == null) {
                response = new ResponderBean();
                response.setResponseStatus(false);
                response.setMessage(coeusMessageResources.parseMessageKey(
                        "server_exceptionCode.1000"));
            }
            if (response.isSuccessfulResponse()) {
                // Display a msg saying regeneration successfull & Refresh the list
                Vector data = documentListController.getDocumentDetails(actionBean);
                documentListTableModel.setDataVector(data);
                documentListTableModel.fireTableDataChanged();
                if(data.size() > 0){
                    tblDocumentList.setRowSelectionInterval(0,0);
                }
                setCursor( new Cursor( Cursor.DEFAULT_CURSOR ) );
                CoeusOptionPane.showInfoDialog("Document regenerated") ;
            } else {
                setCursor( new Cursor( Cursor.DEFAULT_CURSOR ) );
                CoeusOptionPane.showInfoDialog("Error while regenerating the document") ;
            }
            
        }
        
        
        /** Displays the Selected Document.
         * @param selectedRow Selected Row.
         */
        private void showDocument(int selectedRow) {
            String url = documentListController.getDocumentURL((ProtoCorrespRecipientsBean)data.get(selectedRow));
//            AppletContext coeusContxt = CoeusGuiConstants.getMDIForm().getCoeusAppletContext();
            url = url.replace('\\', '/') ; // this is fix for Mac
            try{
//                URL reportUrl = new URL( CoeusGuiConstants.CONNECTION_URL + url );
                
//                if (coeusContxt != null) {
//                    coeusContxt.showDocument( reportUrl, "_blank" );
//                }
//                else
//                {
//                    javax.jnlp.BasicService bs = (javax.jnlp.BasicService)javax.jnlp.ServiceManager.lookup("javax.jnlp.BasicService");
//                    bs.showDocument(reportUrl);
//                }
                URL reportUrl = new URL(url);
                URLOpener.openUrl(reportUrl);
            }catch (MalformedURLException malformedURLException) {
                malformedURLException.printStackTrace();
//            }catch(javax.jnlp.UnavailableServiceException usex) {
//                // Service is not supported
//                CoeusOptionPane.showInfoDialog(coeusMessageResources.parseMessageKey("printFrm_exceptionCode.1001"));
//                usex.printStackTrace();
                
            }catch( Exception ue) {
                ue.printStackTrace() ;
            }
            
        }
        
        /**
         * Added for Coeus 4.3 enhancement.
         * To save the final flag to the data base
         */
        private void saveReportList(){
            try{
                String connectTo = CoeusGuiConstants.CONNECTION_URL+ PROTOCOL_MAINTENANCE_SERVLET ;
                // connect to the database and get the formData for the given organization id
                //Modified for case#3072 - Documents Premium - Final flag is not sticking - start
                Vector vecCorrespondences = null;
                RequesterBean request = new RequesterBean();    
                AppletServletCommunicator comm = null;
                //int selRow = tblDocumentList.getSelectedRow() ;                
                int count = tblDocumentList.getRowCount();
                Vector savedData = null;
                for(int index = 0; index < count; index++){
                    vecCorrespondences = new Vector();
                    ProtoCorrespRecipientsBean protoCorrespRecipientsBean
                            = (ProtoCorrespRecipientsBean)data.get(index);
                    request.setFunctionType('v');
                    vecCorrespondences.add(protoCorrespRecipientsBean);
                    vecCorrespondences.add(new Character(mode));
                    request.setId(protocolNumber);
                    request.setDataObjects(vecCorrespondences) ;
                    comm = new AppletServletCommunicator(connectTo, request);
                    comm.send();
                    ResponderBean response = comm.getResponse();
                    if (response == null || !response.isSuccessfulResponse()) {
                        CoeusOptionPane.showErrorDialog(response.getMessage()) ;
                        dataChanged = false;
                        return;
                    } else {
//                        data = (Vector)response.getDataObject();
//                        dataChanged = false;
                        // store the data returned after saving.
                        savedData = (Vector)response.getDataObject();
                    }
                }
                // The saved data contains the data saved in the database and
                // will have the latest modifiy timestamp. Re assign the
                // data to the instance variable and the table model.
                if (savedData != null){
                    data = savedData;
                    documentListTableModel.setDataVector(data);
                    documentListTableModel.fireTableDataChanged();    
                    if(data.size() > 0){
                        tblDocumentList.setRowSelectionInterval(0,0);
                    }
                    dataChanged = false;
                }                                                            
                //Modified for case#3072 - Documents Premium - Final flag is not sticking - end                                    
            }catch( Exception ue) {
                ue.printStackTrace() ;
            }
        }
        
    }//End Class DocuementListMediator
    
    /** Table Model for Document List.
     */
    class DocumentListTableModel extends DefaultTableModel {
        
        private String colNames[];
        private Class colTypes[];
        private ProtoCorrespRecipientsBean protoCorrespRecipientsBean;
        
        /**
         * Added for Coeus 4.3 enhancement.
         * To initialize the dynamic objects according to the condition
         * that final flag needed or not.
         */
        public DocumentListTableModel(){
            if(flagEnabled){
                colNames = new String[3];
                colTypes = new Class[3];
                colNames[2] = "Final";
                colTypes[2] = Boolean.class;
            } else {
                colNames = new String[2];
                colTypes = new Class[2];
            }
            colNames[0] = "Description";
            colNames[1] = "Date";
            colTypes[0] = String.class;
            colTypes[1] = String.class;
        }
        
        /** Returns true if the cell at row and column is editable.
         * @param row the row whose value to be queried
         * @param column the column whose value to be queried
         * @return true if the cell is editable
         */
        public boolean isCellEditable(int row, int column) {
            // Code modified for coeus4.3 enhancement - starts
            if(column==2){
                return true;
            } else {
                return false;
            }
            // Code modified for coeus4.3 enhancement - ends
        }
        
        /** Returns the number of columns in the model.
         * @return the number of columns in the model
         *
         */
        public int getColumnCount() {
            // Code modified for coeus4.3 enhancement - starts
            if(flagEnabled){
                return 3;
            } else {
                return 2;
            }
            // Code modified for coeus4.3 enhancement - ends
        }
        
        /** Returns the number of rows in the model.
         * @return the number of rows in the model
         */
        public int getRowCount() {
            return dataVector.size();
        }
        
        /** Returns the value for the cell at column and row
         * @param row the row whose value is to be queried
         * @param column the column whose value is to be queried
         * @return the value Object at the specified cell
         */
        public Object getValueAt(int row, int column) {
            protoCorrespRecipientsBean = (ProtoCorrespRecipientsBean)dataVector.get(row);
            switch (column) {
                case 0:
                    return protoCorrespRecipientsBean.getProtoCorrespDescription();
                case 1:
                    //Added for case #1961 start 4
                    if(protoCorrespRecipientsBean.getUpdateTimestamp() == null){
                        return "";
                    }
                    //Added for case #1961 end 4
                    return CoeusDateFormat.format( protoCorrespRecipientsBean.getUpdateTimestamp().toString() );    //Modified by Vyjayanthi
                    // Code modified for coeus4.3 enhancement - starts
                case 2:
                    return new Boolean(protoCorrespRecipientsBean.isFinalFlag());
                    // Code modified for coeus4.3 enhancement - ends
                default:
                    return "";
            }
        }
        
        /** Returns the name of the column at colIndex
         * @param colIndex the index of the column
         * @return the name of the column
         *
         */
        public String getColumnName(int colIndex) {
            return colNames[colIndex];
        }
        
        /** Returns the most specific superclass for all the cell values in the column
         * @param colIndex the index of the column
         * @return the class of the object values in the model
         */
        public Class getColumnClass(int colIndex) {
            return colTypes[colIndex];
        }
        
        /** sets the DataVector for the Model.
         * @param data new Data Vector.
         */
        public void setDataVector(Vector data) {
            dataVector = data;
            
        }
        
        /** Sets the value in the cell at column and row to aValue.
         * @param value the new value.
         * @param row the row whose value is to be changed
         * @param column the column whose value is to be changed
         */
        public void setValueAt(Object value, int row, int column) {
            // Code modified for coeus4.3 enhancement - starts
            protoCorrespRecipientsBean = (ProtoCorrespRecipientsBean)dataVector.get(row);
            protoCorrespRecipientsBean.setFinalFlag(!protoCorrespRecipientsBean.isFinalFlag());
            dataChanged = true;
            fireTableCellUpdated(row,column);
            fireTableDataChanged();
            tblDocumentList.setRowSelectionInterval(row,row);
            // Code modified for coeus4.3 enhancement - ends
            //Overridden. Don't do anything here since default implementation overwrites values.
        }
        
    }//End DocumentListTableModel
    
    //Added by Vyjayanthi
    //Start
    public void setProtocolNumber(String protocolNumber){
        this.protocolNumber = protocolNumber;
    }
    
    public String getProtocolNumber(){
        return protocolNumber;
    }
    
    public void setMenuAction(String actionMenu){
        this.actionMenu = actionMenu;
    }
    public String getMenuAction(){
        return actionMenu;
    }
    //Added for case #1961 start 5
    /**
     * Getter for property buttonPress.
     * @return Value of property buttonPress.
     */
    public boolean isButtonPress() {
        return buttonPress;
    }
    
    /**
     * Setter for property buttonPress.
     * @param buttonPress New value of property buttonPress.
     */
    public void setButtonPress(boolean buttonPress) {
        this.buttonPress = buttonPress;
    }
    //Added for case #1961 end 5
    //End
    
    //Added for Coeus 4.3 enhancement: Email Notifications- start
    
    //Setter method for the field actionBean
    public void setActionBean(ProtocolActionsBean actionBean){
        this.actionBean = actionBean;
    }
    
    //Getter method for the actionBean field
    public ProtocolActionsBean getActionBean(){
        return actionBean;
    }
    //Added for Coeus 4.3 enhancement: Email Notifications- end
    
}
