/*
 * @(#)ProtocolCorrespCommitteeDialog.java  1.0  08/08/03
 *
 * Copyright (c) Massachusetts Institute of Technology
 * 77 Massachusetts Avenue, Cambridge, MA 02139-4307
 * All rights reserved.
 */

package edu.mit.coeus.irb.gui;

import java.util.Vector;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.ListSelectionModel;
import javax.swing.KeyStroke;
import edu.mit.coeus.gui.CoeusDlgWindow;
import edu.mit.coeus.gui.CoeusFontFactory;
import javax.swing.table.TableColumn;
import javax.swing.table.JTableHeader;
import edu.mit.coeus.gui.CoeusAppletMDIForm;

//import edu.mit.coeus.gui.CoeusAppletMDIForm; // modified 3.41pm 8/8





/**
 * This class displays all the  Committee Ids and Names.
 * User is privileged to select one Committee Id from the table.
 * @author Manoj Kumar
 */

public class ProtocolCorrespCommitteeDialog extends edu.mit.coeus.gui.CoeusDlgWindow
implements ActionListener{
    
    private Vector protoCommitteeData;
    private String committeeIdSelected = null;
    private String commNameSelected = null;
    private java.awt.Dialog dialog;
    private Vector commTableData;
    private Vector commColNames;
    private CoeusAppletMDIForm mdiForm;
    
    
    /** Default Constructor
     *
     */
    public ProtocolCorrespCommitteeDialog(){
    }
    /** Creates new form Dialog window contains committe details in a table
     *
     * @param parent java.awt.Dilag
     * @param model takes boolean value to display dialog model or modeless
     * @param tableData takes vector of vectors to display committee details
     * @param colNames takes a vector contains column names
     */
    
    public ProtocolCorrespCommitteeDialog(CoeusAppletMDIForm mdiForm, boolean modal,
    Vector tableData,Vector colNames) {
        super(mdiForm,"Committee Details", modal);    // calling parent
        this.setLocationRelativeTo(mdiForm);
        this.mdiForm = mdiForm;
        commTableData = tableData;
        commColNames = colNames;
        dialog = this;
        initComponents();   // Initializing the components on dialog window
        addListeners();     // Adding Listeners to Components
        setLocation(this.CENTER);
        JTableHeader header = tblCommittee.getTableHeader();
        header.setReorderingAllowed(false);
        header.setResizingAllowed(true);
          header.setFont(CoeusFontFactory.getLabelFont());
        showDialog();       // calling to diplay Dialog Window
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        pnlEdit = new javax.swing.JPanel();
        srpEdit = new javax.swing.JScrollPane();
        tblCommittee = new javax.swing.JTable();
        pnlButtons = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(0);
        setName("committeeDetails");
        setResizable(false);
        pnlEdit.setLayout(new java.awt.GridBagLayout());

        pnlEdit.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Panel.background"));
        pnlEdit.setFont(CoeusFontFactory.getNormalFont());
        pnlEdit.setMinimumSize(new java.awt.Dimension(360, 300));
        srpEdit.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        srpEdit.setFont(CoeusFontFactory.getLabelFont());
        srpEdit.setMaximumSize(new java.awt.Dimension(320, 275));
        srpEdit.setMinimumSize(new java.awt.Dimension(320, 275));
        srpEdit.setPreferredSize(new java.awt.Dimension(320, 275));
        tblCommittee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "CommitteeId", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        srpEdit.setViewportView(tblCommittee);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 8, 0);
        pnlEdit.add(srpEdit, gridBagConstraints);

        pnlButtons.setLayout(new java.awt.GridBagLayout());

        pnlButtons.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Panel.background"));
        btnOK.setFont(CoeusFontFactory.getLabelFont());
        btnOK.setText("OK");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlButtons.add(btnOK, gridBagConstraints);

        btnCancel.setFont(CoeusFontFactory.getLabelFont());
        btnCancel.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        pnlButtons.add(btnCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(14, 15, 0, 10);
        pnlEdit.add(pnlButtons, gridBagConstraints);

        getContentPane().add(pnlEdit, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    
    /** The method is used to add Listeners to Components to captures events
     * It will add action Listener to ok, cancel buttons and adds Mouse listener to Committee Text Box
     */
    private void addListeners() {
        
        
        KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0);
        ActionListener action = new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                closeDialog();
            }
        };
        this.getRootPane().registerKeyboardAction(action,stroke,
            javax.swing.JComponent.WHEN_FOCUSED);
        addWindowListener(new java.awt.event.WindowAdapter(){
            public void windowActivated(java.awt.event.WindowEvent we){
                if( tblCommittee.getRowCount() > 0 ) {
                    tblCommittee.requestFocusInWindow();
                }else{
                    btnCancel.requestFocusInWindow();
                }
            }
            public void windowClosing(java.awt.event.WindowEvent windowEvent){
                closeDialog();
            }
        });
        btnOK.addActionListener(this);
        btnCancel.addActionListener(this);
        /*
         *  This Mouse Listener Creates Mouse Adapter Class to get Selected Row Data in Committee
         *  Details Table
         */
        tblCommittee.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent me){
                if (me.getClickCount() == 2) {
                    int selRow = tblCommittee.getSelectedRow();
                    if(selRow >= 0){
                        committeeIdSelected =
                        (String)tblCommittee.getModel().getValueAt(selRow,0);
                        commNameSelected =
                        (String)tblCommittee.getModel().getValueAt(selRow,1);
                        dialog.dispose();   // Dialog disposes
                    }
                }
            }
        });
    }
    /**
     * This Method receives all events generated by ok Button and Cancel Button
     */
    public void actionPerformed(ActionEvent ae) {
        Object comSelected = ae.getSource();
        if(comSelected == btnOK){
            int selRow = tblCommittee.getSelectedRow();     /* Gets Selcted Row in Table */
            if(selRow >=0 ){
                committeeIdSelected =
                (String)tblCommittee.getModel().getValueAt(selRow,0);   /* Gets CommitteId Values */
                commNameSelected = (String)tblCommittee.getModel().getValueAt(selRow,1);    /* Gets Committee Name */
                this.dispose();     /* Dialog disposes*/
            }else{
                this.dispose(); /* Selected Row in the table is not in the availble range */
            }
        }
        else if(comSelected == btnCancel){
            committeeIdSelected = null;
            commNameSelected = null;
            this.dispose();
        }
    }
    /** This Method Displays Dialog Window and  calls setTableData method to set data to table
     */
    private void showDialog(){
        setTableData(commTableData,commColNames);
        
        KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0);
        // Ananomous class to close window when Escape key pressed
        ActionListener actionListener = new ActionListener(){
            public void actionPerformed(ActionEvent ae){
                closeDialog();
            }
        };
        this.getRootPane().registerKeyboardAction(actionListener, stroke,
        javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW);
        
        this.show();
    }
    /** This Method Sets Committee Details Data in Table
     *  It Creates a Table Model to Display Data
     *  Table Model will not allow to edit cells is Table
     *  This Table Model allows Single Row selection
     */
    private void setTableData(Vector commTableData,Vector commColNames) {
        /* Creatring Table Model To display Data in Table */
        if(commTableData != null && commTableData.size() > 0){
            javax.swing.table.DefaultTableModel tableModel =
            new javax.swing.table.DefaultTableModel(commTableData, commColNames ){
                public boolean isCellEditable(int rowIndex, int columnIndex){
                    return false;
                }
            };
            tblCommittee.setModel(tableModel);
            TableColumn clmName = tblCommittee.getColumnModel().getColumn(0);
            clmName.setPreferredWidth(150);
            clmName.setMaxWidth(400);
            clmName.setMinWidth(150);
            clmName = tblCommittee.getColumnModel().getColumn(1);
            clmName.setPreferredWidth(150);
            clmName.setMaxWidth(400);
            clmName.setMinWidth(150);
            
            
            tblCommittee.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            srpEdit.setViewportView(tblCommittee);  /* Adding to Scroll Pane*/
            tblCommittee.setSelectionMode(ListSelectionModel.SINGLE_SELECTION );
        }
    }
    /** This Method Sets Column Names
     * @Param columnNames takes Vector of Column Names
     */
    public void setColumnNames(Vector columnNames) {
        commColNames = columnNames;
    }
    
    /** This Method returns  Column Names
     * @return commNames retunrs Vector of Column Names
     */
    public Vector getColumnNames() {
        return this.commColNames;
    }
    /** This Method Sets table Data to the Class variable
     * @Param data takes Vector of Vectors
     */
    public void setCommTableData(Vector data) {
        this.commTableData = data;
    }
    /** This Method return  Table Data
     * @return commTableData retunrs Table Data as Vector of Vectors
     */
    public Vector getCommTableData() {
        return this.commTableData;
    }
    /** Closes the dialog
     */    /** Closes the dialog
      */
    private void closeDialog() {
        this.dispose();
    }
    
    /** This Method returns  Selected CommitteId
     * @return committeeIdSelected Committee Id selected from the Table
     */
    
    public String getSelectedCommitteeId() {
        return committeeIdSelected;
    }
    /** This Method returns  Selected Committe name
     * @return commNameSelected returns Committee name selected from the Table
     */
    public String getSelectedCommitteeName() {
        return commNameSelected;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnCancel;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JTable tblCommittee;
    private javax.swing.JScrollPane srpEdit;
    private javax.swing.JPanel pnlEdit;
    // End of variables declaration//GEN-END:variables
}